#!/bin/bash

#---------------------------------------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_spmsuit

Cerebellum segmentation with SUIT. This can be useful if you're editing FreeSurfer segmentations and
want to exclude the cerebellum again. Naturally also useful if you're interested specifically in the
cerebellum. 

Usage:
  call_spmsuit [options] <input image> <output directory + basename>

Options:
  -h|--help       print this help text
  -s <SPM_PATH>   path to SPM; should contain CAT12 in toolbox directory
  -l <LOG_PATH>	  path to working directory, defaults to DIR_LOGS

Positional:
  <input image>   input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                  new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                  not like *.nii.gz files.
  <output base>	  directory+basename of output image, including directory, '_desc-cereb_mask.nii[.gz]',
                  '_desc-cereb-wm.nii[.gz]', and '_desc-cereb_gm.nii[.gz]' will be appended

Example:
 call_spmsuit t1w.nii.gz derivatives/suit/sub-01/ses-1/sub-01_acq-MP2RAGE

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 1 ]] ; then
  Usage
fi

# Check for subject & session flags
RM=1
while getopts :-:hds: argument
do
  case ${argument} in      
    -)
      case "${OPTARG}" in
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;          
    s)  SPM=${OPTARG}
          ;;
    d)  RM=0
          ;;
    h)  Usage
          ;;              
  esac
done

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z ${SPM} ]]; then
  if [[ -z ${SPM_PATH} ]]; then
    echo "ERROR: SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH=${SPM_PATH}
  fi
else
  SPM_PATH=${SPM}
fi

# if file specified is in current directory, add entire path
INPUT=$(fetch_filepath ${INPUT})

ext=$(fetch_extension ${INPUT})
if [[ ${ext} == "gz" ]]; then
  in_file=$(dirname ${INPUT})/$(basename ${INPUT} .gz)
  gunzip -fc ${INPUT} > ${in_file}
else
  in_file=${INPUT}
fi

#-----------------------------------------------------------------------------
# Create new script
new_script=$(dirname ${OUTPUT})/spm_suit.m
if [[ -f ${new_script} ]]; then
  rm -r ${new_script}
fi

if [[ ! -d $(dirname ${OUTPUT}) ]]; then
  mkdir -p $(dirname ${OUTPUT})
fi

make_suit_script ${SPM_PATH} ${in_file} ${new_script}

# call_matlab = in call_bashhelper
call_matlab ${new_script}

# Convert SPM's .nii-files to .nii.gz if the input file was nii.gz
mask_img=$(find $(dirname ${in_file}) -type f -name "*pcereb*" 2>/dev/null)
gm_img=$(find $(dirname ${in_file}) -type f -name "*seg1*" 2>/dev/null)
wm_img=$(find $(dirname ${in_file}) -type f -name "*seg2*" 2>/dev/null)

if [[ $? -ne 0 || ! -f "${mask_img}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "make_suit_script"
  exit 1
fi

if [[ ! -z ${mask_img} ]]; then
  if [[ ${ext} == "gz" ]]; then
    gzip -fc ${mask_img} > ${OUTPUT}_desc-cereb_mask.nii.gz 2>/dev/null
    gzip -fc ${wm_img} > ${OUTPUT}_desc-cereb_wm.nii.gz 2>/dev/null
    gzip -fc ${gm_img} > ${OUTPUT}_desc-cereb_gm.nii.gz 2>/dev/null

    rm -r ${in_file} ${mask_img} ${wm_img} ${gm_img} 2>/dev/null
  else
    mv ${mask_img} ${OUTPUT}_desc-cereb_mask.nii
    mv ${wm_img} ${OUTPUT}_desc-cereb_wm.nii
    mv ${gm_img} ${OUTPUT}_desc-cereb_gm.nii
  fi
fi

if [[ ${RM} -eq 1 ]]; then
  rm -r $(dirname ${in_file})/c*$(basename ${in_file}) *.mat 2>/dev/null
  rm -r $(dirname ${in_file})/y_$(basename ${in_file}) 2>/dev/null
fi 
