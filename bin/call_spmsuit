#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_spmsuit

Cerebellum segmentation with SUIT. This can be useful if you're editing FreeSurfer segmentations 
and want to exclude the cerebellum again. Naturally also useful if you're interested specifically 
in the cerebellum. 

Usage:
  call_spmsuit [options] <input image> <output directory + basename>

Optional:
  -s <SPM_PATH>   path to SPM; should contain SUIT in toolbox directory
  -l <LOG_PATH>	  path to working directory, defaults to DIR_LOGS

Options:
  -h|--help       print this help text
  -k|--keep       keep intermediate files

Positional:
  <input image>   input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                  new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                  not like *.nii.gz files.
  <output base>	  directory+basename of output image, including directory. The suffixes:
                    *_desc-cereb_mask.nii[.gz],
                    *_desc-cereb-wm.nii[.gz]
                    *_desc-cereb_gm.nii[.gz]
                  will be appended

Example:
 call_spmsuit t1w.nii.gz derivatives/suit/sub-01/ses-1/sub-01_acq-MP2RAGE

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
CLEAN_UP=1
while getopts :-:hks: argument
do
  case ${argument} in      
    -)
      case "${OPTARG}" in
        help)
          Usage && exit 0
          ;;
        keep)
          CLEAN_UP=0
          ;; 
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;; 
    s)  SPM=${OPTARG}
          ;;
    k)  CLEAN_UP=0
            ;;
    h)  Usage
          ;; 
  esac
done

#-----------------------------------------------------------------------------
# read args
INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${INPUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${INPUT}${RESET}\""
  exit 1
else
  INPUT="$(readlink -f "${INPUT}")"
fi

if [[ -z "${OUTPUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z "${SPM}" ]]; then
  if [[ -z "${SPM_PATH}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "SPM" "SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH="${SPM_PATH}"
  fi
else
  SPM_PATH="${SPM}"
fi

# double check if directory exists
if [[ ! -d "${SPM_PATH}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "SPM" "Could not find SPM directory ${BOLD_GREEN}${SPM_PATH}${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# get extension and make nii
input_dir="$(dirname "${INPUT}")"
ext=$(fetch_extension "${INPUT}")
if [[ ${ext} == "gz" ]]; then
  in_file="${INPUT%.gz}"
  gunzip -fc "${INPUT}" > "${in_file}"
else
  in_file="${INPUT}"
fi

#-----------------------------------------------------------------------------
# Create new script
new_script="$(dirname "${OUTPUT}")/spm_suit.m"
rm -r "${new_script}" 2>/dev/null

# make output directory
if [[ ! -d "$(dirname "${OUTPUT}")" ]]; then
  mkdir -p "$(dirname "${OUTPUT}")"
fi

#-----------------------------------------------------------------------------
# make script
make_suit_script \
  "${SPM_PATH}" \
  "${in_file}" \
  "${new_script}"

#-----------------------------------------------------------------------------
# call_matlab = in call_bashhelper
call_matlab ${new_script}

#-----------------------------------------------------------------------------
# check outputs

# mask
mask_img=$(
  find "${input_dir}" \
  -type f \
  -name "*pcereb*" \
  2>/dev/null
)

# gm
gm_img=$(
  find "${input_dir}" \
  -type f \
  -name "*seg1*" \
  2>/dev/null
)

# wm
wm_img=$(
  find "${input_dir}" \
  -type f \
  -name "*seg2*" \
  2>/dev/null
)

if [[ $? -ne 0 || ! -f "${mask_img}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "make_suit_script"
  exit 1
fi

#-----------------------------------------------------------------------------
# convert back
if [[ ${ext} == "gz" ]]; then
  gzip -fc "${mask_img}" > "${OUTPUT}_desc-cereb_mask.nii.gz" 2>/dev/null
  gzip -fc "${wm_img}" > "${OUTPUT}_desc-cereb_wm.nii.gz" 2>/dev/null
  gzip -fc "${gm_img}" > "${OUTPUT}_desc-cereb_gm.nii.gz" 2>/dev/null

  rm -r "${in_file}" "${mask_img}" "${wm_img}" "${gm_img}" 2>/dev/null
else
  mv "${mask_img}" "${OUTPUT}_desc-cereb_mask.nii"
  mv "${wm_img}" "${OUTPUT}_desc-cereb_wm.nii"
  mv "${gm_img}" "${OUTPUT}_desc-cereb_gm.nii"
fi

#-----------------------------------------------------------------------------
# convert back
if [[ ${CLEAN_UP} -eq 1 ]]; then
  rm -r "${in_file%/*}/c*${in_file##*/}" *.mat 2>/dev/null
  rm -r "${in_file%/*}/y_${in_file##*/}" 2>/dev/null
fi 
