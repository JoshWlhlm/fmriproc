#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# HELP
function Usage {
    cat <<USAGE
---------------------------------------------------------------------------------------------------
call_freeview

Quickly open and view the surfaces on top of the orig.mgz in Freeview. Specify subject number, 
modalities to view, and optionally include best-vertex markers (for line scanning use).

Usage:
  call_freeview [-d] [-v 0|1] <subj_id> [type]

Options:
  -d              Open in FreeView 3D (overrides all other arguments)
  -p <prefix>     prefix of layering files; format if ?h.<prefix>.pial. If generated with spinoza-
                  layering, this is "equi".
  -v 0|1          Include best vertex markers (default: 0 = no)
  <subj_id>       Subject ID as defined in SUBJECTS_DIR
  [type]          Which type to view:
                    - 'anat': loads anatomical images
                    - 'surf': loads brainmask and surfaces (default)
                    - 'layers': loads layering surfaces from surface_tools

Examples:
  call_freeview -v 1 sub-001 surf
  call_freeview -d sub-001
  call_freeview sub-001 layers
  call_freeview -p some_prefix sub-001 layers # assumes files like 'lh.some_prefix0.1.pial'

---------------------------------------------------------------------------------------------------
USAGE

}

#-----------------------------------------------------------------------------
# Parse args
point=0
VIEWPORT=0
prefix="equi"
while getopts ":dv:p:" arg; do
  case $arg in
    d) VIEWPORT=1 ;;
    v) point=$OPTARG ;;
    p) prefix=$OPTARG ;;    
    *) Usage ;;
  esac
done

SUBJECT=${@:$OPTIND:1}
TYPE=${@:$OPTIND+1:1:-surf}
TYPE=${TYPE:-surf}

[[ -z "$SUBJECT" ]] && Usage && exit 0

#-----------------------------------------------------------------------------
# File detection
FS=${SUBJECTS_DIR:-$HOME/freesurfer/subjects}
lh_point=$(find "$FS/$SUBJECT/mri" -name "*space-fs*hemi-L*" 2>/dev/null | head -n1)
rh_point=$(find "$FS/$SUBJECT/mri" -name "*space-fs*hemi-R*" 2>/dev/null | head -n1)
T2=$(find "$FS/$SUBJECT/mri" -name "T2.mgz" 2>/dev/null | head -n1)

surf_dir="$FS/$SUBJECT/surf"
mri_dir="$FS/$SUBJECT/mri"

function add_vertex_points {
  [[ $point -eq 1 && -f $lh_point && -f $rh_point ]] && \
    echo "$lh_point:colormap=binary $rh_point:colormap=binary"
}

function add_fiducials {
  [[ -f $surf_dir/lh.fiducial && -f $surf_dir/rh.fiducial ]] && \
    echo "$surf_dir/lh.fiducial:edgecolor=green $surf_dir/rh.fiducial:edgecolor=green"
}

#-----------------------------------------------------------------------------
# Viewport mode
if [[ $VIEWPORT -eq 1 ]]; then
  surface="fiducial"
  [[ $SUBJECT == "fsaverage" ]] && surface="inflated"
  launch_freeview -f "$surf_dir/lh.$surface" "$surf_dir/rh.$surface" -viewport 3d
fi

#-----------------------------------------------------------------------------
# Main logic
VOLUMES="$mri_dir/orig.mgz $mri_dir/brainmask.mgz $mri_dir/rawavg.mgz"
VERTICES=$(add_vertex_points)
FIDUCIALS=$(add_fiducials)

# Function to interpolate N RGB colors across a smooth hue spectrum
function generate_gradient {
  local count=$1
  awk -v steps=$count '
    function hsv_to_rgb(h, s, v,  r, g, b, i, f, p, q, t) {
      i = int(h * 6)
      f = h * 6 - i
      p = v * (1 - s)
      q = v * (1 - f * s)
      t = v * (1 - (1 - f) * s)
      if (i % 6 == 0)      { r = v; g = t; b = p }
      else if (i == 1)     { r = q; g = v; b = p }
      else if (i == 2)     { r = p; g = v; b = t }
      else if (i == 3)     { r = p; g = q; b = v }
      else if (i == 4)     { r = t; g = p; b = v }
      else                 { r = v; g = p; b = q }
      printf "%02x%02x%02x\n", int(r * 255), int(g * 255), int(b * 255)
    }
    BEGIN {
      for (i = 0; i < steps; i++) {
        hsv_to_rgb(i / steps, 0.8, 0.9)
      }
    }
  '
}

case $TYPE in
  surf)
    SURFACES=(
      "$surf_dir/lh.white:edgecolor=yellow"
      "$surf_dir/lh.pial:edgecolor=blue"
      "$surf_dir/rh.white:edgecolor=yellow"
      "$surf_dir/rh.pial:edgecolor=blue"
    )
    launch_freeview -v $VOLUMES $VERTICES -f "${SURFACES[@]}" $FIDUCIALS
    ;;
  layers)

    # Required inputs
    suffix="pial"
    hemi_list=(lh rh)

    # Get sorted list of unique layer tags
    layer_keys=$(find "${surf_dir}" -type f -name "*.${suffix}" | \
      sed -En "s|.*/[lr]h\.(${prefix}[^\.]+)\.${suffix}$|\1|p" | \
      sort -V | uniq)

    # Count layers
    n_layers=$(echo "$layer_keys" | wc -l | tr -d ' ')

    # Generate a gradient with as many colors as layers
    colors=($(generate_gradient "$n_layers"))

    # Assemble FreeView command components
    i=0
    LAYERS=""
    for key in $layer_keys; do
      color="${colors[$i]}"
      for hemi in "${hemi_list[@]}"; do
        LAYERS+="${surf_dir}/${hemi}.${key}.${suffix}:edgecolor='#${color}'"$'\n'
      done
      ((i++))
    done

    launch_freeview -v $VOLUMES $VERTICES -f $FIDUCIALS $LAYERS
    ;;
  anat)
    VOLS="$VOLUMES"
    [[ -f $T2 ]] && VOLS="$VOLS $T2"
    launch_freeview -v $VOLS $VERTICES
    ;;
  *)
    echo "Invalid type: $TYPE"
    Usage
    ;;
esac
