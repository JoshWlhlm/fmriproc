#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_ants2lta

This script converts transformation matrices from ANTs (.mat or .txt) format to FreeSurfer-
compatible `.lta` format using FreeSurfer's `lta_convert` tool. This is especially useful when
combining ANTs and FreeSurfer pipelines for alignment or resampling tasks.

Inputs:
  - ANTs transform file (.mat or .txt)
  - Source image used to generate the transform
  - Target image used to generate the transform

Outputs:
  - FreeSurfer-compatible .lta file (Linear Transform Array)

Usage:
  call_ants2lta <input_file> <output_file> <source_file> <target_file>

Positional arguments:
  <input_file>    ANTs transform file (.mat or .txt). If a .mat is given, it will be internally 
                  converted to a readable .txt before converting to .lta
  <output_file>   Path to the output .lta file
  <source_file>   Source image (e.g., native T1w or anatomical image)
  <target_file>   Target image (e.g., FreeSurfer reference)

Examples:
  call_ants2lta /path/to/genaff.mat /path/to/genaff.lta T1w.nii.gz fsaverage.nii.gz
  call_ants2lta /path/to/affine.txt /path/to/output.lta source.nii.gz target.nii.gz

Notes:
  - You must have ANTs and FreeSurfer loaded in your environment.
  - For .mat inputs, ConvertTransformFile is used to convert to .txt before LTA conversion.
  - If the script fails, check that all required input files exist and are readable.

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

in_file="${1}"
out_file="${2}"
src="${3}"
trg="${4}"

#-----------------------------------------------------------------------------
# check if input exists
if [[ ! -f "${in_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input file ${BOLD_GREEN}${in_file}${RESET}"
  exit 1
else
  in_file=$(readlink -f "${in_file}")
fi

# src file
if [[ ! -f "${src}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find SOURCE file ${BOLD_GREEN}${trg}${RESET}"
  exit 1
else
  src=$(readlink -f "${src}")
fi

# trg file
if [[ ! -f "${trg}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find TARGET file ${BOLD_GREEN}${trg}${RESET}"
  exit 1
else
  trg=$(readlink -f "${trg}")
fi

# output
if [[ -z "${out_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# convert if needed
if [[ ${in_file} == *".mat"* ]]; then
  in_file="${in_file/.mat/.txt}"
  cmd=(
    ConvertTransformFile
    3
    ${in_file}
    ${in_file}
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" ConvertTransformFile
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# define command
cmd=(
  "lta_convert"
  --initk "${in_file}"
  --outlta "${out_file}"
  --src "${src}"
  --trg "${trg}"
)

# print and run
print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "${cmd[0]}"
  exit 1
fi
