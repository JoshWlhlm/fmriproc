#!/usr/bin/env python

try:
    from nighres.laminar import profile_sampling
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import os
import sys
import getopt
from lazyfmri import utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utils
opj = os.path.join
rb = f"{utils.color.RED}{utils.color.BOLD}"
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["layerimg", "samplefrom"])
def main(argv, context):

    r"""
---------------------------------------------------------------------------------------------------
call_nighresprofsamp

The Profile Sampling module of CBS Tools was used to transform the 2-dimensional level-sets to 3D
representations of any input data

Mandatory (required input):
  -l|--layerimg   4D image containing levelset representations of different intracortical 
                  surfaces on which data should be sampled (the 4D output from call_nighres-
                  layering; "-layering_boundaries")
  -s|--samplefrom Image from which data should be sampled

Optional (flags with defaults):
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'profiling'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")

Options (extra):
  -h|--help       print this help text

Outputs:
  result (niimg): 4D profile image , where the 4th dimension represents the profile for each voxel

Example:
  call_nighresprofsamp \
    -l sub-001_ses-1_acq-MP2RAGE_desc-layering_boundaries.nii.gz \
    -s sub-001_ses-1_acq-MP2RAGE_T1map.nii.gz \
    -d derivatives/nighres/sub-001/profiling \
    -n sub-001_ses-1_acq-MP2RAGE_desc-profile_T1map

Notes:
  docs: https://nighres.readthedocs.io/en/latest/laminar/profile_sampling.html

---------------------------------------------------------------------------------------------------
    """

    layers_lvls = context.get("layerimg")
    sample_from = context.get("samplefrom")
    output_dir = context.get("output_dir", opj(os.getcwd(), 'profiling'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")

    #-----------------------------------------------------------------------------
    # Run profile sampling
    profile_sampling(
        layers_lvls,
        sample_from,
        save_data=True,
        overwrite=True,
        output_dir=output_dir,
        file_name=output_base
    )

    #-----------------------------------------------------------------------------
    # Rename output to a BIDS-friendly name
    fn_old = opj(output_dir, output_base + "_lps-data.nii.gz")
    fn_new = opj(output_dir, output_base + ".nii.gz")

    if os.path.exists(fn_old):
        print(f"Renaming: {os.path.basename(fn_old)} â†’ {gb}{os.path.basename(fn_new)}{end}")
        os.rename(fn_old, fn_new)

    print("Done")

if __name__ == "__main__":
    layers_lvls = None
    sample_from = None
    output_dir = opj(os.getcwd(), 'profiling')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hl:s:o:n:",
            ["help", "layerimg=", "samplefrom=", "outputdir=", "name="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-l", "--layerimg"):
            layers_lvls = arg
        elif opt in ("-s", "--samplefrom"):
            sample_from = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg

    main(context={
        "layerimg": layers_lvls,
        "samplefrom": sample_from,
        "output_dir": output_dir,
        "output_base": output_base
    })
