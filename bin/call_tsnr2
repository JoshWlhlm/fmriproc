#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# simple command wrapper
run_cmd() {
  print_cmd "$@" && eval "$@"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename "$0")" "${1}"
    exit 1
  fi
}

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_tsnr2

Calculate the temporal signal-to-noise ratio (tSNR) from a 4D NIfTI image and optionally 
save the resulting tSNR map to file using FSL.

The tSNR is computed voxel-wise as the mean signal divided by the standard deviation 
across time (i.e., over the 4th dimension). A high tSNR generally reflects higher-quality 
BOLD signals. The resulting map is clipped at a maximum value of 100 by default to avoid 
extreme outliers.

Mandatory (positional) arguments:
  <input file>    Path to the 4D NIfTI file for which to compute the tSNR map.
  
Optional (positional) arguments:
  <output file>   Optional full path where the resulting tSNR map will be saved.
                  If omitted, only the mean tSNR value will be printed to the console.

Options:
  -h|--help       print this help text
  -k|--keep       keep intermediate files

Behavior:
  - Automatically clips tSNR values at 100.
  - If output file is not specified, no image is saved but the mean tSNR is still printed.
  - Prints the mean tSNR value to console.

Example usage:
  call_tsnr2 func.nii.gz tsnr_map.nii.gz
  call_tsnr2 func_bold.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

clean_up=1
while getopts :-:hi:o: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        keep)
          clean_up=0
          ;;
        help)
          Usage && exit 0
          ;; 
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    k)  clean_up=0
          ;;
    h)  Usage && exit 0
          ;;    
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi      

#-----------------------------------------------------------------------------
# read input
if [[ ! -f "${@:$OPTIND:1}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "input" "File does not exist"
  exit 1
else
  input="$(readlink -f "${@:$OPTIND:1}")"
fi

# output
output=${@:$OPTIND+1:1}

# define output
if [[ -z "${output}" ]]; then
  output="${input/.nii.gz/_tsnr.nii.gz}"
fi

#-----------------------------------------------------------------------------
# calculate mean and std deviation
mean_img="${input/.nii.gz/_mean.nii.gz}"
std_img="${input/.nii.gz/_std.nii.gz}"

cmd_a=(
  fslmaths
  "${input}"
  -Tmean
  "${mean_img}"
)

cmd_b=(
  fslmaths
  "${input}"
  -Tstd
  "${std_img}"
)

cmd_c=(
  fslmaths
  "${mean_img}"
  -div
  "${std_img}"
  -thr 0
  "${output}"
)

# run bunch of commands
run_cmd "${cmd_a[@]}"
run_cmd "${cmd_b[@]}"
run_cmd "${cmd_c[@]}"

#-----------------------------------------------------------------------------
# winsorizing tSNR
cmd=(
  call_winsorize
  "${output}"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  print_error_msg "$(basename ${0})" "${cmd[0]}"
  exit 1
fi  

#-----------------------------------------------------------------------------
# clean up
if [ "${clean_up}" -eq 1 ]; then
  rm "${mean_img}" "${std_img}" 2>/dev/null
fi
