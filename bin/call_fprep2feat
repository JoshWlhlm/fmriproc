#!/usr/bin/env python

import pandas as pd
from lazyfmri import utils
import os
import sys

opj = os.path.join

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_fprep2feat

Convert the confound regressor files from fMRIprep into FEAT-compatible text files. By default, only 
motion parameters are included. You can also include anatomical CompCor regressors, or use the full 
set (excluding 'global signal').

Usage:
  call_fprep2feat <fprep_directory> <type>

Arguments:
  <fprep_directory>    Path to the subject/session-level output directory from fMRIprep.
  <type>               Type of confounds to extract: motion [default], acomp, motion+acomp, or full

Example:
  call_fprep2feat derivatives/fmriprep/sub-01/ses-1/func motion

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 2:
        print(main.__doc__)
        sys.exit(0)

    fprep_dir   = argv[0]
    which_conf  = argv[1]

    confounds = utils.get_file_from_substring("confounds_timeseries.tsv", fprep_dir)
    if isinstance(confounds, str):
        confounds = [confounds]
    
    # define settings
    options = {
        "motion": {
            "filter": lambda col: 'trans' in col or 'rot' in col,
            "label": "motion"
        },
        "acomp": {
            "filter": lambda col: 'white_matter' in col or 'csf' in col,
            "label": "acomp"
        },
        "motion+acomp": {
            "filter": lambda col: any(k in col for k in ['trans', 'rot', 'white_matter', 'csf']),
            "label": "motion+acomp"
        },
        "full": {
            "filter": lambda col: "global_signal" not in col,
            "label": "full"
        }
    }

    if which_conf not in options:
        raise ValueError(
            f"Unknown selection for '{which_conf}'. "
            f"Must be one of {list(options.keys())}"
        )

    for conf in confounds:
        confounds_file = pd.read_csv(conf, sep='\t')

        # Select desired confounds
        selected_cols = [
            col for col in confounds_file.columns if options[which_conf]["filter"](col)
        ]

        # Drop all-zero columns
        conf_df = confounds_file[selected_cols]
        conf_df = conf_df.loc[:, (conf_df != 0).any(axis=0)]

        output = utils.replace_string(
            conf,
            "timeseries.tsv",
            f"{options[which_conf]['label']}.tsv"
        )

        conf_df.to_csv(output, sep='\t', index=False)
        print(f"Wrote: {output}")

if __name__ == "__main__":
    main(sys.argv[1:])
