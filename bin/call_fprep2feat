#!/usr/bin/env python

import os
import sys
import pandas as pd
from lazyfmri import utils

opj = os.path.join

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_fprep2feat

Convert the confound regressor files from fMRIPrep into FEAT-compatible text files.

This script takes the `desc-confounds_timeseries.tsv` output from fMRIPrep and extracts a subset 
of the confound regressors based on the desired input type. The resulting files are saved in 
tab-separated format and can be directly used in FSL's FEAT first-level analyses (e.g., via the 
'custom confounds' feature).

You can choose from a minimal motion-only model, anatomical CompCor components, a combination 
of both, or the full set (excluding global signal, which is often discarded in recent analyses).

Usage:
  call_fprep2feat <fprep_directory> <type>

Positional arguments:
  <fprep_dir>     Path to the subject/session-level output directory from fMRIPrep.
                  Should contain one or more `*_desc-confounds_timeseries.tsv` files.
  <type>          Type of confounds to extract. Must be one of the following:
                    - motion         > includes translation & rotation parameters only
                    - acomp          > includes anatomical CompCor components (CSF, WM)
                    - motion+acomp   > includes both motion and CompCor
                    - full           > includes all regressors except global signal

Outputs:
  A set of .tsv files, one per BOLD run, with the requested subset of regressors.
  Output files are named according to the original file, replacing 'timeseries.tsv' with the 
  selected type (e.g., 'motion.tsv', 'acomp.tsv', etc.).

Examples:
  call_fprep2feat derivatives/fmriprep/sub-01/ses-1/func motion
  call_fprep2feat derivatives/fmriprep/sub-05/func motion+acomp
  call_fprep2feat derivatives/fmriprep/sub-02/ses-1/func full

Notes:
  - This script assumes fMRIPrep v20.2 or later with standard BIDS-compatible outputs.
  - Global signal is excluded from the "full" option.
  - Columns with only zeros are automatically dropped from the output.

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 2:
        print(main.__doc__)
        sys.exit(0)

    fprep_dir   = argv[0]
    which_conf  = argv[1]

    confounds = utils.get_file_from_substring("confounds_timeseries.tsv", fprep_dir)
    if isinstance(confounds, str):
        confounds = [confounds]
    
    # define settings
    options = {
        "motion": {
            "filter": lambda col: 'trans' in col or 'rot' in col,
            "label": "motion"
        },
        "acomp": {
            "filter": lambda col: 'white_matter' in col or 'csf' in col,
            "label": "acomp"
        },
        "motion+acomp": {
            "filter": lambda col: any(k in col for k in ['trans', 'rot', 'white_matter', 'csf']),
            "label": "motion+acomp"
        },
        "full": {
            "filter": lambda col: "global_signal" not in col,
            "label": "full"
        }
    }

    if which_conf not in options:
        raise ValueError(
            f"Unknown selection for '{which_conf}'. "
            f"Must be one of {list(options.keys())}"
        )

    for conf in confounds:
        confounds_file = pd.read_csv(conf, sep='\t')

        # Select desired confounds
        selected_cols = [
            col for col in confounds_file.columns if options[which_conf]["filter"](col)
        ]

        # Drop all-zero columns
        conf_df = confounds_file[selected_cols]
        conf_df = conf_df.loc[:, (conf_df != 0).any(axis=0)]

        output = utils.replace_string(
            conf,
            "timeseries.tsv",
            f"{options[which_conf]['label']}.tsv"
        )

        conf_df.to_csv(output, sep='\t', index=False)
        print(f"Wrote: {output}")

if __name__ == "__main__":
    main(sys.argv[1:])
