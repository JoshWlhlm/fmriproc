#!/usr/bin/env python

import os
import sys
import ast
import getopt
import numpy as np
from lazyfmri import utils
from fmriproc.transform import fs2vert

opj = os.path.join

@utils.validate_cli_inputs(required_keys=["subject", "coord", "hemi", "output"], allow_input_dir=False)
def main(argv, context):
    """
---------------------------------------------------------------------------------------------------
call_vox2vert

Convert a voxel coordinate (in FreeSurfer's `orig.mgz` space) to the corresponding surface vertex 
using `fsaverage`-style surface mappings and tools inside `fmriproc.transform.fs2vert`. The output 
vertex can be printed or stored in a `.npy` file for later use, e.g., with Pycortex for 
visualization.

This utility is helpful when a location in volumetric space (like an ROI center or peak 
activation) needs to be projected to the cortical surface for visualization or analysis.

Mandatory arguments:
  -s | --subj     Subject name (e.g., "sub-001") as present in FreeSurfer's SUBJECTS_DIR
  -c | --coord    Voxel coordinate (C-R-S) in orig.mgz space. Must be formatted like: [x,y,z]
                  Use Python-style list with square brackets, comma-separated (no spaces).
  -h | --hemi     Hemisphere to search in. Valid values: "lh" (left hemisphere), "rh" (right).
  -o | --output   Output path to save the full vertex mask as `.npy`. If not specified, result 
                  is printed only.

Options (extra):
  -h|--help       print this help text

Returns:
  - Vertex number corresponding to the voxel coordinate
  - Optionally, an `.npy` file with a full binary vertex mask (`vert_obj['whole_roi']`) saved
    to disk

Behavior:
  - Parses the input voxel coordinate
  - Projects it to surface space using FreeSurfer geometry
  - Retrieves the closest matching vertex number
  - If requested, exports a `.npy` file containing a binary mask of the vertex's cortical region

Example:
  call_vox2vert -s sub-001 -c [187,177,40] -h lh -o vert.npy
  call_vox2vert --subj sub-101 --coord [156,181,49] --hemi rh

Note:
  Coordinate must be in `orig.mgz` voxel space. You can use `call_ras2vox` or similar to convert
  scanner RAS coordinates if needed.

---------------------------------------------------------------------------------------------------
    """

    if len(argv)<1:
        print(main.__doc__)
        sys.exit()

    subject = context["subject"]
    coord = context["coord"]
    hemi = context["hemi"]
    output = context["output"]

    try:
      coord = np.array(ast.literal_eval(coord))
    except:
      raise ValueError(f"You used '-c {coord}'. Make sure to use '-c [x,y,z]' (comma-separated)")
    
    pp = fs2vert(
       subject,
       coord=coord,
       hemi=hemi
    )

    vert = pp['vert_nr']
    obj = pp['vert_obj']['whole_roi']

    if output:
      np.save(output, obj)

    if len(vert) == 1:
      print(vert[0])
    else:
      print(vert)

if __name__ == "__main__":

    subject   = None
    coord     = None
    hemi      = "lh"
    output    = None
    
    try:
        opts = getopt.getopt(
           sys.argv[1:],
           "hs:c:h:o:",
           ["help=", "subj=", "coord=", "hemi=", "output="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--subj"):
            subject = arg
        elif opt in ("-c", "--coord"):
            coord = arg
        elif opt in ("-h", "--hemi"):
            hemi = arg
        elif opt in ("-o", "--output"):
            output = arg

    main(sys.argv[1:], context={
        "subject": subject,
        "coord": coord,
        "hemi": hemi,
        "output": output
    })
