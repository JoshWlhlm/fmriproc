#!/usr/bin/env python

import os
import sys
import getopt
from fmriproc.transform import fs2vert
from lazyfmri import utils
import numpy as np
import ast

opj = os.path.join

@utils.validate_cli_inputs(required_keys=["subject", "coord", "hemi", "output"], allow_input_dir=False)
def main(argv, context):

    """
---------------------------------------------------------------------------------------------------
call_vox2vert

This function returns a vertex given a voxel coordinate in orig.mgz space using functions inside the 
'optimal.py'-class. It will return the vertex number associated with a given coordinate and you can
save the vertex-map as an .npz array that you can use to view it in Pycortex.

Args:
    -s|--subj   subject name (e.g., sub-xxx)
    -c|--coord  voxel coordinate (CRS) in orig.mgz space; should be formatted like [x,y,z]
    -h|--hemi   hemisphere to use
    -o|--output output npz-file containing vertex object        

Example:
    call_vox2vert -s sub-001 -c [187,177,40] -h lh -o vert.npy

---------------------------------------------------------------------------------------------------
    """

    if len(argv) == 1:
        print(main.__doc__)
        sys.exit(1)

    subject = context["subject"]
    coord = context["coord"]
    hemi = context["hemi"]
    output = context["output"]

    try:
      coord = np.array(ast.literal_eval(coord))
    except:
      raise ValueError(f"You used '-c {coord}'. Make sure to use '-c [x,y,z]' (comma-separated)")
    
    pp = fs2vert(
       subject,
       coord=coord,
       hemi=hemi
    )

    vert = pp['vert_nr']
    obj = pp['vert_obj']['whole_roi']

    if output:
      np.save(output, obj)

    if len(vert) == 1:
      print(vert[0])
    else:
      print(vert)

if __name__ == "__main__":

    subject   = None
    coord     = None
    hemi      = "lh"
    output    = None
    
    try:
        opts = getopt.getopt(
           sys.argv[1:],
           "hs:c:h:o:",
           ["help=", "subj=", "coord=", "hemi=", "output="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--subj"):
            subject = arg
        elif opt in ("-c", "--coord"):
            coord = arg
        elif opt in ("-h", "--hemi"):
            hemi = arg
        elif opt in ("-o", "--output"):
            output = arg

    main(sys.argv[1:], context={
        "subject": subject,
        "coord": coord,
        "hemi": hemi,
        "output": output
    })
