#!/usr/bin/env python

import os
import sys
import getopt
import shutil
import numpy as np
import nibabel as nb
from nilearn import image
from lazyfmri import utils
opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

def resample_and_convert_to_mgh(
    src,
    trg,
    **kwargs
    ):

    kwargs = utils.update_kwargs(
        kwargs,
        "interpolation",
        "nearest"
    )

    # resample to FreeSurfer
    res  = image.resample_to_img(
        src,
        trg, 
        **kwargs
    )
    
    # read into MGH
    res_mgh = nb.freesurfer.MGHImage(
        res.get_fdata().astype(np.float32),
        affine=res.affine
    )

    return res_mgh

@utils.validate_cli_inputs(required_keys=["subject"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_gdhinject

Patch up the FreeSurfer brainmask with manual segmentation edits based on FreeSurfer recon-
struction and MGDM segmentaion (or the output from call_gdhcombine). For this scipt, we will
need the path to the FreeSurfer directory and the path to the directory containing the man-
ual masks (incl. sagittal sinus mask).

This step is equivalent to call_freesurfer 'pial edits', where the brainmask.mgz is edited. To make
FreeSurfer (and later fmriprep) use these edits, you need to run call_freesurfer -s <sub_ID> -r 23
-e pial first, check the new surfaces, and re-run fmriprep to incorporate changes into the segmen-
tations that are then being used to create levelsets for Nighres cortex reconstruction.

Usage:
  call_gdhinject [mandatory] [arguments] [options]

Mandatory (required input):
  -s|--sub        subject ID used for FreeSurfer

Optional (flags with defaults):    
  -n|--ses        sesssion ID
  -f|--fsdir      directory containing segmentations from FreeSurfer (defaults to SUBJECTS_DIR)
  -m|--masks      directory containing manual segmentation edits; defaults to DIR_DATA_DERIV/
                  manual_masks/<sub>/<ses>. Requires the usage of the '-s' (and optionally, 
                  the '-n' flag)
                    
Options (extra):
  -h|--help       print this help text
  -o|--outside    use only 'outside'-mask to generate new brainmask
  --final         directly set the manual WM segmentation as wm.mgz

Example:
  call_gdhinject -f /path/to/fs -m /path/to/man_masks
  call_gdhinject -f /path/to/fs -m /path/to/man_masks --outside

---------------------------------------------------------------------------------------------------
    """

    sub = context.get("sub")
    ses = context.get("ses")
    manseg = context.get("manseg")
    fsdir = context.get("fsdir", os.environ.get("SUBJECTS_DIR"))
    outside_only = context.get("outside_only", False)
    start_stage = context.get("start_stage", "wm")
    dont_edit = context.get("dont_edit", False)

    # read default masks directory
    if not isinstance(manseg, str):
        if not isinstance(sub, str):
            raise ValueError(f"Need subject ID for default directory; specify this using the '-s'/--subject' flag")
        if isinstance(ses, str):
            base_path = opj(sub, f"ses-{ses}")
        else:
            base_path = sub

        manseg = opj(os.environ.get("MASKS"), base_path)

    fsdir = opj(fsdir, sub)
    for i in [fsdir, manseg]:
        if not os.path.exists(i):
            print(f'could not find directory {i}')
            sys.exit(1)

    GOT_OUTSIDE = False
    GOT_WM = False
    GOT_GM = False
    manual_masks = {}
    for i in ["-outside", "manualseggm", "manualsegwm"]:

        print("Loading in masks..")
        manual_masks[i] = utils.get_file_from_substring(
            i,
            manseg,
            return_msg=None
        )

    if (
        not isinstance(manual_masks.get("manualseggm"), str)
        and not isinstance(manual_masks.get("manualsegwm"), str)
        and isinstance(manual_masks.get("-outside"), str)
    ):
        outside_only = True
    
    if isinstance(manual_masks.get("-outside"), str):
        GOT_OUTSIDE = True
        print(f" Outside: '{gb}{manual_masks.get('-outside')}{end}'")
    
    if isinstance(manual_masks.get("manualseggm"), str):
        GOT_GM = True
        print(f" GM edits: '{gb}{manual_masks.get('manualseggwm')}{end}'")

    if isinstance(manual_masks.get("manualsegwm"), str):
        GOT_WM = True
        print(f" WM edits: '{gb}{manual_masks.get('manualsegwm')}{end}'")

    freesurfer_brainmask_auto = opj(fsdir, 'mri', 'brainmask.auto.mgz')
    freesurfer_brainmask = opj(fsdir, 'mri', 'brainmask.mgz')
    freesurfer_t1w = opj(fsdir, 'mri', 'T1.mgz')

    fs_backup = opj(os.path.dirname(freesurfer_brainmask), "brainmask_backup.mgz")
    shutil.copyfile(freesurfer_brainmask,fs_backup)

    print("Resampling..")
    manual_masks_resampled = {}
    for key, val in manual_masks.items():
        if isinstance(val, str) and os.path.exists(val):
            manual_masks_resampled[key] = resample_and_convert_to_mgh(
                val,
                freesurfer_brainmask_auto
            )

    # dummy "outside" mask
    if not GOT_OUTSIDE:
        manual_outside_mask = nb.freesurfer.MGHImage(
            np.zeros_like(
                manual_masks_resampled.get("-outside").get_fdata(),
                dtype=np.float32
            ),
            affine=manual_masks_resampled.get("manualsegwm").affine,
            header=manual_masks_resampled.get("manualsegwm").header
        )
    else:
        manual_outside_mask = manual_masks_resampled.get("-outside")

    # create new FreeSurfer files
    if not outside_only:
        if GOT_WM:
            
            new_wm = opj(fsdir, 'mri', 'wm.mgz')
            if not dont_edit:
                print(f"Creating new '{gb}{new_wm}{end}'")

                # back up original wm file
                freesurfer_wm = opj(fsdir, 'mri', 'wm.mgz')
                wm_backup = opj(os.path.dirname(freesurfer_wm), "wm_backup.mgz")
                shutil.copyfile(freesurfer_wm, wm_backup)            

                # create new wm from manual edits and outside mask
                freesurfer_wm_new = image.math_img( 
                    '((freesurfer_wm * (1-manual_outside_mask) + manual_wm_mask)>0) * 255',
                    manual_wm_mask=manual_masks_resampled.get("manualsegwm"),
                    manual_outside_mask=manual_outside_mask,
                    freesurfer_wm=freesurfer_wm
                )

                # get largest component
                largest_component = image.largest_connected_component_img(freesurfer_wm_new)
                
                # multiply
                freesurfer_wm_new = image.math_img(
                    'freesurfer_wm * largest_component',
                    freesurfer_wm=freesurfer_wm_new,
                    largest_component=largest_component
                )
                
                # save
                freesurfer_wm_new.to_filename(new_wm)
            else:
                # reuse original
                print(f"Setting manualsegwm as '{new_wm}'")
                manual_masks_resampled.get("manualsegwm").to_filename(new_wm)

        else:
            print("No WM-edits were made; re-using old WM.mgz")

        # create new brain mask
        if GOT_GM and GOT_OUTSIDE:
            print("Creating new brainmask.mgz")
            try:
                new_brainmask = image.math_img(
                    '(((brain_mask > 0) + inside - outside ) > 0) * t1w',
                    brain_mask=freesurfer_brainmask_auto,
                    outside=manual_outside_mask,
                    t1w=freesurfer_t1w,
                    inside=manual_masks_resampled.get("manualseggm")
                )

                new_brainmask.to_filename(freesurfer_brainmask)
                new_brainmask.to_filename(opj(fsdir, 'mri', 'brain.finalsurfs.manedit.mgz'))

            except Exception as e:
                print(f"Cannot perform this operation. Process exited with following erorr: {e}")
                sys.exit(1)
    else:
        print("Creating new brainmask.mgz with outside-mask only")
        new_brainmask = image.math_img(
            '(((brain_mask > 0) - outside ) > 0) * t1w',
            brain_mask=freesurfer_brainmask_auto,
            outside=manual_outside_mask,
            t1w=freesurfer_t1w
        )

        new_brainmask.to_filename(freesurfer_brainmask)
        new_brainmask.to_filename(opj(fsdir, 'mri', 'brain.finalsurfs.manedit.mgz'))

    print("Done, now run the following command (append other options like '--sge' if you like):")

    cmd = f"master -m 14/call_freesurfer -s {sub} -r 23 -e {start_stage}"
    print(cmd)

if __name__ == "__main__":

    sub = None
    ses = None
    manseg  = None
    fsdir   = os.environ.get("SUBJECTS_DIR")
    outside_only = False
    start_stage = "wm"
    dont_edit = False

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "oh:f:m:s:n:",
            ["help", "sub=", "ses", "fsdir=", "masks=", "outside", "final"]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            sub = arg            
        elif opt in ("-n", "--ses"):
            ses = arg                
        elif opt in ("-f", "--fsdir"):
            fsdir = arg
        elif opt in ("-m", "--masks"):
            manseg = arg
        elif opt in ("-o", "--outside"):
            outside_only = True
            start_stage = "pial"  
        elif opt in ("--final"):
            dont_edit = True
            start_stage = "wm"

    main(context={
        "sub": sub,
        "ses": ses,
        "manseg": manseg,
        "fsdir": fsdir,
        "outside_only": outside_only,
        "start_stage": start_stage,
        "dont_edit": dont_edit
    })
