#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_calculatemean

Calculates the mean image across multiple input images. This is useful when you want to average
multiple acquisitions (e.g., repeated scans) into a single representative image. Internally,
the script uses FSL's fslmerge to concatenate the images into a 4D volume, and then fslmaths
with the -Tmean flag to compute the temporal mean across that volume.

IMPORTANT: 
  - The output file must be the last argument.
  - A temporary file will be created during the process and automatically removed after completion.
  - If the output file already exists, the script will skip processing unless removed manually.

Usage:
  call_calculatemean <image_1> <image_2> <image_3> <output>
  
Inputs:
  <i_1> ... <i_n> NIfTI files to average
  <output>        Output filename (must be last argument)

Example:
  call_calculatemean run-1_T1w.nii.gz run-2_T1w.nii.gz avg_T1w.nii.gz

This will merge the input files into a temporary 4D volume and compute the mean over time,
saving the result in 'avg_T1w.nii.gz'.

---------------------------------------------------------------------------------------------------

USAGE
}

#-----------------------------------------------------------------------------
# Argument check
if [[ $# -lt 3 ]] ; then
  echo "Need at least 2 input images and an output name"
  echo
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Define input/output
output=${@: -1}
inputs=${@:1:$#-1}

# Function for merge command
COMMAND() {
  fslmerge -a $(dirname "$1")/tmp_$(basename "$1") "${@:2}"
}

# Only proceed if output doesn't exist
if [[ ! -f ${output} ]]; then

  # If temporary file doesn't exist, run merge
  if [[ ! -f $(dirname "${output}")/tmp_$(basename "${output}") ]]; then

    echo "Merging the following files:"
    for i in ${inputs[@]}; do echo "  $(basename "$i")"; done

    COMMAND "${output}" "${inputs[@]}"

    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename "$0")" "fslmerge"
      exit 1
    fi
  fi

  echo "Calculating mean"
  cmd=(
    fslmaths
    "$(dirname "${output}")/tmp_$(basename "${output}")"
    -Tmean
    "${output}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename "$0")" "fslmaths"
    exit 1
  fi

  rm "$(dirname "${output}")/tmp_$(basename "${output}")" 2>/dev/null
fi
