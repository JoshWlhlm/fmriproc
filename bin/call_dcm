#!/usr/bin/env python

import os
import sys
import pydicom
from lazyfmri import utils
from alive_progress import alive_bar

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_dcm

Overwrite a DICOM metadata key with a new value (or multiple keys/values) in-place. This is useful
for anonymizing data, adding BIDS-compatible labels, or adjusting fields like 'PatientID' or 
'ProtocolName' prior to conversion or sharing.

Usage:
    call_dcm <dcm_file_or_dir> <key> <message>

Arguments:
  <file/dir>      Path to a single DICOM file or a directory containing .dcm files
  <key>           Key(s) to overwrite in the DICOM header. For multiple keys, pass as a comma-
                  separated string in quotes (e.g., "PatientID,ProtocolName")
  <message>       Value(s) to assign to the specified key(s). Must match order and count of
                  <key>. Pass as a comma-separated string in quotes if using multiple keys.

Examples:
  call_dcm sub-001_epi.dcm ProtocolName task-rest_bold
  call_dcm sub-001_epi.dcm "PatientID,ProtocolName" "sub-01_ses-1,task-rest_bold"
  call_dcm sourcedata/sub-001/ "PatientID,StudyDate" "anonymous,20240415"

Notes:
  - Numeric values (int or float) will be automatically inferred and converted when possible.
  - This script modifies the DICOM files in-place. Use with care and make backups if needed.
  - DICOM keys are case-sensitive and must exist in the file to be updated.

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 3:
        print(main.__doc__)
        sys.exit(1)

    dcm_file    = argv[0]
    add_key     = argv[1]
    add_msg     = argv[2]

    if dcm_file.endswith("dcm"):
        dcm_files = [dcm_file]
    else:
        dcm_files = utils.FindFiles(dcm_file, "dcm").files

    if "," in add_key:
        add_key = utils.string2list(add_key)
    else:
        add_key = [add_key]

    if "," in add_msg:
        add_msg = utils.string2list(add_msg)
    else:
        add_msg = [add_msg]

    # progress bar
    with alive_bar(len(dcm_files)) as bar:

        # loop through directory
        for dcm_file in dcm_files:

            # check if file exists
            if os.path.exists(dcm_file):

                # open json
                ds = pydicom.dcmread(dcm_file)

                # create dictionary of new key
                for ix, key in enumerate(add_key):
                    
                    if hasattr(ds, key):
                        
                        msg = add_msg[ix]
                        # check if message is a number
                        if msg.isdigit():
                            msg = int(msg)
                        elif msg.replace('.','',1).isdigit() and msg.count('.') < 2:
                            msg = float(msg)

                        # print(f"Setting {key} to {msg}")
                        setattr(ds, key, msg)
                    
                ds.save_as(dcm_file)

            bar()
            
if __name__ == "__main__":
    main(sys.argv[1:])

