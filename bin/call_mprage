#!/bin/bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_mprage

Workflow for the preprocessing of MPRAGE data so that it is compatible with the fMRIproc-pipeline.
Steps include:

  - Brain masking using 'call_spmmask', which will create *desc-spm_mask.nii.gz
  - Bias correction (either SPM [--spm] or ANTs [default]) > default is to use the newly created
    brain mask too; seems to work well.
  - Denoising using 'call_spmsanlm' (turn off with '--no-sanlm')

Usage:
  call_mprage [arguments] [options] <input image> <output image>

Arguments:
  -s <SPM_PATH>   path to SPM; should contain CAT12 in toolbox directory
  -b <b1map>      correct MPRAGE image with B1map
  -l <lower>      lower percentile (default = 0.01) for call_winsorize
  -u <upper>      upper percentile (default = 0.99) for call_winsorize
  -y <kwargs>     Additional commands to be passed to 'call_b1correct'. Format should be colon-
                  separated flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-y <flag1>=<value>:<flag2>:<flag3>:<flag4>=<value>"

                  e.g.,
                    "-y --smooth:--sigma=1.5"

  -x <kwargs>     Additional commands to be passed to 'call_antsbias'. Format should be colon-
                  separated flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>:<flag2>:<flag3>:<flag4>=<value>"

                  e.g.,
                    "-x -t=[0.25,0.005,250]:-x=some_mask.nii.gz"

Options:
  -h|--help       print this help text
  --spm           use SPM for bias correction (default is ANTs)
  --no-bias       skip bias correction (e.g., is B1-correction is enough)
  --no-sanlm      do not apply SANLM filtering
  --no-winsor     do not apply winsoring of image intensities; would recommend this though..
  --no-reg        With MP2RAGE, we get a T1map in the same space. This file can be used for
                  packages such as Nighres. This allows you to generate layerification in 
                  voxel space. For MPRAGE, we don't have this. Instead, we can have a sepa-
                  rate T1map. By default, we'll register that file to the MPRAGE T1w. If
                  this flag is specified, we'll assume they are in the same space. Note that
                  the output will have the same filenaming as the T1w, although that is not
                  entirely fair. For instance, the output could be:
                  "sub-<subID>_ses-<sesID>_acq-MPRAGE_T1map"; the T1map is not derived from
                  the MPRAGE file, so the "acq-*" tag is a bit misleading. However, this is
                  necessary to be compatible with subsequent steps of the pipeline.

Positional arguments
  <input image>   input image
  <output image>  output base. Base name (including directory) for the output. 
                  "*_T1w.nii.gz" and "*_desc-spm_mask" will be appended.
                  E.g., "DIR_DATA_DERIV/pymp2rage/sub-01/ses-1/sub-01_ses-1_acq-MPRAGE"

Examples:
 call_mprage sub-01_acq-MPRAGE_T1w.nii.gz sub-01_acq-MPRAGE             # standard
 call_mprage --spm sub-01_acq-MPRAGE_T1w.nii.gz sub-01_acq-MPRAGE       # run with SPM
 call_mprage --no-sanlm sub-01_acq-MPRAGE_T1w.nii.gz sub-01_acq-MPRAGE  # skip SANLM

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

OW=0
RUN_WITH_ANTS=1
RUN_SANLM=1
RUN_BIAS=1
REG_T1=1
WINSORIZE_INTENSITIES=1
lower=0.01
upper=0.99
b1_file=""
# Check for subject & session flags
while getopts hd:s:x:u:l:b:-: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        spm)
          RUN_WITH_ANTS=0
          ;; 
        no-sanlm)
          RUN_SANLM=0
          ;;
        no-bias)
          RUN_BIAS=0
          ;;          
        no-reg)
          REG_T1=0
          ;;
        no-winsor)
          WINSORIZE_INTENSITIES=0
          ;;
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    l)  lower="${OPTARG}"
          ;;
    u)  upper="${OPTARG}"
          ;; 
    s)  SPM="${OPTARG}"
          ;;
    x)  kwargs="${OPTARG}"
          ;;
    y)  b1_kwargs="${OPTARG}"
          ;;          
    b)  b1_file="${OPTARG}"
          ;;          
    h)  Usage && exit 0
          ;; 
  esac
done

#-----------------------------------------------------------------------------
# read args
in_file="${@:$OPTIND:1}"
out_file="${@:$OPTIND+1:1}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${in_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${in_file}${RESET}\""
  exit 1
else
  in_file="$(readlink -f "${in_file}")"
fi

if [[ -z "${out_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output directory+basename [_T1w.nii.gz will be appended]"
  exit 1
fi

#-----------------------------------------------------------------------------
# parse kwargs
if [[ ! -z "${kwargs}" ]]; then
  kwargs=$(echo "${kwargs}" | tr '=' ' ' | tr ':' ' ')
fi

if [[ ! -z "${b1_kwargs}" ]]; then
  b1_kwargs=$(echo "${b1_kwargs}" | tr '=' ' ' | tr ':' ' ')
fi

#-----------------------------------------------------------------------------
# if file specified is in current directory, add entire path
final_file="${out_file}_T1w.nii.gz"
if [[ ! -d "$(dirname ${final_file})" ]]; then
  mkdir -p "$(dirname ${final_file})"
fi

#-----------------------------------------------------------------------------
# check if we should to B1-correction
if [[ -f "${b1_file}" ]]; then
  echo -e " Found B1map: ${BOLD_GREEN}${b1_file}${RESET}"
  cmd=(
    call_b1correct
    --mprage "${in_file}"
    --b1map "${b1_file}"
    --output "${final_file}"
    "${b1_kwargs[@]}"
  )

  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi  

  # set input for further processing to final_file
  in_file="${final_file}"
fi

#-----------------------------------------------------------------------------
# Generate brain mask
mask_file="${out_file}_desc-spm_mask.nii.gz"

# remove old versions
rm "${mask_file%.gz}"* 2>/dev/null

cmd=(
  call_spmmask
  "${in_file}"
  "${mask_file}"
)

echo " Generating brain mask with SPM.."
eval "${cmd[@]}"
if [[ $? -ne 0 || ! -f "${mask_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_spmmask" "Mask ${BOLD_GREEN}${mask_file}${RESET} not created"
  exit 1
fi  

#-----------------------------------------------------------------------------
# Run bias correction
if [[ ${RUN_BIAS} -eq 1 ]]; then
  bias_file="$(dirname ${out_file})/tmp_bias.nii.gz"
  if [[ ${RUN_WITH_ANTS} -eq 0 ]]; then
    software="SPM"
    cmd=(
      call_spmbias
      "${in_file}"
      "${bias_file}"
    )
  else
    software="ANTs"
    cmd=(
      call_antsbias
      "${in_file}"
      "${bias_file}"
      -x "${mask_file}"
      "${kwargs}"
    )
  fi
  echo " Bias correction with ${software}.."

  eval "${cmd[@]}"
  if [[ $? -ne 0 || ! -f "${bias_file}" ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi
else
  echo " Skipping bias correction.."
  cp "${in_file}" "${bias_file}" 2>/dev/null
fi

#-----------------------------------------------------------------------------
# SANLM
if [[ ${RUN_SANLM} -eq 1 ]]; then
  echo " Denoising with SANLM.."
  cmd=(
    call_spmsanlm
    "${bias_file}"
    "${final_file}"
  )

  eval "${cmd[@]}"
  if [[ $? -ne 0 || ! -f "${final_file}" ]]; then
    print_error_msg "$(basename ${0})" "call_spmsanlm"
    exit 1
  fi

  # clean up
  rm "${bias_file}" 2>/dev/null
else
  # simply copy bias-corrected file as final output
  echo " SANLM turned off: simply copy bias-corrected file as final output"
  mv "${bias_file}" "${final_file}"
fi

#-----------------------------------------------------------------------------
# truncate intensities and rescale
if [[ ${WINSORIZE_INTENSITIES} -eq 1 ]]; then
  echo -e " Winsorizing image intensities with [${BOLD_RED}${lower}${RESET},${BOLD_RED}${upper}${RESET}] and 256 bins"
  cmd=(
    call_winsorize
    -l "${lower}"
    -u "${upper}"
    "${final_file}"
  )

  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "call_winsorize"
    exit 1
  fi

  echo -e " Rescaling T1w to [${BOLD_RED}0${RESET},${BOLD_RED}4095${RESET}]"
  cmd=(
    call_rescale
    "${final_file}"
    0
    4095
  )

  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -  
    print_error_msg "$(basename ${0})" "call_rescale"
    exit 1
  fi
else
  echo " Winsorizing turned off.. will not touch image intensities"
fi

#-----------------------------------------------------------------------------
# set dtype to uint16
echo "Set dtype to UINT16"
cmd="call_setdtype ${final_file}"

eval "${cmd}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -  
  print_error_msg "$(basename ${0})" "call_setdtype"
  exit 1
fi

#-----------------------------------------------------------------------------
# check for separate T1map, probably needs to be registered; give same output name for consistency sake
t1map=$(
  find "$(dirname ${in_file})" \
  -maxdepth 1 \
  -type f \
  -name "*T1map.nii.gz" \
  2>/dev/null
)
if [[ ! -z "${t1map}" ]]; then
  
  t1_reg="${out_file}_T1map.nii.gz"
  if [[ ${REG_T1} -eq 1 ]]; then
    genaff="${out_file}_from-T1map_to-T1w_genaff.mat"
    if [[ ! -f "${genaff}" ]]; then
      cmd=(
        call_antsregistration
        --rigid
        "${final_file}"
        "${t1map}"
        "${out_file}_from-T1map_to-T1w_"
      )

      echo " Registering $(basename ${t1map}) to $(basename ${final_file}).."
      eval "${cmd[@]}"
    else  
      echo " Using matrix: \"${genaff}\".."
    fi

    # applying warp
    echo " Applying warp.."
    cmd=(
      call_antsapplytransforms
      "${final_file}"
      "${t1map}"
      "${t1_reg}"
      "${genaff}"
    )
    eval "${cmd[@]}"
    
    if [[ $? -ne 0 || ! -f "${t1_reg}" ]]; then
      print_error_msg "$(basename ${0})" "call_antsapplytransforms"
      exit 1
    fi

  else
    echo " Not registering T1map, simply copy existing file to output folder"
    cp "${t1map}" "${t1_reg}" 2>/dev/null
  fi

  #-----------------------------------------------------------------------------
  # truncate intensities and rescale
  if [[ ${WINSORIZE_INTENSITIES} -eq 1 ]]; then
    echo -e " Winsorizing image intensities with [${BOLD_RED}${lower}${RESET},${BOLD_RED}${upper}${RESET}] and 256 bins"
    cmd=(
      call_winsorize
      -l "${lower}"
      -u "${upper}"
      "${t1_reg}"
    )
    eval "${cmd[@]}"

    if [[ $? -ne 0 ]]; then
      print_error_msg "$(basename ${0})" "call_winsorize"
      exit 1
    fi

    echo -e " Rescaling T1w to [${BOLD_RED}0${RESET},${BOLD_RED}5050${RESET}]"
    cmd=(
      call_rescale
      "${t1_reg}"
      0
      5050
    )
    eval "${cmd[@]}"
    
    if [[ $? -ne 0 ]]; then
      echo
      print_line -  
      print_error_msg "$(basename ${0})" "call_rescale"
      exit 1
    fi
  else
    echo " Winsorizing turned off.. will not touch image intensities"
  fi

  #-----------------------------------------------------------------------------
  # set dtype to uint16
  echo -e "Set dtype to ${BOLD_RED}UINT16${RESET}"
  cmd="call_setdtype ${t1_reg}"
  eval "${cmd}"
fi

echo " Done"
