#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antspartialpov

This script performs rigid/affine registration of a partial field-of-view (FOV) image to a whole-
brain reference image using ANTs tools. The steps involve:
  1) Creating a binary mask of the partial FOV image
  2) Performing registration with the mask using call_antsregistration
  3) Applying the resulting transform to the moving image
  4) Casting the final output to a specific datatype (optional)

It is useful when aligning high-resolution partial scans (e.g., functional or slab acquisitions)
to anatomical reference images for subsequent processing steps.

Usage:
  call_antspartialpov [arguments] [options] <reference> <partial> <output>

Arguments:
  -i <file>       Initial transformation file (e.g., affine matrix from prior alignment)
  -c <contrast>   Specify contrast type (e.g., t1, t2); passed to registration call

Options:
  -h|--help       print this help text
  -u|--int        convert <output> to INT16
  -f|--single     convert <output> to FLOAT32 [default]
  -d|--double     convert <output> to FLOAT64

Positional:
  <reference>     Reference image (typically a whole-brain structural scan, e.g., T1w)
  <partial>       Moving image with a smaller field-of-view to register to the reference
  <output>        Output filename (final registered image)

Example:
  call_antspartialpov ref.nii.gz partial.nii.gz partial_in_ref.nii.gz

Notes:
  - Internally creates a binary mask from the partial FOV image.
  - Default transformation is affine (rigid+affine) unless modified via wrapper.
  - Relies on:
      * call_antsregistration
      * call_antsapplytransforms
      * FSL tools (fslmaths, fslroi)
  - If the input image is 4D, the first volume is used for mask creation.

---------------------------------------------------------------------------------------------------

USAGE

}


if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Deal with arguments
dtype="float"
while getopts :-:uhfdi:c: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in                
        int)
          dtype="short"
          ;;
        single)
          dtype="float"
          ;;
        double)
          dtype="double"
          ;;                    
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;  
    i)  INIT=${OPTARG}
          ;;
    c)  CONTRAST=${OPTARG}
          ;;     
    f)  dtype="float"
          ;;
    u)  dtype="short"
          ;;
    d)  dtype="double"
          ;;
  esac
done

REF=${@:$OPTIND:1}
MOV=${@:$OPTIND+1:1}
OUT=${@:$OPTIND+2:1}

if [[ ! -f ${REF} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find FIXED image \"${BOLD_GREEN}${REF}${RESET}\""
  exit 1
else
  REF=$(readlink "${REF}")
fi

if [[ ! -f ${MOV} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find MOVING image \"${BOLD_GREEN}${MOV}${RESET}\""
  exit 1
else
  MOV=$(readlink -f "${MOV}")
fi  

echo "Partial FOV > Whole brain"

#-----------------------------------------------------------------------------
# 1) mask binary FOV
echo " Creating binary mask of partial FOV"
MASK=$(dirname ${MOV})/$(basename ${MOV} .nii.gz)_mask.nii.gz
cmd=(
  fslmaths
  "${MOV}"
  -bin
  "${MASK}"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fslmaths"
  exit 1
fi

if [[ $(fslval ${MASK} dim0) -eq 4 ]]; then
  cmd=(
    fslroi
    "${MASK}"
    "${MASK}"
    0
    1
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "fslroi"
    exit 1
  fi  
fi

#-----------------------------------------------------------------------------
# 2) register partial FOV to whole-brain with mask
echo " Register partial FOV to whole-brain with mask"
XFM=$(dirname ${OUT})/$(basename ${OUT} .nii.gz)_desc-

cmd=(
  call_antsregistration
  --lin
  -x "${MASK}"
  "${REF}"
  "${MOV}"
  "${XFM}"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_antsregistration"
  exit 1
fi

#-----------------------------------------------------------------------------
# 3) apply registration
echo " Apply transformation to moving image"
cmd=(
  call_antsapplytransforms
  "${REF}"
  "${MOV}"
  "${OUT}"
  "${XFM}genaff.mat"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_antsapplytransforms"
  exit 1
fi

#-----------------------------------------------------------------------------
# 4) convert back to specified data format
cmd=(
  fslmaths
  ${OUT}
  ${OUT}
  -odt ${dtype}
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fslmaths"
  exit 1
fi

echo "Done"
