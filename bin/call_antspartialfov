#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antspartialpov

This script registers a partial FOV images to a whole-brain image via a few stages. First, a mask
is created of the partial FOV, which is then injected in call_antsregistration. The resulting ma-
trix is then applied to the input image.

Arguments:
    <-s>        convert <output> to INT16
    <-f>        convert <output> to FLOAT32
    <-d>        convert <output> to FLOAT64
    <reference> reference image (generally whole brain)
    <moving>    moving image (partial FOV image)
    <output>    output file name

Usage:
  call_antspartialpov <reference> <partial> <output file>

Example:
  call_antspartialpov reference.nii.gz partial.nii.gz partial_in_reference.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Deal with arguments
dtype="float"
while getopts sfdi:c: arg
do
  case ${arg} in
    i)  INIT=${OPTARG}
          ;;
    c)  CONTRAST=${OPTARG}
          ;;     
    f)  dtype="float"
          ;;
    s)  dtype="short"
          ;;
    d)  dtype="double"
          ;;
  esac
done

REF=${@:$OPTIND:1}
MOV=${@:$OPTIND+1:1}
OUT=${@:$OPTIND+2:1}

echo "Partial FOV > Whole brain"

#-----------------------------------------------------------------------------
# 1) mask binary FOV
echo " Creating binary mask of partial FOV"
MASK=$(dirname ${MOV})/$(basename ${MOV} .nii.gz)_mask.nii.gz
fslmaths ${MOV} -bin ${MASK}

if [[ $(fslval ${MASK} dim0) -eq 4 ]]; then
  fslroi ${MASK} ${MASK} 0 1
fi

if [[ $? -ne 0 ]]; then
  echo -e "${BOLD_RED}ERROR${RESET} in $(basename ${0}): fslmaths exited with non-zero status"
  exit 1
fi

#-----------------------------------------------------------------------------
# 2) register partial FOV to whole-brain with mask
echo " Register partial FOV to whole-brain with mask"
XFM=$(dirname ${OUT})/$(basename ${OUT} .nii.gz)_desc-

cmd=(
  call_antsregistration
  --lin
  -x "${MASK}"
  "${REF}"
  "${MOV}"
  "${XFM}"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_antsregistration"
  exit 1
fi

#-----------------------------------------------------------------------------
# 3) apply registration
echo " Apply transformation to moving image"
cmd=(
  call_antsapplytransforms
  "${REF}"
  "${MOV}"
  "${OUT}"
  "${XFM}genaff.mat"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_antsapplytransforms"
  exit 1
fi

#-----------------------------------------------------------------------------
# 4) convert back to specified data format
cmd=(
  fslmaths
  ${OUT}
  ${OUT}
  -odt ${dtype}
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fslmaths"
  exit 1
fi

echo "Done"
