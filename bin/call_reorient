#!/usr/bin/env python

from fmriproc import image
from lazyfmri import utils
import sys
import getopt

@utils.validate_cli_inputs(required_keys=["infile"])
def main(context):

    """
---------------------------------------------------------------------------------------------------
call_reorient

Very short script to reorient input files to a certain orientation using the reorient_img function
in the linescanning repo. Just specify an input file and an orientation code. Nearly all conventio-
nal orientation codes can be specified, in addition to 'nb' which specifically uses Nibabel's RAS+
definition (which corresponds to LPI in FSL terms)

Mandatory (required input):
    -i|--infile     path to nifti image

Optional (flags with defaults):
    -c|--code       orientation code (e.g., 'RAS', 'LPI', 'nb') [default = "nb" > RAS+]
    -q|--qform      qform code; leave empty if we should use the same code as the input file
    -o|--outfile    optional; input image is overwritten if left empty

Options (extra):
    -h|--help       print this help text

Outputs
    a new nifti image with specified orientation

Example:
    call_reorient -i t1w.nii.gz                                 (Nibabel's RAS+ [LPI])
    call_reorient -i t1w.nii.gz -c lpi -o t1w_new.nii.gz        (FSL's LPI)
    call_reorient -i t1w.nii.gz -c nb -q 1 -o t1w_new.nii.gz    (RAS+ and use qform = 1)

---------------------------------------------------------------------------------------------------
    """

    infile = context.get("infile")
    code = context.get("code")
    qform = context.get("qform")
    outfile = context.get("outfile")

    if outfile is None:
        outfile = infile

    image.reorient_img(
        infile,
        code=code,
        qform=qform, 
        out=outfile
    )

if __name__ == "__main__":

    infile   = None
    code     = "nb"
    qform    = 1
    outfile  = None

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:c:q:o:",
            ["help", "infile=", "code=", "qform=", "outfile="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--infile"):
            infile = arg
        elif opt in ("-c", "--code"):
            code = arg
        elif opt in ("-q", "--qform"):
            qform = arg
        elif opt in ("-o", "--outfile"):
            outfile = arg

    main(context={
        "infile": infile,
        "code": code,
        "qform": qform,
        "outfile": outfile
    })
