#!/usr/bin/env python

try:
    import nighres
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys
import getopt
from fmriproc.transform import fs2tkr
import os
import numpy as np
from lazyfmri import utils
opj = os.path.join

@utils.validate_cli_inputs(required_keys=["subject", "mesh", "output"], allow_input_dir=False)
def main(context):

    """
---------------------------------------------------------------------------------------------------
call_nighres2freesurfer (WIP!)

Convert nighres mesh to freesurfer-interpretable data following this thread: 
https://github.com/nighres/nighres/issues/106. The steps are the following:
  1) Resample levelset output from CRUISE to FS (e.g., with call_antsapplytransform)
  2) Convert resampled levelset to a mesh with call_nighreslevelmesh
  3) Convert voxel indexing to RAS-indexing with linescanning.transform.fs2tkr
  4) Save faces and vertices as something FreeSurfer-like (e.g., lh.nighres.white)
  5) Overlay in FreeView

Mandatory (required input):
    <subject> subject ID as specified in the FreeSurfer directory.
    <mesh>    output from call_nighreslevelmesh, a mesh-representation of your levelset image
    <output>  output file

Outputs:
  FreeSurfer-readable nighres-output

Example:
    call_nighres2freesurfer sub-001 sub-001_desc-l2m_mesh.vtk lh.pial

---------------------------------------------------------------------------------------------------
    """

    subject = context["subject"]
    mesh_fn = context["mesh"]
    output = context["output"]

    mesh = nighres.io.load_mesh(mesh_fn)
    mesh.pop('data')

    # nighres saves coordinates in voxel, not RAS like freesurfer
    coords = mesh['points']
    coords = np.hstack((coords, np.ones((coords.shape[0],1))))
    ras_coords = fs2tkr(subject, coord=coords)
    mesh['points'] = ras_coords
    nighres.io.save_mesh_geometry(output, mesh)


if __name__ == "__main__":
    subject = None
    mesh_fn = None
    output = None

    try:
        opts = sys.argv[1:]
        if len(opts) < 3:
            raise getopt.GetoptError("Not enough arguments")
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    subject = opts[0]
    mesh_fn = opts[1]
    output = opts[2]

    main(context={
        "subject": subject,
        "mesh": mesh_fn,
        "output": output
    })
