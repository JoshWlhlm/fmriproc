#!/usr/bin/env python

import os
import sys
import getopt
from lazyfmri import utils
from fmriproc import scanner
opj = os.path.join

try:
    from cxutils import optimal
except ImportError:
    print("Could not import cxutils. Please install from https://github.com/gjheij/cxutils")

@utils.validate_cli_inputs(required_keys=["subject", "anat2", "tfm", "line_fn"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_mrconsole

This script is the new version of call_getscannercoordinates. It utilizes the classes defined in 
the repository to combine the structural and functional information. By default, we will register 
to the anatomy from FreeSurfer (orig.mgz).

Mandatory (required input):
  -s|--sub        subject ID as used in FreeSurfer directory from which you can omit "sub-"
                  (e.g.,for "sub-001", enter "001").
  -t|--tfm        matrix mapping FreeSurfer's orig to session 2 (ANTs file)
  --ses2          New session anatomy
  --line          File containing coordinates/normal vectors for target area, generally the output
                  of 'spinoza_bestvertex'

Optional (flags with defaults):
  -n|--line-ses   Session number for the line-scanning experiments (generally >1), default = 2
  -d|--deriv      derivatives directory containing FreeSurfer/Pycortex/pRF directories. Defaults
                  to DIR_DATA_DERIV-variable
  --hemi          hemisphere of interest (e.g., "left", or "right"). Default = "left"
  --lh            consider left hemisphere (same as '--hemi left')
  --rh            consider right hemisphere (same as '--hemi right')

Options (extra):
  -h|--help       print this help text

Usage:
  call_mrconsole \
    --subject sub-001 \
    --ses2 <ses2> \
    --deriv <DIR_DATA_DERIV> \
    --tfm <aff> \
    --lh

  call_mrconsole \
    -s sub-001 \
    -d /path/to/derivatives \
    --lh \
    -t /path/to/genaff.mat \
    --ses2 anat_ses2.nii.gz

---------------------------------------------------------------------------------------------------
    """
      
    subject = context.get("subject")
    anat2 = context.get("anat2")
    tfm = context.get("tfm")
    line_fn = context.get("line_fn")
    deriv = context.get("deriv")
    hemi = context.get("hemi")
    new_ses = context.get("new_ses")

    if not isinstance(line_fn, str):
        raise ValueError("Please specify a valid path to the file containing the coordinates")
    
    if not os.path.exists(line_fn):
        raise FileNotFoundError(f"Could not find file {line_fn}")
    
    # get target vertex
    targ = optimal.TargetVertex(
        subject,
        out=line_fn,
        deriv=deriv
    )
    
    # calculate angles
    scanner.Scanner(
        targ,
        fs_dir=targ.fs_dir, 
        new_anat=anat2, 
        fs2ses=tfm, 
        hemi=hemi,
        ses=new_ses
    )

if __name__ == "__main__":

    subject = None
    anat2 = None
    tfm = None
    line_fn = None
    deriv = os.environ.get('DIR_DATA_DERIV')
    hemi = "left"
    new_ses = 2

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hs:n:d:t:",
            ["help", "sub=", "line-ses=", "deriv=", "tfm=", "hemi=", "ses2=", "line=", "rh","lh"]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        print("ERROR IN ARGUMENT HANDLING")
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg            
        elif opt in ("-n", "--line-ses"):
            new_ses = arg
        elif opt in ("-d", "--deriv"):
            deriv = arg
        elif opt in ("--ses2"):
            anat2 = arg
        elif opt in ("--hemi"):
            hemi = arg
        elif opt in ("--lh"):
            hemi = "left"         
        elif opt in ("--rh"):
            hemi = "right"                
        elif opt in ("-t", "--tfm"):
            tfm = arg
        elif opt in ("--line"):
            line_fn = arg      

    main(context={
        "subject": subject,
        "anat2": anat2,
        "tfm": tfm,
        "line_fn": line_fn,
        "deriv": deriv,
        "hemi": hemi,
        "new_ses": new_ses
    })
