#!/usr/bin/env python

try:
    from nighres.brain import mp2rage_skullstripping
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import os
import sys
import getopt
from lazyfmri import utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utils
opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["inv2", "t1w", "t1map"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_nighresskullstrip

This script is a wrapper for the mp2rage object that can calculate a Unified T1-weighted
image and a quantitative T1 map, based on the magnitude and phase-information of the two
volumes of a MP2RAGE-sequence (Marques et al., 2010). It can also further correct this map
for B1 inhomogenieties using a B1 map (Marques et al., 2014).

Usage:
  call_nighresskullstrip -i <inv2> -t <t1w> -m <t1map> [arguments] [options]

Mandatory (required input):
  -i|--inv2       2nd inversion image
  -t|--t1w        T1-weighted image
  -m|--t1map      T1map

Optional (flags with defaults):
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'skullstripping'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")

Options (extra):
  -h|--help       print this help text

Outputs
  - brain_mask (niimg):   Binary brain mask               (-strip_mask)
  - inv2_masked (niimg):  Masked second inversion image   (-strip_inv2)
  - t1w_masked (niimg):   Masked T1-weighted image        (-strip_t1w)
  - t1map_masked (niimg): Masked T1 map                   (-strip_t1map)

Example:
  call_nighresskullstrip \
    -i inv2.nii.gz \
    -t t1w.nii.gz \
    -m t1map.nii.gz \
    -o derivatives/nighres

Notes:
  docs: https://nighres.readthedocs.io/en/latest/brain/mp2rage_skullstripping.html

---------------------------------------------------------------------------------------------------
    """

    inv2 = context.get("inv2")
    t1w = context.get("t1w")
    t1map = context.get("t1map")
    output_dir = context.get("output_dir", opj(os.getcwd(), "skullstripping"))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")

    #-----------------------------------------------------------------------------
    # Run skull stripping
    mp2rage_skullstripping(
        inv2,
        t1w,
        t1map,
        save_data=True,
        output_dir=output_dir,
        file_name=output_base
    )

    utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
    print()

    #-----------------------------------------------------------------------------
    # Rename file to BIDS style
    print("Rename to more BIDS'ey style")
    suffixes = {
        "brain_mask":     "mask",
        "inv2_masked":    "inv2",
        "t1w_masked":     "t1w",
        "t1map_masked":   "t1map"
    }

    for key, label in suffixes.items():
        old = opj(output_dir, f"{output_base}_strip-{label}.nii.gz")
        new = opj(output_dir, f"{output_base}-strip_{label}.nii.gz")
        if os.path.exists(old):
            print(f" {os.path.basename(old)} â†’ {gb}{os.path.basename(new)}{end}")
            os.rename(old, new)

    print("Done")

if __name__ == "__main__":
    inv2 = None
    t1w = None
    t1map = None
    output_dir = opj(os.getcwd(), 'skullstripping')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:t:m:o:n:",
            ["help", "inv2=", "t1w=", "t1map=", "outputdir=", "name="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inv2"):
            inv2 = arg
        elif opt in ("-t", "--t1w"):
            t1w = arg
        elif opt in ("-m", "--t1map"):
            t1map = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg

    main(context={
        "inv2": inv2,
        "t1w": t1w,
        "t1map": t1map,
        "output_dir": output_dir,
        "output_base": output_base
    })
