#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
	cat <<USAGE

---------------------------------------------------------------------------------------------------
call_clusterXroi

Wrapper for computing cluster × ROI overlap and extracting time series. Given a subject and one
or more cluster masks (from a group-level GLM), this script multiplies the cluster masks with
a set of user-defined ROI masks, extracts the resulting signals, and outputs time series per ROI.

Usage:
  call_clusterXroi -s <subj_ID> -f <featdir> -g <gfeatdir> -m <maskdir> -z <zstat> [-c <copes>] 
  [-r <run>]

Arguments:
  -s <subj_ID>    BIDS-style subject ID (e.g., sub-001)
  -f <featdir>    Path to subject-level FEAT directory (level1)
  -g <gfeatdir>   Path to group-level analysis directory (GFEAT)
  -m <maskdir>    Path to directory containing binary ROI masks (must be .nii.gz format)
  -z <zstat>      Z-statistic index to use (e.g., 1 or 2)
  -c <copes>      Comma-separated list of cope indices (e.g., 1,2,3); default is 1
  -r <run_ID>     Optional: run ID (integer) for BIDS-style naming
  -n <session>    Optional: session ID, added to BIDS-style output file names

Options:
  -h|--help       print this help text

Functionality:
  - Checks if ROI and cluster masks exist, otherwise skips/alerts
  - Converts all cluster masks to binary if not yet done
  - Computes cluster × ROI intersections and saves resulting masks
  - Extracts mean time series using fslmeants from filtered_func_data*.nii.gz
  - Outputs one combined file per subject with all extracted time series
  - Generates a header file containing ROI names for clarity

Assumptions:
  - Cluster masks follow FSL's naming convention inside GFEAT directory (e.g.,
    cluster_mask_zstat1.nii.gz)
  - Binary masks in <maskdir> start with "bin.thr"
  - Design.fsf is available and used to parse contrast names

Example:
  call_clusterXroi \\
    -s sub-001 \\
    -f /path/to/level1/sub-001.feat \\
    -g /path/to/level2/task-shapes.gfeat \\
    -m /path/to/rois \\
    -z 1 \\
    -c 1,2,3

Batch example:
  for i in 002 003 004; do \\
    qsub -N extract_${i} \$BIN_DIR/call_clusterXroi \\
    -s sub-${i} \\
    -f /data/fmriprep/level1/sub-${i}.feat \\
    -g /data/fmriprep/level2/task-shapes.gfeat \\
    -m /data/rois -z 1; \\
  done

Outputs:
  - <featdir>/cluster_x_roi/<groupfolder>/*.nii.gz : Overlap masks
  - <featdir>/cluster_x_roi/<groupfolder>/timecourses/ : Time series for each ROI
  - <featdir>/cluster_x_roi/<groupfolder>/timecourses/*roi-all.txt : Combined time series table
  - *roi-all_hd.txt : ROI header file for tracking columns in the .txt output

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
while getopts :-:hs:f:g:m:c:z:r:n: arg
do
	case ${arg} in
    -)
      case "${OPTARG}" in                  
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
	  s)  subj_ID=${OPTARG}
			    ;;
	  r)  run_ID=${OPTARG}
			    ;;
	  n)  ses_ID=${OPTARG}
			    ;;
	  f)  featdir=${OPTARG}
			    ;;
	  g)  gfeatdir=${OPTARG}
			    ;;
	  m)  maskdir=${OPTARG}
			    ;;
	  c)  copes=${OPTARG}
			    ;;
	  z)  nr_zstat=${OPTARG}
			    ;;
	esac

done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

if [[ ! -z "${ses}" ]]; then
  fbase="${subj_ID}_ses-${ses}"
else
  fbase="${subj_ID}"
fi

if [[ ! -d "${maskdir}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Please specify a directory with binary masks.."
  exit 1
fi

if [[ ! -d "${featdir}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Please specify a path pointing to a FEAT directory"
  exit 1
fi

if [[ -z "${copes}" ]]; then
  copes=1
fi

if [[ -z "${nr_zstat}" ]]; then
  nr_zstat=1
fi

echo "General settings:"
echo " copes: ${copes}"
echo " zstat: ${nr_zstat}"

outdir=${featdir}/cluster_x_roi/$(basename ${gfeatdir})
if [[ ! -d ${outdir} ]]; then
  mkdir -p ${outdir}
fi

#-----------------------------------------------------------------------------
# Get contrasts
design="${featdir}/design.fsf"

# procedure to elucidate the amount of contrasts from design.fsf file
  # where is the line that specifies the nr of contrasts?
howManyContrasts="$(grep -n "ncon_orig" ${design} | head -n 1 | cut -d: -f1)"

  # at which line nr is this string?
lineNrContrasts=$(sed -n ''"${howManyContrasts}p"'' ${design})

  # get value at this line number
nrContrasts=$(echo "${lineNrContrasts}" | cut -d' ' -f 3)

echo "Found ${nrContrasts} contrasts"
# Now get all the contrasts in a text file. We make a while loop that stores the
# output in a text file as long as the nth element of the array is less than the
# max number of contrasts
rm "${outdir}/contrasts.txt" 2>/dev/null
touch "${outdir}/contrasts.txt"

start=1
i=${start}
while [[ ${i} -le ${nrContrasts} ]]; do

  tmp1="$(grep -n "conname_real.${i}" ${design} | head -n 1 | cut -d: -f1)"
  tmp2=$(sed -n ''"${tmp1}p"'' ${design})
  tmp3=$(echo "${tmp2}" | cut -d'"' -f2)

  printf "${i}_${tmp3}\n" >> ${outdir}/contrasts.txt
  printf "${i}_${tmp3} >> contrasts.txt\n"
  ((i++))

done

listContrasts=$(sed -e '' "${outdir}/contrasts.txt")

#-----------------------------------------------------------------------------
# Here we will specify which contrasts we want to have the values from the time
# series from; again, don't do this for resting state data.

# Then for each item in the contrasts.txt file (containing all contrasts), we
# will check whether the item corresponds with the specified input. If it is,
# we continue with the mask-making procedure.

echo "Make clusterXroi masks.."
for i in ${listContrasts}; do

  # Get nr of contrast
  nr=$(grep -oP '(?<!\d)\d{1}(?!\d)' <<< ${i})

  # check if we got a 3rd level input folder
  if [[ ${gfeatdir} == *".gfeat"* ]]; then
    for cope in ${copes[@]}; do
      clusterMask="${gfeatdir}/cope${cope}.feat/cluster_mask_zstat${nr}.nii.gz"
      out="${outdir}/bin_group_zstat${nr}.con${i}.nii.gz"
      
      if [[ ! -f "${out}" ]]; then
        fslmaths "${clusterMask}" -bin "${out}"
        printf " Created $(basename ${out})\n"
      else
        printf " $(basename ${out}) already present\n"
      fi
    done

  else
    # If nr of contrast matches with the specified contrasts we want to do, then
    # procede by binarizing all these cluster masks
    if [[ "${copes[@]}" =~ "${nr}" ]]; then

      # Get the cluster mask from the input cope feat directory and binarize it
      clusterMask="${gfeatdir}/cope${nr}.feat/cluster_mask_zstat${nr_zstat}.nii.gz"
      out="${outdir}/bin_group_zstat${nr_zstat}.con${i}.nii.gz"
      
      if [[ ! -f "${out}" ]]; then
        fslmaths "${clusterMask}" -bin "${out}"
        printf " Created $(basename ${out})\n"
      else
        printf " $(basename ${out}) already present\n"
      fi
    fi
  fi
done

#-----------------------------------------------------------------------------
# Multiplying all cluster masks with ROI masks
printf "\nMultiplying all cluster masks with ROI masks\n"

# For all masks of the ROI regions, we want to multiply it with the specified
# contrast cluster masks, so we have two for-loops nested within each other.

# So: for all ROI masks, multiply them with all cluster masks; for resting state data: get whole ROI
for mask in ${maskdir}/bin.thr*.nii.gz; do

  for nr in ${nr_zstat[@]}; do

    i=$(
      find "${outdir}" \
      -type f \
      -name "*bin_group_zstat${nr}*" \
      2>/dev/null
    )

	  roi="$(basename ${mask} | cut -d "." -f3)"

    if [[ ! -z ${run_ID} ]]; then
      out="${outdir}/${fbase}_space-MNI152NLin6Asym_run-${run_ID}_roi-${roi}_desc-zstat${nr}_mask.nii.gz"
    else
      out="${outdir}/${fbase}_space-MNI152NLin6Asym_roi-${roi}_desc-zstat${nr}_mask.nii.gz"
    fi

    if [[ ! -f "${out}" ]]; then
      echo " Creating $(basename ${out})"
      fslmaths "${i}" -mul "${mask}" "${out}"
    else
      printf " $(basename ${mask}): multiplied mask already present\n"
    fi
  done
done

#-----------------------------------------------------------------------------
# Extract mean time series from func data with created masks
if [[ -f "${featdir}/filtered_func_data_clean.nii.gz" ]]; then
  in="${featdir}/filtered_func_data_clean.nii.gz"
else
  in="${featdir}/filtered_func_data.nii.gz"
fi

printf "\nExtracting timeseries from $(basename ${in})\n"

for file in ${outdir}/${subj_ID}*.nii.gz; do

  pathTextFiles="${outdir}/timecourses"

  if [[ ! -d "${pathTextFiles}" ]]; then
	  mkdir -p "${pathTextFiles}"
  fi

  out="${pathTextFiles}/$(basename ${file} _mask.nii.gz)_tc.txt"

  if [[ ! -f "${out}" ]]; then
    printf " Writing $(basename ${out})\n"
    cmd=(
      fslmeants
      -i "${in}"
      -o "${out}"
      -m "${file}"
    )
    eval "${cmd[@]}"

  else
	  printf " $(basename ${out}) already present\n"
  fi

done

# plop everthing in subject specific ROI files
if [[ ! -z ${run_ID} ]]; then
  all_rois="${pathTextFiles}/${fbase}_run-${run_ID}_roi-all.txt"
else
  all_rois="${pathTextFiles}/${fbase}_roi-all.txt"
fi

if [[ ! -f ${all_rois} ]]; then

  declare -a ROI=()
  # find ROI files
  f=$(
    find "${pathTextFiles}" \
    -type f \
    -name "*_tc.txt" \
    2>/dev/null
  )

  for k in ${f[@]}; do

    q=desc
    w=_tc
    start=$(awk -F${q} '{print length($1)+1}' <<< "$(basename ${k})")
    end=$(awk -F${w} '{print length($1)+1}' <<< "$(basename ${k})")
    region=$(basename ${k} | cut -c ${start}-$(( ${end} - 1)) | cut -d'-' -f2)
    ROI+=("${region}")

  done

  # add headers
  paste "${f}" >> "${all_rois}"
  echo -e "${ROI[@]}" > "${all_rois/.txt/_hd.txt}"

fi
