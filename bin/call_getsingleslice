#!/usr/bin/env python

import sys
import nibabel as nb

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_getsingleslice

This super short script fetches a specific 3D volume from a 4D NIfTI file. The extraction is done
along the last axis (typically time or volume index), producing a new NIfTI file containing only 
the selected volume. This is useful when you want to isolate a single scan from a 4D series for 
visualization, analysis, or manual inspection.

Args:
  <input file>    string-like path to file to extract from (4D NIfTI image)
  <output file>   string-like path to output new volume to
  <volume nr>     integer representing the volume index (zero-based) to extract

Outputs:
    output file   new 3D NIfTI file containing the extracted volume from the input

Usage:
    call_getsingleslice <input file> <output file> <volume index>

Example:
  call_getsingleslice input.nii.gz output.nii.gz 0
      â†’ Extracts the first volume from input.nii.gz and saves it as output.nii.gz

Notes:
  - Volume indices start at 0
  - Output will preserve original header and affine transformation from the input
  - The script assumes that the input file is a valid 4D NIfTI image

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 3:
        print(main.__doc__)
        sys.exit()

    in_file = argv[1]
    out_file = argv[2]
    vol = argv[3]

    in_data = nb.load(in_file)
    real_slice = in_data.get_fdata()[:,:,:,int(vol)]
    nb.Nifti1Image(
        real_slice,
        header=in_data.header,
        affine=in_data.affine
    ).to_filename(out_file)

if __name__ == "__main__":
    main(sys.argv[1:])
