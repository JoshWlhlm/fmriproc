#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_mrivol2vol

Wrapper for FreeSurfer's mri_vol2vol. You will need to specify a moving image (image to be moved),
a target image (image to move <moving> image to), an output name, and whether the moving image is a
segmentation ('seg') and volume ('vol') image. There's a separation here because the procedure is
sligthly different for segmentation and volume images.

Usage:
  call_mrivol2vol <-t transform name> <moving> <target> <output> <seg/vol>

Arguments:
  <moving>        image to be moved
  <target>        image to move to
  <output>        output name
  <vol/seg>       type input image (default = 'vol')

Options:
  -h|--help       print this help text
  -t <transform>  output name for transform (optional)

Example:
  call_mrivol2vol seg.mgz raw.mgz seg
  call_mrivol2vol -t register.dat vol.mgz raw.mgz vol

---------------------------------------------------------------------------------------------------

USAGE

}

IN_TYPE="vol"
while getopts :-:ht: argument; do
  case $argument in
    -)
      case "${OPTARG}" in
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;    
    t)  tname=${OPTARG}
          ;;
    h)  Usage && exit 0
          ;;             
  esac
done

if [[ $# -lt 3 ]]; then
  Usage && exit 0
fi

TAR=${@:$OPTIND:1}
MOV=${@:$OPTIND+1:1}
OUT=${@:$OPTIND+2:1}
IN_TYPE=${@:$OPTIND+3:1}

#-----------------------------------------------------------------------------
# Start loop

if [[ ! -f ${MOV} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find MOVING image"
  exit 1
fi

if [[ ! -f ${TAR} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find FIXED image"
  exit 1
fi

if [[ -z ${OUT} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Specify output name"
  exit 1
fi

if [[ -z ${IN_TYPE} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "type" "MOVING must be of type \"seg\"or \"vol\""
  exit 1
fi

if [[ ! -z ${tname} ]]; then
  reg_flag="--save-reg ${tname}"
else
  reg_flag="--no-save-reg"
fi

if [[ ${IN_TYPE} == "vol" ]]; then
  cmd=(
    mri_vol2vol
    --mov "${MOV}"
    --targ "${TAR}"
    --regheader
    --o "${OUT}"
    "${reg_flag}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "mri_vol2vol"
    exit 1
  fi  
elif [[ ${IN_TYPE} == "seg" ]]; then
  cmd=(
    mri_label2vol
    --seg "${MOV}"
    --temp "${TAR}"
    --o "${OUT}"
    --regheader "${MOV}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "mri_label2vol"
    exit 1
  fi  
else
  echo
  print_line -
  print_error_msg "$(basename ${0})" "type" "MOVING must be of type \"seg\"or \"vol\", not \"${IN_TYPE}\""
  exit 1
fi
