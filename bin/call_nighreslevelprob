#!/usr/bin/env python

try:
    from nighres.surface import levelset_to_probability
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys, getopt
import os
from lazyfmri import utils
opj = os.path.join
rb = utils.color.RED+utils.color.BOLD
gb = utils.color.GREEN+utils.color.BOLD
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["levelset"])
def main(argv, context):

    r"""
---------------------------------------------------------------------------------------------------
call_nighreslevelprob

Creates a probability map from the distance to a levelset surface representation.

Args:
    -l|--levelset   levelset image. E.g., 
                        - the gray-white matter surface is stored in file ending on '-cruise_gwb.nii.gz'
                        - the pial surface is stored in a file ending on '-cruise_cgb.nii.gz'
                        - the mid-cortical surface in a file ending on '-cruise-avg.nii.gz'
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'prob'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
    -x|--kwargs     Extra arguments that will be directly passed to 'profile_meshing' (see
                    docs-link below for details). The format should be as follows: different para-
                    meters comma-separated, and parameter-value pair separated by '='):
                    
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                    E.g.,:
                    "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                    This input will be parsed to a dictionary via 'lazyfmri.utils.parse_kwargs_to_dict()'
                    The kwargs specified in this flag take precedent over the default kwargs:

                    ```
                    defaults = {
                        "overwrite": True,
                        "save_data": True,
                        "distance_mm": 1,
                        "output_dir": "directory specified with -o|--outputdir",
                        "file_name": "basename specified with -n|--name"
                    }
                    ```

Outputs:
    (taken from https://nighres.readthedocs.io/en/latest/surface/levelset_to_mesh.html)
    Dictionary collecting outputs under the following keys (suffix of output files in brackets)

    result (niimg): Probability map (output file suffix _l2p-proba)

Example:
    call_nighreslevelprob \
        -l sub-01_ses-1_acq-MP2RAGE_desc-cruise_cgb.nii.gz \
        -o $PWD \
        -n sub-01_desc

    call_nighreslevelprob \
        -l sub-01_ses-1_acq-MP2RAGE_desc-cruise_cgb.nii.gz \
        -x output_dir="/some/directory",distance_mm=2

---------------------------------------------------------------------------------------------------
    """

    levelset = context["levelset"]
    output_dir = context.get("output_dir", opj(os.getcwd(), 'prob'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")
    kwargs = context.get("kwargs", {})

    #---------------------------------------------------------------------------------------------------
    # Default kwargs
    defaults = {
        "save_data": True,
        "overwrite": True,
        "output_dir": output_dir,
        "file_name": output_base,
        "distance_mm": 1
    }

    for key, val in defaults.items():
        kwargs = utils.update_kwargs(kwargs, key, val)

    # Just plop everything in levelset_to_probability
    levelset_to_probability(levelset, **kwargs)

    #---------------------------------------------------------------------------------------------------
    # Nicer formatting of output filenames
    fn_old = opj(output_dir, output_base + "_l2p-proba.nii.gz")
    fn_new = opj(output_dir, output_base + "-l2p_proba.nii.gz")

    if os.path.exists(fn_old):
        print(f"Renaming: {os.path.basename(fn_old)} â†’ {gb}{os.path.basename(fn_new)}{end}")
        os.rename(fn_old, fn_new)

    print("Done")

if __name__ == "__main__":
    levelset = None
    output_dir = opj(os.getcwd(), 'prob')
    output_base = "subject_acq-MP2RAGE_desc"
    kwargs = {}

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hl:o:n:x:",
            ["help", "levelset=", "outputdir=", "name=", "kwargs="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        print("ERROR IN ARGUMENTS")
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-l", "--levelset"):
            levelset = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-x", "--kwargs"):
            kwargs = utils.parse_kwargs_to_dict(arg)

    main(sys.argv[1:], context={
        "levelset": levelset,
        "output_dir": output_dir,
        "output_base": output_base,
        "kwargs": kwargs
    })
