#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
  cat <<USAGE

---------------------------------------------------------------------------------------------------
call_ses1_to_motion1

Warp the anatomical image from session 1 to the first motion image ("motion1") of a later session
(e.g., session 2). This is useful when motion correction requires anatomical alignment across sessions.

The script uses a hierarchical search strategy to locate the T1-weighted image from session 1, looking
in the following folders in priority order:

  1. derivatives/denoised/<subject>/ses-1
  2. derivatives/pymp2rage/<subject>/ses-1
  3. \$DIR_DATA_HOME/<subject>/ses-1/anat

It will also locate the first motion image in:

  - \$DIR_DATA_HOME/<subject>/ses-<X>/anat/*motion1*.nii.gz

If both images are found, a rigid-body registration is performed using ANTs, and the resulting
transformation matrix is saved to:

  \$CTX/<subject>/transforms/<subject>_from-ses1_to-ses<X>_rec-motion1_desc-genaff.mat

Usage:
  call_ses1_to_motion1 <subject> <ses_nr>

Arguments:
  <subject>       Subject ID (e.g., sub-001)
  <ses_nr>        Session number to align to (e.g., 2)

Example:
  call_ses1_to_motion1 sub-001 2

Outputs:
  - Transformation matrix (MAT) for rigid alignment from ses-1 to motion1 of the given session
  - Print message to inspect registration in ITK-SNAP

---------------------------------------------------------------------------------------------------

USAGE

USAGE
  exit 1
}

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
subj_id="${1}"
ses_id="${2}"

#-----------------------------------------------------------------------------
# check inputs
if [[ -z "${subj_id}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify a subject ID"
  exit 1
fi

if [[ -z "${ses_id}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify a session ID"
  exit 1
fi

#-----------------------------------------------------------------------------
# Check some directories/files
if [[ ! -d "$CTX/${subj_id}" ]]; then
  call_ctximport -s ${subj_id}
fi

# find anatomy directory hierarchically
INPUT_DIR=$(find_hierarchical_anatomy 3)

#-----------------------------------------------------------------------------
# reference session
ses1=$(
  find "${INPUT_DIR}/${subj_id}/ses-1" \
  -type f \
  -name "${subj_id}*" \
  -and -name "*T1w.nii.gz" \
  2>/dev/null
)

if [[ -z "${ses1}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ses-1" "Could not find ses-1 image with \"${subj_id}*\" and \"*T1w.nii.gz\" in ${BOLD_GREEN}${INPUT_DIR}/${subj_id}/ses-1${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# target session
ses2=$(
  find "${DIR_DATA_HOME}/${subj_id}/ses-${ses_id}/anat" \
  -type f \
  -name "${subj_id}*" \
  -and -name "*motion1*" \
  -and -name "*.nii.gz" \
  2>/dev/null
)

if [[ -z "${ses2}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ses-${ses_id}" "Could not find ses-${ses_id} image with \"${subj_id}*\", \"*motion1*\" and \"*.nii.gz\" in ${BOLD_GREEN}${DIR_DATA_HOME}/${subj_id}/ses-${ses_id}/anat${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# define output
aff="${CTX}/${subj_id}/transforms/${subj_id}_from-ses1_to-ses${ses_id}_rec-motion1_desc-genaff.mat"
if [[ ! -d "$(dirname ${aff})" ]]; then
  mkdir -p "$(dirname ${aff})"
fi

echo "run \"itksnap -g ${ses2} -o ${ses1}\" to verify registration"
echo
cmd=(
  call_antsregistration
  "${ses2}"
  "${ses1}"
  "${aff%genaff.mat}"
  rigid
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "${cmd[0]}"
  exit 1
fi
