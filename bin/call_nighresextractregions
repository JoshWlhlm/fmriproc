#!/usr/bin/env python

try:
    from nighres.brain import extract_brain_region
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

from lazyfmri import utils
import sys
import getopt
from pathlib import Path
import os
opj = os.path.join
rb = utils.color.RED+utils.color.BOLD
gb = utils.color.GREEN+utils.color.BOLD
end = rb = utils.color.END

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_nighresextractregions

Extracts masks, probability maps and levelset surfaces for specific brain regions and regions from a
Multiple Object Geometric Deformable Model (MGDM) segmentation result.

Args:
    -s|--seg        segmentation image from MGDM (-seg)
    -b|--boundary   boundary image from MGDM (-dist)
    -p|--proba      probability image from MGDM (-mems)
    -l|--labels     label image from MGDM (-lbls)
    -r|--roi        region to extract (default is "cerebrum")
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'region'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
    -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                    put generated by 'call_nighresmgdm', and should have the following
                    suffixes:

                    ```
                    pattern_map = {
                        "segmentation": "seg.nii.gz",
                        "levelset_boundary": "dist.nii.gz",
                        "maximum_membership": "mems.nii.gz",
                        "maximum_label": "lbls.nii.gz"
                    }
                    ```

                    For instance, the output for a typical MGDM call will look like this:

                    ```
                    project_path/derivatives/nighres/sub-01/ses-1/mgdm
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-mgdm_dist.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-mgdm_lbls.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-mgdm_mems.nii.gz
                    └── sub-01_ses-1_acq-MP2RAGE_desc-mgdm_seg.nii.gz
                    ```

    -x|--kwargs     Extra arguments that will be directly passed to 'cruise_cortex_extraction' (see
                    docs-link below for details). The format should be as follows: different para-
                    meters comma-separated, and parameter-value pair separated by '='):
                    
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                    E.g.,:
                    "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                    This input will be parsed to a dictionary via 'lazyfmri.utils.parse_kwargs_to_dict()'
                    The kwargs specified in this flag take precedent over the default kwargs:

                    ```
                    defaults = {
                        "overwrite": True,
                        "save_data": True,
                        "roi": "input specified with -r|--roi",
                        "output_dir": "directory specified with -o|--outputdir",
                        "output_base": "basename specified with -n|--name"
                    }
                    ```                    

Outputs:
    (taken from https://nighres.readthedocs.io/en/latest/brain/extract_brain_region.html#nighres.brain.extract_brain_region)
    Dictionary collecting outputs under the following keys (suffix of output files in brackets,
    # stands for shorthand names of the different extracted regions, respectively: rcr, lcr, cr, cb, cbs, sub, an, fn)

        - region_mask (niimg):      Hard segmentation mask of the (GM) region of interest (_xmask-#gm)
        - inside_mask (niimg):      Hard segmentation mask of the (WM) inside of the region of interest (_xmask-#wm)
        - background_mask (niimg):  Hard segmentation mask of the (CSF) region background (_xmask-#bg)
        - region_proba (niimg):     Probability map of the (GM) region of interest (_xproba-#gm)
        - inside_proba (niimg):     Probability map of the (WM) inside of the region of interest (_xproba-#wm)
        - background_proba (niimg): Probability map of the (CSF) region background (_xproba-#bg)
        - region_lvl (niimg):       Levelset surface of the (GM) region of interest (_xlvl-#gm)
        - inside_lvl (niimg):       Levelset surface of the (WM) inside of the region of interest (_xlvl-#wm)
        - background_lvl (niimg):   Levelset surface of the (CSF) region background (_xlvl-#bg)

Example:

    call_nighresextractregions \
        -s sub-001_ses-1_acq-MP2RAGE_desc-mgdm_seg.nii.gz \
        -b sub-001_ses-1_acq-MP2RAGE_desc-mgdm_dist.nii.gz \
        -p sub-001_ses-1_acq-MP2RAGE_desc-mgdm_mems.nii.gz \
        -l sub-001_ses-1_acq-MP2RAGE_desc-mgdm_lbls.nii.gz \
        -r cerebrum \
        -o /nighres/subject/region \
        -n subject_ses-1_acq-MP2RAGE_desc

    call_nighresextractregions \
        -m /nighres/subject/mgdm \
        -o /nighres/subject/region \
        -n subject_ses-1_acq-MP2RAGE_desc

    # specify outputs through kwargs; passed directly to extract_brain_region
    call_nighresextractregions \
        -i /path/to/nighres/sub-01/ses-1/mgdm
        -x output_base="sub-01_desc",output_dir="/some/other/directory",estimate_tissue_densities=True

---------------------------------------------------------------------------------------------------
    """

    input_dir = None
    segmentation = None
    boundary_dist = None
    max_probas = None
    max_labels = None
    roi = "cerebrum"
    output_dir = opj(os.getcwd(), 'region')
    output_base = "subject_acq-MP2RAGE_desc"
    kwargs = {}

    try:
        opts = getopt.getopt(argv,"hm:s:b:p:l:r:o:n:i:",["help", "seg=", "boundary=", "proba=", "labels=", "roi=", "outputdir=", "name=", "inputdir"])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--seg"):
            segmentation = arg
        elif opt in ("-b", "--boundary"):
            boundary_dist = arg
        elif opt in ("-p", "--proba"):
            max_probas = arg
        elif opt in ("-l", "--labels"):
            max_labels = arg
        elif opt in ("-r", "--roi"):
            roi = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-i", "--inputdir"):
            input_dir = arg

    # Either they must give >= required_args, or a valid input_dir must be provided
    required_args = 5
    if (
        len(argv) < required_args and
        (not isinstance(input_dir, str) or not os.path.isdir(input_dir))
    ):
        print("\nERROR: Missing or invalid arguments.")
        
        if len(argv) < required_args:
            print(" - Not enough command-line arguments specified.")
        if not isinstance(input_dir, str):
            print(" - Input directory was not provided or is not a string.")
        elif not os.path.isdir(input_dir):
            print(f" - Input directory '{input_dir}' does not exist.")
        
        print(main.__doc__)
        sys.exit(1)

    #---------------------------------------------------------------------------------------------------
    # Collect files depending on whether we got an input directory or not
    input_kws = {}
    pattern_map = {
        "segmentation": "seg.nii.gz",
        "levelset_boundary": "dist.nii.gz",
        "maximum_membership": "mems.nii.gz",
        "maximum_label": "lbls.nii.gz"
    }
    if input_dir is not None:
        print(f"Loading files from {gb}{input_dir}{end}..")

        for key, pattern in pattern_map.items():
            in_file = utils.get_file_from_substring(pattern, input_dir)
            if isinstance(in_file, str):
                input_kws[key] = in_file
            elif isinstance(in_file, list):
                raise ValueError(f"Found multiple instances of '{val}' for '{key}'-image: {in_file}")
            else:
                raise FileNotFoundError(f"Could not find '{key}'-file with '{val}'  in '{input_dir}'")

            input_kws[key] = val
    else:
        print("Loading manually specified files..")
        for key, val in zip(
            list(pattern_map),
            [segmentation, boundary_dist, max_probas, max_labels]
        ):
            input_kws[key] = val

    #---------------------------------------------------------------------------------------------------
    # Check that input files exist
    missing_files = [desc for desc, path in input_kws.items() if not path or not os.path.isfile(path)]
    if missing_files:
        print("ERROR: The following required input files are missing or invalid:")
        for f in missing_files:
            print(f"  - {rb}{f}{end}")
        sys.exit(1)

    [print(f" {key}: {gb}{val}{end}") for key, val in input_kws.items()]

    #---------------------------------------------------------------------------------------------------
    # Default kwargs
    defaults = {
        "save_data": True,
        "overwrite": True,
        "output_dir": output_dir,
        "file_name": output_base        ,
        "extracted_region": roi,
    }

    for key, val in defaults.items():
        kwargs = utils.update_kwargs(
            kwargs,
            key,
            val
        )

    # combine input & kwargs
    combined_kwargs = {**input_kws, **kwargs}

    #---------------------------------------------------------------------------------------------------
    # run
    cortex = extract_brain_region(**combined_kwargs)

    #---------------------------------------------------------------------------------------------------
    # Renaming suffixes
    suff = {
        'cerebrum': 'cr',
        'left_cerebrum': 'lcr',
        'right_cerebrum': 'rcr',
        'cerebellum': 'cb',
        'cerebellum_brainstem': 'cbs',
        'subcortex': 'sub',
        'tissues(anat)': 'an',
        'tissues(func)': 'fn'
    }
    
    print("Attempting to rename to more BIDS'ey style")
    for i in cortex:
        for t in ['xmask','xproba','xlvl']:
            if "inside" in i and t in cortex[i]:
                suffix = f'-{t}_{suff[roi]}-wm.nii.gz'
            elif "region" in i and t in cortex[i]:
                suffix = f'-{t}_{suff[roi]}-gm.nii.gz'
            elif "background" in i and t in cortex[i]:
                suffix = f'-{t}_{suff[roi]}-csf.nii.gz'
            else:
                pass

        fn = opj(output_dir, output_base + suffix)
        if os.path.exists(cortex[i]):
            print(f" {os.path.basename(cortex[i])} → {gb}{os.path.basename(fn)}{end}")
            os.rename(cortex[i], fn)

    print("Done")

if __name__ == "__main__":
    main(sys.argv[1:])
