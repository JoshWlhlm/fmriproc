#!/usr/bin/env python

try:
    from nighres.brain import extract_brain_region
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys
import getopt
from pathlib import Path
import os
from lazyfmri import utils
opj = os.path.join
rb = utils.color.RED + utils.color.BOLD
gb = utils.color.GREEN + utils.color.BOLD
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["seg", "boundary", "proba", "labels"], allow_input_dir=True)
def main(argv, context):
    r"""
---------------------------------------------------------------------------------------------------
call_nighresextractregions

Extracts masks, probability maps and levelset surfaces for specific brain regions and regions from a
Multiple Object Geometric Deformable Model (MGDM) segmentation result.

Args:
    -s|--seg        segmentation image from MGDM (-seg)
    -b|--boundary   boundary image from MGDM (-dist)
    -p|--proba      probability image from MGDM (-mems)
    -l|--labels     label image from MGDM (-lbls)
    -r|--roi        region to extract (default is "cerebrum")
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'region'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
    -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                    put generated by 'call_nighresmgdm', and should have the following
                    suffixes:

                    pattern_map = {
                        "segmentation": "seg.nii.gz",
                        "levelset_boundary": "dist.nii.gz",
                        "maximum_membership": "mems.nii.gz",
                        "maximum_label": "lbls.nii.gz"
                    }

    -x|--kwargs     Extra arguments passed directly to extract_brain_region, formatted as:
                    "-x param1=val1,param2=val2"

Outputs:
    See: https://nighres.readthedocs.io/en/latest/brain/extract_brain_region.html
---------------------------------------------------------------------------------------------------
    """

    segmentation = context["seg"]
    boundary_dist = context["boundary"]
    max_probas = context["proba"]
    max_labels = context["labels"]
    roi = context.get("roi", "cerebrum")
    output_dir = context.get("output_dir", opj(os.getcwd(), "region"))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")
    kwargs = context.get("kwargs", {})
    input_dir = context.get("input_dir")

    input_kws = {}
    pattern_map = {
        "segmentation": "seg.nii.gz",
        "levelset_boundary": "dist.nii.gz",
        "maximum_membership": "mems.nii.gz",
        "maximum_label": "lbls.nii.gz"
    }

    #---------------------------------------------------------------------------------------------------
    # Read inputs to dictionary
    if input_dir:
        print(f"Loading files from {gb}{input_dir}{end}..")
        for key, pattern in pattern_map.items():
            file_path = utils.get_file_from_substring(pattern, input_dir)
            if isinstance(file_path, str):
                input_kws[key] = file_path
            else:
                raise FileNotFoundError(f"Could not find file for pattern: {pattern}")
    else:
        print("Loading manually specified files..")
        for key, val in zip(pattern_map, [segmentation, boundary_dist, max_probas, max_labels]):
            input_kws[key] = val

    [print(f" {key}: {gb}{val}{end}") for key, val in input_kws.items()]

    #---------------------------------------------------------------------------------------------------
    # Default kwargs
    defaults = {
        "save_data": True,
        "overwrite": True,
        "output_dir": output_dir,
        "file_name": output_base,
        "extracted_region": roi
    }

    for key, val in defaults.items():
        kwargs = utils.update_kwargs(kwargs, key, val)

    # combine input & kwargs
    combined_kwargs = {**input_kws, **kwargs}

    #---------------------------------------------------------------------------------------------------
    # run extract_brain_region 
    cortex = extract_brain_region(**combined_kwargs)

    utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
    print()

    #---------------------------------------------------------------------------------------------------
    # Nicer formatting of output filenames
    suff = {
        'cerebrum': 'cr',
        'left_cerebrum': 'lcr',
        'right_cerebrum': 'rcr',
        'cerebellum': 'cb',
        'cerebellum_brainstem': 'cbs',
        'subcortex': 'sub',
        'tissues(anat)': 'an',
        'tissues(func)': 'fn'
    }

    print("Rename to more BIDS'ey style")
    for i in cortex:
        for t in ['xmask', 'xproba', 'xlvl']:
            if t in cortex[i]:
                if "inside" in i:
                    suffix = f'-{t}_{suff[roi]}-wm.nii.gz'
                elif "region" in i:
                    suffix = f'-{t}_{suff[roi]}-gm.nii.gz'
                elif "background" in i:
                    suffix = f'-{t}_{suff[roi]}-csf.nii.gz'
                else:
                    continue

                fn = opj(output_dir, f"{output_base}{suffix}")
                if os.path.exists(cortex[i]):
                    print(f" {os.path.basename(cortex[i])} â†’ {gb}{os.path.basename(fn)}{end}")
                    os.rename(cortex[i], fn)

    print("Done")

if __name__ == "__main__":
    segmentation = None
    boundary_dist = None
    max_probas = None
    max_labels = None
    roi = "cerebrum"
    output_dir = opj(os.getcwd(), "region")
    output_base = "subject_acq-MP2RAGE_desc"
    input_dir = None
    kwargs = {}

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hs:b:p:l:r:o:n:i:x:",
            ["help", "seg=", "boundary=", "proba=", "labels=", "roi=", "outputdir=", "name=", "inputdir=", "kwargs="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--seg"):
            segmentation = arg
        elif opt in ("-b", "--boundary"):
            boundary_dist = arg
        elif opt in ("-p", "--proba"):
            max_probas = arg
        elif opt in ("-l", "--labels"):
            max_labels = arg
        elif opt in ("-r", "--roi"):
            roi = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-x", "--kwargs"):
            kwargs = utils.parse_kwargs_to_dict(arg)

    main(sys.argv[1:], context={
        "seg": segmentation,
        "boundary": boundary_dist,
        "proba": max_probas,
        "labels": max_labels,
        "roi": roi,
        "output_dir": output_dir,
        "output_base": output_base,
        "input_dir": input_dir,
        "kwargs": kwargs
    })
