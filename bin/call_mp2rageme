#!/usr/bin/env python

from pymp2rage import MEMP2RAGE
import os
import pathlib
import sys
import getopt
import shutil
from lazyfmri import utils
from fmriproc import image
opj = os.path.join

@utils.validate_cli_inputs(required_keys=["input_dir"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_mp2rageme

This script is a wrapper for the memp2rage object that can calculate a Unified T1-weighted image and 
a quantitative T1 map, based on the magnitude and phase-information of the two volumes of a MP2RAGE-
sequence (Marques et al., 2010). It can also further correct this map for B1 inhomogenieties using 
a B1 map (Marques et al., 2014) and calculated several parametric maps (R2*, t1map, t2*)

Usage:
  call_mp2rageme [mandatory] [arguments] [options]

Mandatory (required input):
    -i|--inputdir   project root directory with the subject-directories on which we need to run
                    the script. Should be BIDS-compliant, up until 'anat' folder

Optional (flags with defaults):
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'pymp2rage'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGEME"). '*_{suffix}.nii.gz'
                    will be added
    -l|--lower      lower bound for truncing image intensities using 'call_winsorize'. Default
                    is 0.01
    -u|--upper      upper bound for truncing image intensities using 'call_winsorize'. Default
                    is 0.99                            
    -p|--pars       json-file with custom parameter settings. Should have the following format:

                    {
                        "TR": 6.723,
                        "inv_times": [0.67, 3.68],
                        "fa": [4,4],
                        "nZ": 150,
                        "FLASH_tr": [0.0062,0.31246],
                        "echo_times": [0.006, 0.0145, 0.023, 0.0315]
                    }
                    see: $REPO_DIR/misc/mp2rageme_pars.json

Options (extra):
    -h|--help       print this help text
    -c|--mask       make INV2 mask with SPM+FSL to remove background noise induced by the combina-
                    tion of INV-images. Note that not doing this will results in patterns of noise
                    around the brain which will confuse automated segmentation softwares 
    --skip-bg       Skip background stuff (default = remove noise around brain)

Outputs:
    r2star (Nifti1Image):       Relaxation map (1/T2*)
    t2star (Nifti1Image):       T2*-weighted image
    t2starmap (Nifti1Image):    Quantitative T2* map
    t1map (Nifti1Image):        Quantitative T1 map
    t1w_uni (Nifti1Image):      Bias-field corrected T1-weighted image
    s0 (Nifti1Image):           Residual (S0) map

Example:
    call_mp2rageme \
        -i DIR_DATA_HOME/sub-01/ses-1 \
        -o DIR_DATA_DERIV/pymp2rage \
        -b sub-01_acq-MP2RAGEME

    call_mp2rageme \
        -i DIR_DATA_HOME/sub-01/ses-1 \
        -o DIR_DATA_DERIV/pymp2rage \
        -b sub-999_acq-MP2RAGEME \
        --mask

Notes:
    Assumes you ran spinoza_scanner2bids before. If not, change the required filenames in the
    script; by default, we'll look for files with 'acq-MP2RAGEME' and 'inv' in the filename. In to-
    tal, there must be 10 files: 2x INV1, 8x INV2 (mag/phase for different echo times 1,2,3,4):
    - INV1          ('inv-1_part-mag')
    - INV1ph        ('inv-1_part-phase')
    - INV2 e1-4,    ('inv-2_echo-[1-4]_part-mag')
    - INV2ph e1-4   ('inv-2_echo-[1-4]_part-phase')

---------------------------------------------------------------------------------------------------
    """

    input_dir    = context.get("input_dir")
    pars_file    = context.get("pars_file")
    output_dir   = context.get("output_dir")
    output_base  = context.get("output_base")
    do_stuff     = context.get("do_stuff")
    lower        = context.get("lower")
    upper        = context.get("upper")

    # Define paths to images
    select_fn = utils.select_files_from_bids(
        input_dir,
        filters=['inv', 'acq-MP2RAGEME']
    )

    if len(select_fn) != 10:
        raise ValueError(f"For MEMP2RAGE-reconstruction we should have 10 files; got {len(select_fn)}; looked for files containing 'inv' and 'acq-MP2RAGEME' in '{input_dir}'")

    # define MR parameters
    pars = image.define_mr_parameters(
        pars_file=pars_file,
        ups=False,
        is_mp2rage=False
    )

    print("Loading all images to the memp2rage object")
    memp2rage = MEMP2RAGE(
        inv1=select_fn[0],
        inv1ph=select_fn[1],
        inv2=[
            select_fn[2],
            select_fn[4],
            select_fn[6],
            select_fn[8]
        ],
        inv2ph=[
            select_fn[3],
            select_fn[5],
            select_fn[7],
            select_fn[9]
        ]
        **pars
    )

    # create output directory
    pathlib.Path(output_dir).mkdir(parents=True, exist_ok=True)

    # Define output file types
    file_types = ["R2starmap", "T1w", "T1map", "T2starw", "T2starmap", "S0"]
    
    # Define output file types
    file_types = {
        "suffix": ["R2starmap", "T1w", "T1map", "T2starw", "T2starmap", "S0"],
        "attr": ["r2starmap", "t1w_uni", "t1map", "t2starw", "t2starmap", "s0"]
    }

    # Generate the OUTPUT dictionary dynamically
    output_dict = {attr.lower(): opj(output_dir, f"{output_base}_{suff}.nii.gz") for attr, suff in zip(file_types["attr"], file_types["suffix"])}

    print("Creating output files")
    for key, val in output_dict.items():
        _ = image.write_pymp2rage_nifti(
            val,
            key,
            memp2rage,
            select_fn,
            is_mp2rageme=True
        )
    
    # copy original pymp2rage output which has proper intensity histograms
    src = output_dict["t1w_uni"]
    trg = opj(os.path.dirname(src), "orig.nii.gz")
    shutil.copyfile(src, trg)

    # combine FSL+SPM mask to remove pepper noise around MP2RAGE
    if do_stuff:
        spm_mask = opj(output_dir, f'{output_base}_desc-spm_mask.nii.gz')
        cmd = f"""call_createmask --input {select_fn[2]} --output {spm_mask} --t1 {output_dict["t1w_uni"]} --verbose -l {lower} -u {upper}"""
        utils.run_shell_wrapper(cmd, verb=True)

    print("Done")

if __name__ == "__main__":

    input_dir = None
    pars_file = None
    output_dir = opj(os.getcwd(), "pymp2rage")
    output_base = "subject_acq-MP2RAGEME"
    do_stuff = False
    lower = 0.01
    upper = 0.99
    
    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hc:i:o:n:l:u:p:",
            ["help", "inputdir=", "outputdir=", "name=", "mask", "pars=", "upper=", "lower="]
        )[0]
    except getopt.GetoptError:
        print("ERROR while handling arguments; did you specify an illegal/non-defined argument?")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-c", "--mask"):
            do_stuff = True
        elif opt in ("--skip-bg"):
            do_stuff = False              
        elif opt in ("-l", "--lower"):
            lower = float(arg)
        elif opt in ("-u", "--upper"):
            upper = float(arg)           
        elif opt in ("-p", "--pars"):
            pars_file = os.path.abspath(arg)

    main(context={
        "input_dir": input_dir,
        "pars_file": pars_file,
        "output_dir": output_dir,
        "output_base": output_base,
        "do_stuff": do_stuff,
        "lower": lower,
        "upper": upper
    })
