#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_dcm2niix

Wrapper for the dcm2niix to make life a little easier. In theory, it'll only require and input di-
rectory containing the files to be converted. If no output directory is specified, the script will
create a directory called INPUT/nifti and store the output there. Settings are default, but you can
edit the actual call to dcm2niix as you wish. By default, the output name will be a combination of 
the "patient name" '%n' flag, and the "protocol name" '%p'. So, if you register you subjects in the 
MR console as 'sub-xxx' or 'sub-xxx_ses-x' and your sequence (e.g., MP2RAGE) as 'acq-MP2RAGE_T1w', 
then your output files will already have BIDS-names. In case dcm2niix breaks due to catastropic er-
rors (happens with laaarge PAR/RECs), we'll attempt to convert with parrec2nii (comes as an execu-
table with nibabel). This will attempt to put the correct information in an accompanying json side-
car (not produced by parrec2nii); some information (e.g., RepetitionTime) could be missing.

Usage:
  call_dcm2niix [mandatory] [optional] [options]

Mandatory:
  -i <input>      folder containing the files to be processed. Always needed!

Optional:
  -o <output>     output folder. If empty, it will use <input folder>/nifti
  -d <depth>      search depth for dcm2niix
  -p <pattern>    pattern for file-name reconstruction (default = %n_%p, representing Patient-
                  Name & Protocol Name). You can change this, but then I don't bear any respon-
                  sibilities over the consequences in later scripts.. This option is only avai-
                  lable for 'dcm2niix' (DCM-files), not 'parrec2nii' (PAR/REC-files).
  -c <input>      Maps onto the '-z' flag from 'dcm2niix': gz compress images (y/o/i/n/3, default
                  'o') [y=pigz, o=optimal pigz, i=internal:miniz, n=no, 3=no,3D]
  -x <kwargs>     Extra arguments that will be directly passed to 'dcm2niix'/'parrec2nii'. The format
                  should be as follows: different parameters comma-separated, and parameter-value pair
                  separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                    "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                  The kwargs specified in this flag take precedent over the default args:

                  # dcm2niix
                  cmd_args=(
                    dcm2niix
                    -b y          # output JSON side cars
                    -f %n_%p      # file name pattern     (-p flag)
                    -z o          # compression           (-c flag)
                    -d 0          # search depth          (-d flag)
                    -o output_dir # output directory      (-o flag)
                    -v 1          # verbosity
                    input_dir     # input directory       (-i flag)
                  )

                  # parrec2nii
                  cmd_args=(
                    parrec2nii
                    --scaling fp  # floating point
                    --verbose     # make noise
                    --compressed  # make nii.gz, suppressed with --no-compress
                    --output-dir  # output directory      (-o flag)
                  )

Options:
  -h|--help       print this help text
  --take-avg-tr   Take the average over all TRs from the par file, rather than the first in the
                  sequence of TRs 
  --no-compress   create nii's instead of nii.gz's (default)
  --force-exec    Force execution even though converted nifti already exists

Examples:
  call_dcm2niix -i /path/to/PARRECs                     # most basic call
  call_dcm2niix -i /path/to/PARRECs -c n/--no-compress  # don't compress
  
---------------------------------------------------------------------------------------------------

USAGE

}


# Allocate input arguments to variables
#
tr_prot_flag=""
searchDepth=0
pattern="%n_%p"
compress="o"
compress_flag="--compressed"
kwargs=""
kwargs_flag=""
force_flag=""
while getopts :-:i:o:c:v:d:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        take-avg-tr)
          tr_prot_flag="--take-avg-tr"
          ;;
        no-compress)
          compress="n"
          compress_flag=""
          ;;             
        help)
          Usage && exit 0
          ;;
        force-exec)
          force_flag="--force-exec"
          ;;                       
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    i)  pathInput=${OPTARG}
          ;;
    d)  searchDepth=${OPTARG}
          ;;          
    o)  pathOutput=${OPTARG}
          ;;
    v)  version=${OPTARG}
          ;;
    p)  pattern=${OPTARG}
          ;;     
    c)  compress=${OPTARG}
          ;;    
    x)  kwargs=${OPTARG}
        kwargs_flag="-x ${kwargs}"
          ;;              
    h)  Usage && exit 0
          ;;                
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Function to extract filename from "Convert ..." line
function extract_filename() {
    line="$1"
    # Example line: Convert 592 DICOM as /some/path/sub-01_ses-1_task-garden_run-1_bold (220x220x80x592)
    # This grabs the part between "as " and the first "(" or end of line.
    filename=$(echo "$line" | sed -n 's/.*as \(.*\)(.*/\1/p' | xargs)
    if [ -z "$filename" ]; then
        # No parenthesis case (fallback, if needed)
        filename=$(echo "$line" | sed -n 's/.*as \(.*\)/\1/p' | xargs)
    fi
    echo "$filename"
}

#-----------------------------------------------------------------------------
# Function to fix compression issues
function fix_compression {
  log=${1}
  prev_line=""
  while IFS= read -r line; do
    if [[ "$line" == *"internal compressor unable to process such large files"* ]]; then
      if [[ -n "$prev_line" ]]; then
        # Previous line should contain the "Convert ..." line
        filename=$(extract_filename "$prev_line").nii

        if [[ -n "$filename" ]]; then
          if [[ -f "$filename" ]]; then
            echo "Compressing: $filename"
            gzip -f "${filename}"
          else
            echo "Warning: File does not exist: $filename"
          fi
        else
          echo "Warning: Could not extract filename from: $prev_line"
        fi
      fi
    fi
    prev_line="$line"
  done < "$log"
}

#-----------------------------------------------------------------------------
# Set default inputs/outputs
if [[ -z ${pathInput} ]]; then
  Usage
  print_error_msg "$(basename ${0})" "find" "Please specify an input folder with '-i <path>'"
  exit 1
fi

if [[ -z ${pathOutput} ]]; then
  pathOutput=${pathInput}/nifti
fi

# Determine NIfTI compression type
if [[ ${compress} =~ ^(n|y|i|3|o)$ ]]; then
  compress_type="${compress}"
else
  dcm2niix -h
  echo
  print_line -
  echo "Invalid compression option: \"${compress}\""
  echo "Accepted values: \"n\" (none), \"y\" (yes), \"i\" (input), \"3\" (3D), \"o\" (optimized)"
  echo "Leave empty to use default: \"o\" or use \"--no-compress\" to get .nii-files"
  exit 1
fi

#-----------------------------------------------------------------------------
# Run it

if [[ ! -d ${pathOutput} ]]; then
  mkdir -p ${pathOutput}
fi

log=${pathInput}/log.txt
if [[ -f ${log} ]]; then
  rm ${log}
fi

# redirect output to log-file so we can monitor catastrophic errors
n_par_files=($(find ${pathInput} -type f -iname "*par"))
if [[ ! -z ${n_par_files[@]} && ${#n_par_files[@]} -gt 0 ]]; then

  echo -e "Found ${#n_par_files[@]} PAR-files, using '${BOLD_BLUE}call_parrec2nii${RESET}'"
  
  cmd=(
    call_parrec2nii
    "${kwargs_flag}"
    "${tr_prot_flag}"
    "${compress_flag}"
    "${force_flag}"
    -i "${pathInput}"
    -o "${pathOutput}"
  )

  {
    echo "### New invocation of call_parrec2nii @$(date)"
    echo "${cmd[@]}"
    echo
  } >> "$log"
  
  # Convert using parrec2nii (adjust output handling if needed)
  print_cmd "${cmd[@]}" && eval "${cmd[@]}" >> "${log}" 2>&1

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "call_parrec2nii"
    exit 1
  fi
else

  echo "Assuming DICOM format, using 'dcm2niix'"
  
  # Turn kwargs into space-separated array
  if [[ -n "${kwargs}" ]]; then
    IFS=' ' read -r -a user_args <<< "$(echo "$kwargs" | tr ',' ' ' | tr '=' ' ')"
  else
    user_args=()
  fi

  # Convert user_args into string for matching
  arg_str="${user_args[*]}"

  # Initialize base command
  cmd_args=(dcm2niix)
  
  # Add defaults only if not already specified
  [[ ! "$arg_str" =~ "-b" ]] && cmd_args+=("-b" "y")
  [[ ! "$arg_str" =~ "-f" ]] && cmd_args+=("-f" "${pattern}")
  [[ ! "$arg_str" =~ "-z" ]] && cmd_args+=("-z" "${compress_type}")
  [[ ! "$arg_str" =~ "-d" ]] && cmd_args+=("-d" "${searchDepth}")
  [[ ! "$arg_str" =~ "-o" ]] && cmd_args+=("-o" "${pathOutput}")
  [[ ! "$arg_str" =~ "-v" ]] && cmd_args+=("-v" "1")

  # Add user-specified options
  cmd_args+=("${user_args[@]}")
  
  # Final positional input (the directory)
  cmd_args+=("${pathInput}")

  {
    echo "### New invocation of call_dcm2niix @$(date)"
    echo "${cmd_args[@]}"
    echo
  } >> "${log}"

  print_cmd "${cmd_args[@]}" && eval "${cmd_args[@]}" >> "${log}" 2>&1
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "dcm2niix"
    exit 1
  fi

fi

# scan output for internal compression errors (large files)
fix_compression "${log}"

#-----------------------------------------------------------------------------
# try to add the path to the par/dcm file to the bold/epi files for later reference
add_par_file "${pathInput}" "${pathOutput}"
