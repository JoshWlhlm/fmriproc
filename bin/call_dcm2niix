#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_dcm2niix

Wrapper for the dcm2niix to make life a little easier. In theory, it'll only require and input di-
rectory containing the files to be converted. If no output directory is specified, the script will
create a directory called INPUT/nifti and store the output there. Settings are default, but you can
edit the actual call to dcm2niix as you wish. By default, the output name will be a combination of 
the "patient name" '%n' flag, and the "protocol name" '%p'. So, if you register you subjects in the 
MR console as 'sub-xxx' or 'sub-xxx_ses-x' and your sequence (e.g., MP2RAGE) as 'acq-MP2RAGE_T1w', 
then your output files will already have BIDS-names. In case dcm2niix breaks due to catastropic er-
rors (happens with laaarge PAR/RECs), we'll attempt to convert with parrec2nii (comes as an execu-
table with nibabel). This will attempt to put the correct information in an accompanying json side-
car (not produced by parrec2nii); some information (e.g., RepetitionTime) could be missing.

Parameters
----------
  --take-avg-tr       Take the average over all TRs from the par file, rather than the first in the
                      sequence of TRs 
  -i <input folder>   folder containing the files to be processed. Always needed!
  -o <output folder>  output folder. If empty, it will use <input folder>/nifti
  -c <compress>       create nii's ("n") or nii.gz's ("o"; default)
  -v <version>        2019|2020 (2020 fails sometimes when dealing with fMRI phase data)
  -d <depth>          search depth for dcm2niix

Example
----------
  call_dcm2niix -i /path/to/PARRECs         # most basic call
  call_dcm2niix -i /path/to/PARRECs -c n    # don't compress
  call_dcm2niix -i /path/to/PARRECs -v dev  # use developmental version

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}


# Allocate input arguments to variables
#
prot_flag=""
searchDepth=0
while getopts :-:i:o:c:v:d: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        take-avg-tr)
          prot_flag="--take-avg-tr"
          ;;            
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    i)  pathInput=${OPTARG}
          ;;
    d)  searchDepth=${OPTARG}
          ;;          
    o)  pathOutput=${OPTARG}
          ;;
    c)  compress=${OPTARG}
          ;;
    v)  version=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi


#-----------------------------------------------------------------------------
# Function to extract filename from "Convert ..." line
function extract_filename() {
    line="$1"
    # Example line: Convert 592 DICOM as /some/path/sub-01_ses-1_task-garden_run-1_bold (220x220x80x592)
    # This grabs the part between "as " and the first "(" or end of line.
    filename=$(echo "$line" | sed -n 's/.*as \(.*\)(.*/\1/p' | xargs)
    if [ -z "$filename" ]; then
        # No parenthesis case (fallback, if needed)
        filename=$(echo "$line" | sed -n 's/.*as \(.*\)/\1/p' | xargs)
    fi
    echo "$filename"
}

#-----------------------------------------------------------------------------
# Function to fix compression issues
function fix_compression {
  log=${1}
  prev_line=""
  while IFS= read -r line; do
    if [[ "$line" == *"internal compressor unable to process such large files"* ]]; then
      if [[ -n "$prev_line" ]]; then
        # Previous line should contain the "Convert ..." line
        filename=$(extract_filename "$prev_line").nii

        if [[ -n "$filename" ]]; then
          if [[ -f "$filename" ]]; then
            echo "Compressing: $filename"
            gzip -f "${filename}"
          else
            echo "Warning: File does not exist: $filename"
          fi
        else
          echo "Warning: Could not extract filename from: $prev_line"
        fi
      fi
    fi
    prev_line="$line"
  done < "$log"
}
#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Set default inputs/outputs
if [[ -z ${pathInput} ]]; then
  echo "ALWAYS NEED AT LEAST AN INPUT FOLDER"
  Usage >&2
  exit 1
fi

if [[ -z ${pathOutput} ]]; then
  pathOutput=${pathInput}/nifti
fi

# -z : gz compress images (y/o/i/n/3, default n) [y=pigz, o=optimal pigz, i=internal:zlib, n=no, 3=no,3D]
if [[ -z ${compress} ]]; then
  NIIGZ="o"
else
  if [[ ${compress} == "n" ]] || [[ ${compress} == "y" ]] || [[ ${compress} == "i" ]] || [[ ${compress} == "3" ]] || [[ ${compress} == "o" ]]; then
    NIIGZ=${compress}
  else
    dcm2niix -h
    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "You specified option \"${compress}\", acceptable values are: \"n\", \"y\", \"i\", \"3\", \"o\""
    echo "Or leave empty for the default \"o\" (= optimized compression)"
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# Run it

if [[ ! -d ${pathOutput} ]]; then
  mkdir -p ${pathOutput}
fi

log=${pathInput}/log.txt
if [[ -f ${log} ]]; then
  rm ${log}
fi

# redirect output to log-file so we can monitor catastrophic errors
n_par_files=(`find ${pathInput} -type f -iname "*par"`)
if [[ ! -z ${n_par_files[@]} && ${#n_par_files[@]} -gt 0 ]]; then

  echo "Found ${#n_par_files[@]} PAR-files, using 'parrec2nii'"
  cmd="call_parrec2nii ${prot_flag} -i ${pathInput} -o ${pathOutput}"
  {
    echo "### New invocation of call_parrec2nii @$(date)"
    echo "${cmd}"
    echo
  } >> "$log"
  
  # Convert using parrec2nii (adjust output handling if needed)
  ${cmd} >> "$log" 2>&1

else
  echo "Assuming DICOM format, using 'dcm2niix'"
  cmd_args=(
    -b y
    -f %n_%p
    -z ${NIIGZ}
    -d ${searchDepth}
    -o ${pathOutput}
    -v 1
    "${pathInput}"
  )

  cmd="dcm2niix ${cmd_args[*]}"
  {
    echo "### New invocation of call_dcm2niix @$(date)"
    echo "${cmd}"
    echo
  } >> "$log"

  # Assume DICOM and use dcm2niix
  ${cmd} >> "$log" 2>&1

fi

# scan output for internal compression errors (large files)
fix_compression ${log}

#-----------------------------------------------------------------------------
# try to add the path to the par/dcm file to the bold/epi files for later reference
source call_bashhelper
add_par_file ${pathInput} ${pathOutput}
