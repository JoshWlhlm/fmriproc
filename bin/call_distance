#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_distance

Wrapper for FreeSurfer's mris_pmake. Calculates the distance between <startVertex> & <endVertex> 
using Dykstra's algorithm

Usage:
  call_distance [options] <subject> <output>

Arguments:
  -s <start>      vertex to calculate distances to
  -e <end>        vertex to calculate distance to <start>
  -l <label>      label image to extract vertices from        [default = V1_exvivo.thresh]

Options:
  -h|--help       print this help text
  --lh|--rh       which hemisphere to process                 [default = "lh"]
  --fiducial      use fiducial (mid-thickness) surface        [default]
  --white         use WM/GM boundary surface (?h.white)
  --pial          use GM/CSF boundary surface (?h.pial)

Positional:
  subject         subject ID as used in the FreeSurfer reconstruction
  output          output filename (ideally json file)

Example:
  call_distance --lh --fiducial -s 1053 -e 784 sub-001 distance.json
  call_distance --lh -s 1053 -l V1_exvivo.thresh sub-001 distance.json

---------------------------------------------------------------------------------------------------

USAGE

}

hemi="lh"
fiducial=1
white=0
pial=0
label="V1_exvivo.thresh"
end_v=""
while getopts :-:hs:e:l: arg; do
  case $arg in
    -)
      case "${OPTARG}" in
        lh)
          hemi="lh"
          ;; 
        rh)
          hemi="rh"
          ;;
        white)
          white=1
          ;;
        pial)
          pial=1
          ;;
        fiducial)
          fiducial=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    s)  start_v="${OPTARG}"
        ;;
    l)  label="${OPTARG}"
        ;; 
    e)  end_v="${OPTARG}"
        ;;
    h)  Usage && exit 0
          ;; 
  esac
done


if [[ $# -lt 1 ]]; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
SUB="${@:$OPTIND:1}"
OUT="${@:$OPTIND+1:1}"

if [[ -z "${SUB}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify subject ID"
  exit 1
fi

if [[ -z "${OUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# decide surface type
if [[ ${fiducial} -eq 1 ]]; then
  SURF="fiducial"
fi

if [[ ${white} -eq 1 ]]; then
  SURF="white"
fi

if [[ ${pial} -eq 1 ]]; then
  SURF="pial"
fi

#-----------------------------------------------------------------------------
# start
start_timer "call_distance; distance estimation using Dykstra's algorithm"
echo "sub   = ${SUB}"
echo "surf  = ${SURF}"
echo "hemi  = ${hemi}"
echo "label = ${label}"
echo "start = ${start_v}"
echo "end   = ${end_v}"
echo "out   = ${OUT}"

#-----------------------------------------------------------------------------
# clean up
function clean {
  rm -r $PWD/M_weights_distance.mat 2>/dev/null
  rm -r $PWD/options.txt 2>/dev/null
  rm -r $PWD/stdout.log 2>/dev/null
  rm -r $PWD/user_msg.log 2>/dev/null
  rm -r $PWD/dijk.label 2>/dev/null
  rm -r $PWD/cost.txt 2>/dev/null
}

#-----------------------------------------------------------------------------
# read vertices 
function read_vertices {
  PYTHON_CODE=$(cat <<END
from cxutils import optimal;
import numpy as np;
nbr = optimal.Neighbours(
    subject="${SUB}",
    verbose=False
);
lbl_vert = np.where(nbr.${hemi}_roi_mask)[0];
print(list(lbl_vert))
END
  )

  echo $PYTHON_CODE
}

#-----------------------------------------------------------------------------
# redo vertices
function fill_vertices {
  PYTHON_CODE=$(cat <<END
import json;
empty_verts = [];
with open('${1}', 'r') as f:
    data = json.load(f);
for key in list(data.keys()):
    if not isinstance(data[key], (int,float)):
        empty_verts.append(int(key))
print(empty_verts);
END
  )

  echo "Filling empty vertices.."
  # keep iterating through the empty vertices until there's no empty vertices left
  count=0
  while true; do
    res=("$(python -c "${PYTHON_CODE}")")
    tmp_vertices=$(echo ${res} | cut -d"[" -f2 | cut -d"]" -f1)
    IFS=', ' read -r -a empty_verts <<< "${tmp_vertices}"
    unset IFS
    if [[ ${#empty_verts[@]} -eq 0 ]]; then
      break
    else
      ((count++))
      echo " Iter #${count}: ${#empty_verts[@]} vertices left"
      for vert in ${empty_verts[@]}; do
        dykstra_distance \
          "${SUB}" \
          "${hemi}" \
          "${SURF}" \
          "${start_v}" \
          "${vert}" \
          "${OUT}"
        
        # clean up
        clean
      done
    fi
  done
  echo "Done after ${count} iteration(s)"
}

#-----------------------------------------------------------------------------
# Start loop
if [[ ! -z ${end_v} ]]; then
  # dykstra_distance is in call_bashhelper
  dykstra_distance \
    "${SUB}" \
    "${hemi}" \
    "${SURF}" \
    "${start_v}" \
    "${end_v}" \
    "${OUT}"

  # clean up
  clean
else
  # loop through label vertices
  if [[ ! -z ${label} ]]; then

    if [[ ! -f ${OUT} ]]; then
      res=("$(python -c "$(read_vertices)")")
      lbl_vertices=$(echo ${res} | cut -d"[" -f2 | cut -d"]" -f1)
      IFS=', ' read -r -a vertices <<< "${lbl_vertices}"
      unset IFS
      echo "${hemi}.${label} contains ${#vertices[@]} vertices"
      for vert in ${vertices[@]}; do
        if [[ ${vert} != ${start_v} ]]; then
          dykstra_distance \
            "${SUB}" \
            "${hemi}" \
            "${SURF}" \
            "${start_v}" \
            "${vert}" \
            "${OUT}"
        fi

        # clean up
        clean
      done
    fi
    # iteratively fill vertices where process exited with non-zero status
    fill_vertices "${OUT}"
  fi 
fi

# outro
end_timer
