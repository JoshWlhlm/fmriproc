#!/usr/bin/env python

import os
import sys
import getopt
from lazyfmri import (
    utils,
    dataset
)
opj = os.path.join

@utils.validate_cli_inputs(required_keys=["input_dir"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_onsets2fsl

This script converts tsv-files from ExpTools2 to 3-column event-files that are compatible with FSL.
Just give a path, and all tsv-files found will be convertedor a very select part of the dataset. 

Usage:
  call_refit [arguments] [options]

Mandatory (required input):
    -i|--in         path representing a *tsv output file from ExpTools or a directory containing
                    such *tsv files.

Optional (flags with defaults):
                    Defaults to DIR_DATA_HOME as per spinoza_setup; can also by a tsv-file
    -o|--out        output directory containing the topup'ed data. Easiest is to give the fMRIPrep
                    folder, it will be formatted accordingly automatically.
                    Defaults to <input_dir>/events
    --phase-onset   flag to define the phase from which to extract the onset files. Usually, you
                    have an experiment with 2 phases: stimulus (0) and inter-trial intervals (1).
                    Sometimes these phases are swapped, so you can use this flag to tell the function
                    which phase was the stimulus onset

Options (extra):
    -h|--help       print this help text
    --verbose       turn on verbose
    --ix            take number of ev as output name, rather than actual event name. This can be
                    useful in cases where your events consist of long float numbers
    
Examples:
    # simple call
    call_onsets2fsl --in $DIR_DATA_HOME/sub-001/ses-2

    # use event index as output name
    call_onsets2fsl --in $DIR_DATA_HOME/sub-001/ses-2 --ix

    # relevant onset time was in phase=0
    call_onsets2fsl \
        --in $DIR_DATA_HOME/sub-001/ses-2/sub-001_task-stim_run-1_events.tsv \
        --phase-onset 0

---------------------------------------------------------------------------------------------------
"""

    input_dir       = context.get("input_dir")
    output_dir      = context.get("output_dir")
    verbose         = context.get("verbose")
    duration        = context.get("duration")
    add_button      = context.get("add_button")
    maxdepth        = context.get("maxdepth")
    exclude         = context.get("exclude")
    add_search      = context.get("add_search")
    button_duration = context.get("button_duration")
    from_event      = context.get("from_event")
    phase_onset     = context.get("phase_onset")

    
    # parse out comma's
    if isinstance(add_search, str):
        if "," in add_search:
            add_search = add_search.split(",")
    
    if isinstance(exclude, str):
        if "," in exclude:
            exclude = exclude.split(",")
    
    # check if input is file or directory
    if os.path.isfile(input_dir):
        input_dir = os.path.abspath(input_dir)
        tsv_files = input_dir

        # set default output directory
        if not isinstance(output_dir, str):
            output_dir = opj(os.path.dirname(input_dir), "events")

    else:

        # set default output directory
        if not isinstance(output_dir, str):
            output_dir = opj(input_dir, "events")

        # find all tsv- 
        tsv_files = utils.FindFiles(
            input_dir,
            extension="tsv",
            exclude=exclude,
            filters=add_search
        ).files

    # make directory
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    if isinstance(tsv_files, list):
        if len(tsv_files) < 1:
            raise ValueError(f"Could not find files ending with '*tsv' in '{input_dir}' (exclude = {exclude} | filters = {add_search})")
        
    # plop in object
    exp_ = dataset.ParseExpToolsFile(
        tsv_files, 
        use_bids=True, 
        stim_duration=duration,
        verbose=verbose,
        button=add_button,
        button_duration=button_duration,
        phase_onset=phase_onset
    )

    # save as 3 column format
    exp_.onsets_to_fsl(
        output_dir=output_dir,
        duration=duration,
        from_event=from_event
    )
    
if __name__ == "__main__":

    input_dir = None
    output_dir = None
    verbose = False
    duration = "stim"
    add_button = False
    maxdepth = None
    exclude = None
    add_search = None
    button_duration = 1
    from_event = True
    phase_onset = 1

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:o:",
            ["help", "in=", "out=", "verbose", "button", "maxdepth=", "exclude=", "filters=", "duration=", "button-duration=","ix", "phase-onset="]
        )[0]
    except getopt.GetoptError:
        print("ERROR while reading arguments; did you specify an illegal argument?")
        print(main.__doc__)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--in"):
            input_dir = arg
        elif opt in ("-o", "--out"):
            output_dir = arg
        elif opt in ("-d", "--duration"):
            duration = float(arg)
        elif opt in ("--verbose"):
            verbose = True
        elif opt in ("--button"):
            add_button = True
        elif opt in ("--maxdepth"):
            maxdepth = int(arg)
        elif opt in ("--exclude"):
            exclude = arg
        elif opt in ("--filters"):
            add_search = arg            
        elif opt in ("--button-duration"):
            button_duration = float(arg)  
        elif opt in ("--ix"):
            from_event = False
        elif opt in ("--phase-onset"):
            phase_onset = int(arg)

    main(context={
        "input_dir": input_dir,
        "output_dir": output_dir,
        "verbose": verbose,
        "duration": duration,
        "add_button": add_button,
        "maxdepth": maxdepth,
        "exclude": exclude,
        "add_search": add_search,
        "button_duration": button_duration,
        "from_event": from_event,
        "phase_onset": phase_onset
    })
