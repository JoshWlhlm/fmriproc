#!/usr/bin/env python

import os
import sys
import nibabel as nb
from scipy import ndimage
opj = os.path.join

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_dilate

Dilate a binary mask using scipy.ndimage. This script performs a morphological dilation on the 
input image, which is useful for extending labeled regions in a mask, such as brain regions or 
tissue classes in neuroimaging analyses.

Arguments:
  <input img>     path to input image (must be a binary mask, e.g. 0s and 1s)
  <output img>    path to output image (dilated version of input)
  <iterations>    number of iterations to apply the dilation (higher = more dilation)
  <mask>          path to optional mask image that restricts dilation to certain areas.
                  If provided, only voxels within the mask will be modified. This must be a 
                  binary mask (same shape as input image)

Usage:
  call_dilate <input> <output> <iterations> [mask]

Example:
  call_dilate input_mask.nii.gz output_mask_dilated.nii.gz 3
  call_dilate input_mask.nii.gz output_mask_dilated.nii.gz 5 roi_mask.nii.gz

Notes:
  - The input image should be binary (0/1 values).
  - The output will be written as a NIfTI file with the same affine and header as the input.
  - If the optional mask is given, the dilation will only affect the region defined by the mask.

---------------------------------------------------------------------------------------------------
    """

    input   = None
    output  = None
    nr_iter = 2
    mask    = None

    if len(argv) < 3:
        raise ValueError("Expected at least 3 arguments: input, output, nr_iter")

    input   = argv[0]
    output  = argv[1]
    nr_iter = int(argv[2])
    mask    = argv[3] if len(argv) > 3 else None

    img = nb.load(input)

    if mask:
        mask = nb.load(mask).get_fdata()

    # cmd
    dilated = ndimage.binary_dilation(
        img.get_fdata(),
        iterations=nr_iter,
        mask=mask
    )
    
    # write to file
    nb.Nifti1Image(
        dilated,
        affine=img.affine,
        header=img.header
    ).to_filename(output)

if __name__ == "__main__":
    main(sys.argv[1:])
