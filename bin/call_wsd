#!/bin/bash

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_wsd

WSD stands for [W]insorizing Re[s]caling [D]atatype. This script takes an input, winsorizes the
image intensities, rescales them to a certain range (e.g., [0,4095]), and sets the datatype to
uint16.

Options:
    -l <lower>      lower percentile (default = 0.01) for call_winsorize
    -u <upper>      upper percentile (default = 0.99) for call_winsorize
    -m <max val>    rescale to this maximum value. Defaults to 4095 for T1w
    -b <bins>       number of bins to use (default = 256)

Positional arguments
    <input image>   input image

Usage:
 call_wsd sub-01_acq-MPRAGE_T1w.nii.gz sub-01_acq-MPRAGE                   # standard
 call_wsd -l 0.05 -u 0.95 sub-01_acq-MPRAGE_T1w.nii.gz sub-01_acq-MPRAGE  # aggressive

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

lower=0.01
upper=0.99
min_value=0
max_value=4095
n_bins=256
# Check for subject & session flags
while getopts hm:u:l:b: argument
do
  case ${argument} in
    l)  lower=${OPTARG}
          ;;
    u)  upper=${OPTARG}
          ;; 
    b)  n_bins=${OPTARG}
          ;;                    
    m)  max_value=${OPTARG}
          ;;      
  esac
done

in="${@:$OPTIND:1}"
in_file=$(readlink -f ${in})
if [[ ! -f ${in_file} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "File \"${in_file}\" does not exist"
  exit 1
fi

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

# truncate image intensities
echo -e "Winsorizing image intensities with [${BOLD_RED}${lower}${RESET},${BOLD_RED}${upper}${RESET}] and ${n_bins} bins"
cmd="call_winsorize -b ${n_bins} -l ${lower} -u ${upper} ${in_file}"
print_cmd "${cmd}" && eval "${cmd}"

if [[ $? -ne 0 ]]; then
  print_error_msg "$(basename ${0})" "call_winsorize"
  exit 1
fi

# rescale clipped image
echo -e "Rescaling image to [${BOLD_RED}0${RESET},${BOLD_RED}${max_value}${RESET}]"
cmd="call_rescale ${in_file} 0 ${max_value}"
print_cmd "${cmd}" && eval "${cmd}"

if [[ $? -ne 0 ]]; then
  echo
  print_line -  
  print_error_msg "$(basename ${0})" "call_rescale"
  exit 1
fi

# make integer to reduce file size
echo -e "Set dtype to ${BOLD_RED}UINT16${RESET}"
cmd="call_setdtype ${in_file}"
print_cmd "${cmd}" && eval "${cmd}"

if [[ $? -ne 0 ]]; then
  echo
  print_line -  
  print_error_msg "$(basename ${0})" "call_setdtype"
  exit 1
fi
