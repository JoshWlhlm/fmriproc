#!/usr/bin/env python

import os
import sys
import getopt
import pathlib
from nilearn import image
from scipy import ndimage
from lazyfmri import utils
opj = os.path.join
rb = f"{utils.color.RED}{utils.color.BOLD}"
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
bb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["subject"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_gdhmasking

This script masks the input T1w-image according to the method from Gilles. You can find the original 
at https://github.com/VU-Cog-Sci/mp2rage_preprocessing/blob/master/analysis/mask_mp2rage.py. If no 
T1w image is specified, we'll iteratively look through the following directories: 'denoised', 'py-
mp2rage', then 'DIR_DATA_HOME'. Default INV2-image will be read from 'DIR_DATA_HOME/<subject>/<ses-
sion>/anat', default mask folder is DIR_DATA_DERIV/manual_masks (see linescanning/shell/spinoza_set
up) where these variables point to.

Usage:
  call_gdhmasking [mandatory] [arguments] [options]

Mandatory (required input):
  -s|--subj         subject number

Optional (flags with defaults):  
  -n|--ses        session number
  -i|--inv        second inversion image (defaults to ["inv-2", "part-mag", ".nii.gz"] in DIR_
                  DATA_HOME/<subject>/<session>/anat)
  -t|--t1         T1-weighted image
  -d|--masks      Directory containing the following masks:
                    - Dura mask    '_desc-cat_dura'/'_desc-dura'/'_desc-dura_dil'
                    - T1w mask     '_desc-bet_mask'
                    - Sinus mask   '_desc_sagittalsinus'/'_desc-mni_sinus'
  -o|--output     Output basename (leave empty to overwrite inputs = default). This will cause the 
                  T1w-masked image to end up in the same folder as the mask itself! Just leave it 
                  empty..
                    - masked T1w: suffixed with _masked.nii.gz
                    - mask:       suffixed with _brainmask.nii.gz

Options (extra):
  -h|--help       print this help text
  --no-manual     Do not do any further manual edits; use the masks as is

Outputs:
  - masked T1w image
  - brainmask

Example:
  call_gdhmasking \
    --sub sub-001 \
    --ses 1 \
    --inv inv2.nii.gz \
    --t1 T1w.nii.gz \
    --masks /dir/with/masks

---------------------------------------------------------------------------------------------------
    """

    subject     = context.get("subject")
    ses         = context.get("ses")
    inv2        = context.get("inv2")
    t1w_fn      = context.get("t1w_fn")
    masks       = context.get("masks")
    output      = context.get("output")
    manual      = context.get("manual")
    inv2_mask   = context.get("inv2_mask")
    inside      = context.get("inside")

    # set subject        
    if subject is None:
        raise ValueError("Need at the bare minimum at subject ID")

    # set base name/paths based on the presence of session
    if ses is None:
        sub_dir = subject
        base = f"{subject}"
    else:
        sub_dir = opj(subject, f'ses-{ses}')
        base = f"{subject}_ses-{ses}"

    # bids_anat folder
    proj_dir = os.environ.get("DIR_DATA_HOME")
    bids_anat = opj(
        proj_dir,
        sub_dir,
        "anat"
    )

    # This stuff will create some default options if they are left empty. It assumes that you have the variables
    # from spinoza_setup available in your environment. If not, it will throw a key-error
    if inv2 is None:
        inv2 = utils.get_file_from_substring(
          ["inv-2", "part-mag", ".nii.gz"], 
          bids_anat,
          exclude="space-"
        )

    acq = os.environ.get("DATA")
    acq_tag = ""
    if acq is not None:
        acq_tag = f"acq-{acq}_"
        out_base = f"masked_{acq.lower()}"
    else:
        out_base = "masked_anat"

    if t1w_fn is None:
        data_proj = opj(proj_dir)
        
        # try to iteratively search for T1w; first 'denoising', then 'pymp2rage', finally 'DIR_DATA_HOME'
        if isinstance(data_proj, str):
            
            for ii in ["denoised", "pymp2rage", "bids"]:
                if ii != "bids":
                    search_dir = opj(
                        data_proj,
                        "derivatives",
                        ii,
                        sub_dir
                    )
                else:
                    search_dir = opj(data_proj, sub_dir, "anat")

                if os.path.exists(search_dir):
                    t1w_fn = utils.get_file_from_substring(
                        [acq_tag, "T1w.nii.gz"],
                        search_dir,
                        exclude="space-"
                    )
                    
                    # keep looking until we find a string
                    if isinstance(t1w_fn, str):
                        if os.path.exists(t1w_fn):
                            break

    if masks is None:
        masks = opj(os.environ['MASKS'], sub_dir)

    if output is None:
        masked_out = opj(
            os.environ.get('DIR_DATA_DERIV'), 
            out_base,
            sub_dir, 
            "anat", 
            f"{base}_{acq_tag}desc-masked_T1w.nii.gz"
        )

        mask_out = opj(
            os.environ.get('MASKS'), 
            f"masked_{acq_tag.lower()}",
            sub_dir, 
            f"{base}_{acq_tag}desc-brainmask.nii.gz"
        ) 

        mask_out = opj(
            masks,
            f"{base}_{acq_tag}desc-brainmask.nii.gz")
    else:
        masked_out = output + "masked_T1w.nii.gz"
        mask_out = output + "brainmask.nii.gz"

    # Start procedure
    utils.verbose("Starting procedure ..", True)

    all_masks = {}
    for j in os.listdir(masks):
        for i in ['cat_dura', 'dura_orig', 'dura_dil', 'cat_mask', 'spm_mask', '-outside', 'sinus', 'inside']:
            if i in j:
                # account for scenarios with/without acq-MP(2)RAGE(ME) tags
                if len(acq_tag)>0:
                    if os.environ.get("DATA").upper() in j:
                        all_masks[i] = opj(masks, j)
                else:
                    all_masks[i] = opj(masks, j)

    # Try to find a valid dura mask in priority order
    dura_mask = utils.get_first_existing(
        all_masks,
        ['dura_dil', 'cat_dura', 'dura_orig'],
    )
    
    if not isinstance(dura_mask, str):
        raise FileNotFoundError(
            "Could not find any dura image. It's most likely you don't have a T2w-image, so run spinoza_dura (module 11)\n"
            " - If you do have a T2-image, run spinoza_registration (module 05b) and spinoza_sinusfrommni (module 7), to create a dura mask\n"
            " - If you do not have INV2-images, but you do have a T2w and ran module 07, then copy the 'sinus_mni'-file as 'cat_dura'"
        )

    # Try to find a valid T1w mask in priority order
    t1w_mask = utils.get_first_existing(
        all_masks,
        ['cat_mask', 'gdh_mask'],
    )

    # get spm mask
    inv2_mask = utils.get_first_existing(
        all_masks,
        ['spm_mask'],
    )

    # get outside mask
    outside = utils.get_first_existing(
        all_masks,
        ['-outside', 'sinus'],
        fallback=dura_mask,
        msg=f"Could not find mask with '{rb}sinus{end}' in '{masks}'. Setting 'dura'-mask as 'sinus'-mask"
    )

    # get inside mask
    inside = utils.get_first_existing(
        all_masks,
        ['inside'],
    )

    utils.verbose("Loading in masks", True)
    for i,t in zip(
        [dura_mask, t1w_mask, outside, inside, inv2_mask], 
        ["dura", "t1w", "outside", "inside", "inv2"]):
        if isinstance(i, str):
            utils.verbose(f" {t}: {gb}{i}{end}", True)

    utils.verbose("Fetching structural files", True)
    for i,t in zip([inv2, t1w_fn], ["inv2", "T1w"]):
        if isinstance(i, str):
            utils.verbose(f" found: {gb}{i}{end}", True)
        else:
            utils.verbose(f" missing '{rb}{t}{end}'-file..", True)

    # create output directory
    if not os.path.exists(os.path.dirname(masked_out)):
        pathlib.Path(os.path.dirname(masked_out)).mkdir(parents=True, exist_ok=True)

    # refine brain mask with inside and inv2-masks
    utils.verbose(f"Refine brain mask with {rb}inside{end} and {rb}inv2{end}-masks", True)
    if inside is not None:
        t1w_mask = image.math_img(
            '(t1w_mask + inside) > 0',
            t1w_mask=t1w_mask,
            inside=inside
        )

    if inv2_mask is not None:
        t1w_mask = image.math_img(
            '(t1w_mask + inv2) > 0',
            t1w_mask=t1w_mask,
            inv2=inv2_mask
        )                                    
                       
    # create outside-mask             
    outside_fn = opj(masks, f"{base}_{acq_tag}desc-outside.nii.gz")
    if not "-outside" in outside:

        utils.verbose(f"Creating {rb}outside{end} mask: {gb}{outside_fn}{end}", True)

        if not "dura_dil" in dura_mask:
            # Dilate dura mask
            dilated_dura_mask = ndimage.binary_dilation(
                image.load_img(dura_mask).get_fdata(),
                iterations=2
            )

            dilated_dura_mask = image.new_img_like(dura_mask, dilated_dura_mask)

            # Make a mask of dilated dura, but only outwards
            dilated_dura_mask = image.math_img(
                '(dilated_dura_mask - (t1w_mask - dura_mask)) > 0',
                t1w_mask=t1w_mask,
                dura_mask=dura_mask,
                dilated_dura_mask=dilated_dura_mask
            )

            if inside:
                dilated_dura_mask = image.math_img(
                    'dilated_dura_mask - inside > 0',
                    dilated_dura_mask=dilated_dura_mask,
                    inside=inside)
                
            dura_fn = opj(os.path.dirname(mask_out), f"{base}_{acq_tag}desc-dura_dilated.nii.gz")
            dilated_dura_mask.to_filename(dura_fn)
            dura_mask = dura_fn

        # Create one 'outside' mask consisting of dilated dura mask and sinus
        outside = image.math_img(
            '(dura + sinus) > 0',
            dura=dura_mask,
            sinus=outside)

        outside.to_filename(outside_fn)

        # copy header
        cmd = f"call_copyheader {t1w_fn} {outside_fn}"
        utils.run_shell_wrapper(
            cmd,
            f"Copying geometry from input {rb}T1w{end}-image",
            verb=True
        )

        # allow manual edits
        if manual:
            utils.launch_itksnap("-g", t1w_fn, "-s", outside_fn)

    # Stuff like dura should be put to 0, not just multiplied with INV2
    utils.verbose("Set sagittal sinus and dura stuff to zero", True)
    t1w = image.math_img(
        't1w * (np.ones_like(t1w) - outside)',
        t1w=t1w_fn,
        outside=outside_fn
    )

    t1w_mask = image.math_img(
        't1w_mask - outside > 0',
        t1w_mask=t1w_mask,
        outside=outside_fn
    )

    t1w_mask.to_filename(mask_out)

    # final masking
    if inv2 is not None:
        utils.verbose(f"Masking T1w with INV2 and T1w-mask (same as {bb}call_rmbackground{end})", True)
        image.math_img(
            't1w * t1w_mask * np.mean(inv2[t1w_mask == 1]/np.max(inv2)) + t1w * inv2/np.max(inv2) * (1-t1w_mask)',
            t1w=t1w,
            t1w_mask=t1w_mask,
            inv2=inv2
        ).to_filename(masked_out)
    else:
        t1w.to_filename(masked_out)

    utils.verbose(f"{bb}call_gdhmasking{end} completed; wrote {gb}{masked_out}{end}", True)

if __name__ == "__main__":

    subject = None
    ses = None
    inv2 = None
    t1w_fn = None
    masks = None
    output = None
    manual = True
    inv2_mask = None
    inside = None

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hs:n:i:t:m:d:o:",
            ["help", "sub=", "ses=", "inv=", "t1=", "masks=", "output=", "no-manual"]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg
        elif opt in ("-n", "--ses"):
            ses = arg
        elif opt in ("-i", "--inv"):
            inv2 = arg
        elif opt in ("-t", "--t1"):
            t1w_fn = arg
        elif opt in ("-d", "--masks"):
            masks = arg
        elif opt in ("-o", "--output"):
            output = arg
        elif opt in ("--no-manual"):
            manual = False

    main(context={
        "subject": subject,
        "ses": ses,
        "inv2": inv2,
        "t1w_fn": t1w_fn,
        "masks": masks,
        "output": output,
        "manual": manual,
        "inv2_mask": inv2_mask,
        "inside": inside
    })
