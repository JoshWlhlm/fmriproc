#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antsapplytopoints

This script is a wrapper that makes the call to antsApplyTransformsToPoints a little easier. The 
idea of antsApplyTransformsToPoints is to provide a .csv file containing at least x,y,z,t header
and the coordinates in LPS-convention and convert it to a coordinate in a new space given a trans-
formation matrix. Very handy if you just want to warp coordinates instead of images.

Steps to perform:
Let's say you have a coordinate in space 1 and would like to get the coordinate in space 2:
  1.) Create a warp-file with call_antsregistration with space 2 as <ref> and space 1 as <mov> 
      (e.g., from-ses1_to-ses2.mat)
  2.) Create a chicken-file with call_antsmakechicken coord point_in_space1.csv (if your point is 
      in LPS already, specify 'lps' after 'point_in_space1.csv')
  3.) Run call_antsapplytopoints point_in_space1.csv point_in_space2.csv from-ses1_to-ses2.mat
  4.) "point_in_space2.csv" will now contain the LPS-coordinate in space 2. 

Note: there's functions in play to do this with python only as well. Below the functions associa-
ted with each step:
  1.) fmriproc.transform.ants_registration()
  2.) lazyfmri.utils.make_chicken_csv()
  3.) fmriproc.transform.ants_applytopoints
  4.) lazyfmri.utils.read_chicken_csv()

Usage:
  call_antsapplytopoints [arguments] [options] <input csv|coord> <output csv> <warp file>

Arguments:
  <-d dimension>  image dimensions (default = 3)

Options:
  -h|--help       print this help text
  -i|--invert     invert selected <warp file> (no argument required). Paradoxially, if you have a
                  coordinate in space B that needs to go to space A, and the warp describes the
                  transformation from A to B, you do NOT need to invert the matrix!
  --ras           input coordinate is RAS (default)
  --lpi           input coordinate is LPI
  --coord         print the coordinate to the terminal
  --keep          if <input> is a coordinate and a tmp.csv file is created, it's deleted by de-
                  fault. Unless this flag is specified. Then the file is retained

Positional:
  <input csv>     Input file/coordinate:     
                    - file containing coordinate that we need to warp (NEEDS TO BE LPS!!). If your 
                      coordinate comes straight from FreeSurfer/Pycortex, it's in RAS convention. 
                      If that's the case, make sure to use 'call_antsmakechicken <coord> 
                      <filename> RAS'!
                    - You can also specify a comma-separated coordinate in any space (use --ras/
                      --lpi), in which case a temporary chicken file is produced. The coordinate 
                      must be in the format \"-8.38654,-93.1835,-39.7082\" WITH THESE SLASHES TO 
                      AVOID THAT THE ARGUMENT HANDLES THINKS THE COORDINATE IS A FLAG !!
  <output csv>    file containing the coordinate in the new space
  <warp files>    all warp files in order of application; if multiple warp files

Example:
  # point A to point B with warp B>A = DO NOT INVERT MATRIX
  call_antsapplytopoints point_in_space1.csv point_in_space2.csv from-space2_to-space1.mat

  # point A to point B with warp A>B = INVERT MATRIX
  call_antsapplytopoints -i point_in_space1.csv point_in_space2.csv from-space1_to-space2.mat

  # print output coordinate
  call_antsapplytopoints \\
    --coord \\
    -i \\
    point_in_space1.csv \\
    point_in_space2.csv \\
    from-space1_to-space2.mat
  
  # input RAS coordinate (it assumes RAS-coordinate, unless --lps is specified)
  call_antsapplytopoints \\
    --invert \\
    \"-8.38654,-93.1835,-39.7082\" \\
    point_in_space2.csv \\
    from-space1_to-space2.mat  

  # input LPS coordinate
  call_antsapplytopoints \\
    --lps \\
    --invert \\
    \"8.38654,93.1835,-39.7082\" \\
    point_in_space2.csv \\
    from-space1_to-space2.mat  

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
INVERT=0
trafo_type="ras"
return_coord=0
verb=0
keep_tmp=0
while getopts :-:hid: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in
        ras)
          trafo_type="ras"
          ;;
        lps)
          trafo_type="lps"
          ;;
        coord)
          return_coord=1
          ;; 
        verbose)
          verb=1
          ;; 
        keep)
          keep_tmp=1
          ;;
        invert)
          INVERT=1
          ;;
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    i)  INVERT=1
          ;;
    d)  DIMENSION="${OPTARG}"
          ;;
    h)  Usage && exit 0
          ;; 
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
IN_CSV="${@:$OPTIND:1}"
OUT_CSV="${@:$OPTIND+1:1}"
WARP="${@:$OPTIND+2:1}"

#-----------------------------------------------------------------------------
# check if input exists
if [[ -z "${OUT_CSV}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

if [[ -z "${WARP}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify transformation file"
  exit 1
else
  WARP="$(readlink -f "${WARP}")"
fi

#-----------------------------------------------------------------------------
# check if we have to invert our matrix
APPLY="[${WARP},${INVERT}]"

if [ ! -z "${DIMENSION}" ]; then
  DIMS="${DIMENSION}"
else
  DIMS=3
fi

#-----------------------------------------------------------------------------
# check if input is a set of coordinates
if [[ -f "${IN_CSV}" ]]; then
  input_csv="${IN_CSV}"
  rm_file=0
else
  tmp_chicken="$(dirname ${OUT_CSV})/tmp.csv"
  in_coord=$(echo "${IN_CSV}" | tr -d '"')
  cmd=(
    call_antsmakechicken
    "${in_coord}"
    "${tmp_chicken}"
    "${trafo_type}"
  )

  # print and run
  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  # set input
  input_csv="${tmp_chicken}"

  rm_file=1
  if [[ "${keep_tmp}" -eq 1 ]]; then
    rm_file=0
  fi
fi

# apply
cmd=(
  antsApplyTransformsToPoints
  --dimensionality "${DIMS}"
  --input "${input_csv}"
  --output "${OUT_CSV}"
  --transform "${APPLY}"
)

# print and run
if [[ ${verb} -eq 1 ]]; then
  print_cmd "${cmd[@]}"
fi

eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "${cmd[0]}"
  exit 1
fi

# return command
if [[ "${return_coord}" -eq 1 ]]; then
  coord=$(
    call_antsreadchicken \
    "${OUT_CSV}" \
    "${trafo_type}"
  )
  echo "${coord}"
fi
