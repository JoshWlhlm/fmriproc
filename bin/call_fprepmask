#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fprepmask

Apply the masks to the corresponding BOLD files given an fMRIprep directory. You can do something 
similar with pybest, but this script exists in case you don't want to use that.

Usage:
  call_fprepmask <fprep dir>

Example:
  call_fprepmask # runs the script for all BOLD files in DIR_DATA_DERIV/fmriprep
  call_fprepmask DIR_DATA_DERIV/fmriprep/sub-01 # runs the script for a single subject
  call_fprepmask help # bring up this help 
  
---------------------------------------------------------------------------------------------------

USAGE

}

# set default
if [[ ${#@} -eq 0 ]]; then
  fprep_dir=${DIR_DATA_DERIV}/fmriprep
else
  fprep_dir=${1}
  if [[ ${fprep_dir} == "help" || ${fprep_dir} == "--help" ]]; then
    Usage && exit 0
  fi
fi

funcs=($(find ${fprep_dir} -type f -name "*preproc_bold.nii.gz" | sort))
if [ ${#funcs[@]} -eq 0 ]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find files with \"*preproc_bold.nii.gz\" in \"${fprep_dir}\""
  exit 1
fi

echo "Input directory = \"${fprep_dir}\" (${#funcs[@]} files)"
ct=1
for f in ${funcs[@]}; do
  base_name=$(dirname ${f})/$(basename ${f} preproc_bold.nii.gz)
  mask_file=${base_name}brain_mask.nii.gz
  if [ -f ${mask_file} ]; then
    echo -e "(${ct}/${#funcs[@]}): processing ${BOLD_GREEN}${f}${RESET}"
    
    # define output
    out=${base_name}masked_bold.nii.gz
    
    # define command
    cmd=(
      "fslmaths"
      ${f}
      -mas "${mask_file}"
      "${out}"
    )
    eval "${cmd[@]}"

    if [ $? -ne 0 ]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "fslmaths"
      exit 1
    else
      ((ct++))
    fi
  else
    echo "mask file (\"${mask_file}\") does not exist"
  fi
done
