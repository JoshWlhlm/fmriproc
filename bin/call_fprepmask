#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fprepmask

Apply brain masks from fMRIPrep to their corresponding BOLD preprocessed images.

This script multiplies each *_preproc_bold.nii.gz file with its corresponding brain_mask.nii.gz 
file (usually found in the same directory). The resulting masked image is saved as 
*masked_bold.nii.gz. This step is useful for excluding non-brain voxels prior to first-level 
analysis or post-processing, especially if you're not using pybest or similar pipelines.

Usage:
  call_fprepmask <fmriprep_directory>

Positional:
  <fprep_dir>     Directory containing fMRIPrep outputs. This can be:
                    - A full fMRIPrep derivatives folder (default: \$DIR_DATA_DERIV/fmriprep)
                    - A single subject folder (e.g., .../fmriprep/sub-01)
  <overwrite>     If set to '1', 'ow', or 'overwrite', existing outputs will be overwritten

Options:
  help|--help     print this help text

Outputs:
  For each *_preproc_bold.nii.gz file, a new file is created named:
    *_masked_bold.nii.gz

  The masking operation is performed using FSL's 'fslmaths' with the '-mas' flag.

Examples:
  call_fprepmask
    → run masking for all BOLD files in \$DIR_DATA_DERIV/fmriprep

  call_fprepmask /path/to/fmriprep/sub-01
    → run masking for a single subject

  call_fprepmask help
    → show this help message

Notes:
  - This script assumes that the masks follow the BIDS-style naming convention and are
    stored in the same directory as the corresponding preprocessed BOLD images.
  - It will skip files for which no brain mask is found and print a warning.

---------------------------------------------------------------------------------------------------

USAGE
}

#-----------------------------------------------------------------------------
# set path
if [[ ${#@} -eq 0 ]]; then
  fprep_dir=${DIR_DATA_DERIV}/fmriprep
else
  fprep_dir="${1}"
  if [[ ${fprep_dir} == "help" || ${fprep_dir} == "--help" ]]; then
    Usage && exit 0
  fi
fi

overwrite="${2}"
if [[ ! -d "${fprep_dir}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input directory ${BOLD_GREEN}${fprep_dir}${RESET}"
  exit 1
else
  fprep_dir="$(readlink -f "${fprep_dir}")"
fi

#-----------------------------------------------------------------------------
# find funcs
funcs=(
  $(
    find "${fprep_dir}" \
    -type f -name "*preproc_bold.nii.gz" | \
    sort
  )
)

if [ ${#funcs[@]} -eq 0 ]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find files with \"*preproc_bold.nii.gz\" in ${BOLD_GREEN}${fprep_dir}${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# loop through funcs
echo -e "Input directory = ${BOLD_MAGENTA}${fprep_dir}${RESET} (${#funcs[@]} files)"
ct=1
for f in ${funcs[@]}; do
  base_name="${f%preproc_bold.nii.gz}"
  mask_file="${base_name}brain_mask.nii.gz"
  if [[ -f "${mask_file}" ]]; then
    
    # define output
    out="${base_name}masked_bold.nii.gz"
    
    if [[ ! -f "${out}" || ${overwrite} -eq 1 ]]; then
      # define command
      echo -e "(${ct}/${#funcs[@]}): processing ${BOLD_GREEN}${f}${RESET}"
      cmd=(
        "fslmaths"
        "${f}"
        -mas "${mask_file}"
        "${out}"
      )

      # run
      eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "fslmaths" 
        exit 1
      fi
    else
      echo -e "(${ct}/${#funcs[@]}): ${BOLD_GREEN}${out}${RESET} exists"
    fi
    
    # copy json
    new_json="${out/.nii.gz/.json}"
    cp "${f/.nii.gz/.json}" "${new_json}" 2>/dev/null

    if [[ -f "${new_json}" ]]; then
      # set SkullStripped to True
      cmd=(
        call_json
        "${out/.nii.gz/.json}"
        "SkullStripped"
        True
      )

      eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${cmd[0]}" 
        exit 1
      fi
    fi

    ((ct++))
  else
    echo "mask file (\"${mask_file}\") does not exist" "Failed with command: \"${cmd[@]}\""
  fi
done
