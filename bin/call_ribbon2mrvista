#!/usr/bin/env python

import os
import sys
import numpy as np
import nibabel as nb
from lazyfmri import utils
opj = os.path.join

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_ribbon2mrvista

Convert FreeSurfer's `ribbon.mgz` file to a segmentation format compatible with MrVista/ITKGray. 
The segmentation is first aligned to native (rawavg) space using `mri_label2vol`, then converted to 
NIfTI format, and finally re-coded to follow MrVista conventions.

The following label conversions are applied:

  - Left White Matter  (2)  ➜  3
  - Left Gray Matter   (3)  ➜  5
  - Right White Matter (41) ➜  4
  - Right Gray Matter  (42) ➜  6

For details, see: 
http://web.stanford.edu/group/vista/cgi-bin/wiki/index.php/FreeSurfer#Extracting_a_white_matter_segmentation_to_use_with_itkGray

Usage:
  call_ribbon2mrvista <ribbon_file> <output_segmentation>

Arguments:
  <ribbon_file>   Path to FreeSurfer's ribbon.mgz file
  <out_seg>       Path to output file (.nii or .nii.gz); must end in .nii or .nii.gz

Outputs:
  A NIfTI file with MrVista-style label values, suitable for visualization and segmentation in ITKGray.

Example:
  call_ribbon2mrvista $SUBJECTS_DIR/sub-01/mri/ribbon.mgz sub-01_itk_segmentation.nii.gz

---------------------------------------------------------------------------------------------------
    """

    in_file     = None
    out_file    = None

    if len(argv) < 2:
        print(main.__doc__)
        sys.exit()

    in_file     = argv[0]
    out_file    = argv[1]

    # get extension of output file
    if out_file.endswith('.gz'):
      ext = "nii.gz"
    elif out_file.endswith('.nii'):
      ext = "nii"
    else:
      raise ValueError(f"Unrecognized extension.. Use either .nii.gz or .nii")

    # "warp" segmentation file from FreeSurfer space to native space (the space of the input image)
    cmd = f"mri_label2vol --seg {in_file} --temp {opj(os.path.dirname(in_file),'rawavg.mgz')} --o {opj(os.path.dirname(in_file),'ribbon-in-rawavg.mgz')}  --regheader {in_file}"
    utils.run_shell_wrapper(cmd)

    # convert mgz to nii
    tmp_file = opj(os.path.dirname(in_file), f'ribbon-in-rawavg.{ext}')
    cmd = f"mri_convert --in_type mgz --out_type nii {opj(os.path.dirname(in_file),'ribbon-in-rawavg.mgz')} {tmp_file}"
    utils.run_shell_wrapper(cmd)

    # load file with nibabel
    segmentation = nb.load(tmp_file)
    segmentation_data = segmentation.get_fdata().astype(int)

    # create an empty image with same dimensions
    new_segmentation = np.zeros_like(segmentation_data)

    # switch values
    new_segmentation[segmentation_data == 42] = 6
    new_segmentation[segmentation_data == 41] = 4
    new_segmentation[segmentation_data == 3] = 5
    new_segmentation[segmentation_data == 2] = 3

    # save new image
    nb.Nifti1Image(
      new_segmentation.astype(int),
      affine=segmentation.affine,
      header=segmentation.header
    ).to_filename(out_file)

if __name__ == "__main__":
    main(sys.argv[1:])
