#!/usr/bin/env python

import os
import sys
import getopt
import numpy as np
import nibabel as nb
from nilearn import image
from scipy import ndimage
from lazyfmri import utilsmport utils

opj = os.path.join
rb = f"{utils.color.RED}{utils.color.BOLD}"
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["input_dir", "brainmask", "duramask"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_gdhmgdm

This script runs MGDM in the GdH-pipeline, using the brain_mask derived from fmriprep (which
is a really nice brain mask). It then applies this mask to the T1-weighted image and the T1-
map as input for mgdm.

Usage:
  call_gdhmgdm [mandatory] [arguments]

Mandatory (required input):
  -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                  put generated by 'call_nighresmgdm', and should have the following
                  suffixes:

                  pattern_map = {
                      "T1w": "T1w.nii.gz",
                      "T1map": "T1map.nii.gz",
                      "skull": "skull_mask.nii.gz",
                      "dura": "dura_mask.nii.gz"
                  }

                  For instance, the input for a typical call could will look like this (generally
                  the output of 'spinoza_masking', which applies the brain mask to T1w/T1map files
                  to create skullstripped files):

                  # only T1w/T1map files available
                  project_path/derivatives/skullstripped/sub-01/ses-1
                  ├── sub-01_ses-1_acq-MP2RAGE_desc-skullstrip_T1map.nii.gz
                  └── sub-01_ses-1_acq-MP2RAGE_desc-skullstrip_T1w.nii.gz


  -b|--brainmask  File representing the brain mask. Can also be the brainmask.mgz file from Free-
                  Surfer, in which case a mask is generated from this file.
  -d|--duramask   File representing the dura mask or other garbage that should be ignored ()

Optional (flags with defaults):    
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'mgdm'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
  --iter          number of iterations for brain mask dilation (only if specified brainmask != 
                  FreeSurfer's brainmask.mgz). Default is 3.
  -x|--kwargs     Extra arguments that will be directly passed to 'mgdm_segmentation' (see
                  docs-link below for details). The format should be as follows: different para-
                  meters comma-separated, and parameter-value pair separated by '='):
                  
                      "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                      "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                  This input will be parsed to a dictionary via 'lazyfmri.utils.parse_kwargs_to_dict()'
                  The kwargs specified in this flag take precedent over the default kwargs:

                  defaults = {
                      "overwrite": True,
                      "save_data": True,
                      "output_dir": "directory specified with -o|--outputdir",
                      "file_name": "basename specified with -n|--name"
                  }


Options (extra):
  -h|--help       print this help text

Outputs
  - MGDM-output
  - Skullstripped T1-weighted/T1map images

Example:
  call_gdhmgdm \
      -i /dir/to/anat \
      -b /path/to/brainmask.nii.gz \
      -d /path/to/duramask.nii.gz \
      -o derivatives/nighres
      -n sub-01_ses-1_acq-MP2RAGE

---------------------------------------------------------------------------------------------------
    """

    input_dir = context.get("input_dir")
    brainmask = context.get("brainmask")
    duramask = context.get("duramask")
    n_dilation_iterations = context.get("n_dilation_iterations")
    output_dir = context.get("output_dir", opj(os.getcwd(), 'mgdm'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")
    kwargs = context.get("kwargs", "")

    # load in anatomical images
    files = {}
    pattern_map = {
        "T1w": "skullstrip_T1w.nii.gz",
        "T1map": "skullstrip_T1map.nii.gz",
    }
    if input_dir is not None:
        # we got passed an input_dir, fetch files from directory

        print(f"Loading files from {gb}{input_dir}{end}..")
        for key, pattern in pattern_map.items():
            files[key] = utils.get_file_from_substring(
                pattern,
                input_dir,
                return_msg=None
            )
    
    #-----------------------------------------------------------------------------
    # dilate brain mask
    gdh_mask = opj(os.path.dirname(duramask), f'{output_base}-mask_gdh.nii.gz')
    if brainmask.endswith(".mgz"):
        try:
            brain_fn = brainmask.split('.')[0]+'.nii.gz'
            cmd = f"call_mriconvert {brainmask}"
            utils.run_shell_wrapper(cmd)

            # resample to outside-mask
            resampled_brain = image.resample_to_img(
                brain_fn,
                duramask,
                interpolation='nearest'
            )

            # binarize
            brain_mask = image.math_img(
                '(brain_mask > 0)',
                brain_mask=resampled_brain
            )

            if brain_mask.header['qform_code'] == 0:
                brain_mask.header['qform_code'] = np.array([1])

            brain_mask.to_filename(gdh_mask)
        except Exception:
            print(f"Could not derive brain mask from FreeSurfer output..")

    else:
        # dilate mask
        print("Dilating brain mask..")
        brain_mask_dil = ndimage.binary_dilation(
            nb.load(brainmask).get_fdata(),
            iterations=n_dilation_iterations
        )
        brain_mask = image.new_img_like(brainmask, brain_mask_dil)

        # resample to T1w
        print("Resampling brain mask to T1-weighted image")
        brain_mask = image.resample_to_img(brain_mask, files["T1w"])

        # refine with duramask
        print("Refine mask with dura mask")
        brain_mask = image.math_img(
            'brain_mask - dura_mask',
            brain_mask=brain_mask,
            dura_mask=duramask
        )
        brain_mask.to_filename(gdh_mask)

    #-----------------------------------------------------------------------------
    # apply masks
    print("Masking anatomical images")
    t1w_masked = image.math_img(
        'brain_mask * t1w',
        brain_mask=brain_mask,
        t1w=files["T1w"]
    )

    t1map_masked = image.math_img(
        'brain_mask * t1map',
        brain_mask=brain_mask,
        t1map=files["T1map"]
    )

    #-----------------------------------------------------------------------------
    # save files
    print("Saving new skullstripped images")
    new_files = {}
    for t,n in zip(["T1w", "T1map"], [t1w_masked, t1map_masked]):
        fname = opj(input_dir, f"{output_base}-skull_gdh_{t}.nii.gz")
        n.to_filename(fname)
        new_files[t] = fname

    #-----------------------------------------------------------------------------
    # run regular cmd
    print("Running MGDM with 'call_nighresmgdm'")
    cmd = f"""call_nighresmgdm \
        --t1w {new_files['T1w']} \
        --t1map {new_files['T1map']} \
        --dura {duramask} \
        --outputdir {output_dir} \
        --name {output_base}
        {kwargs}
    """

    utils.run_shell_wrapper(cmd)

if __name__ == "__main__":
    input_dir = None
    brainmask = None
    duramask = None
    n_dilation_iterations = 3
    output_dir = opj(os.getcwd(), 'mgdm')
    output_base = "subject_acq-MP2RAGE_desc"
    kwargs = {}

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hs:n:i:b:d:o:x:",
            ["help", "inputdir=", "brainmask=", "duramask=", "outputdir=", "name=", "iter=", "kwargs="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-b", "--brainmask"):
            brainmask = arg
        elif opt in ("-d", "--duramask"):
            duramask = arg
        elif opt in ("--iter"):
            n_dilation_iterations = int(arg)
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-x", "--kwargs"):
            kwargs = f"--kwargs {arg}"

    main(context={
        "input_dir": input_dir,
        "brainmask": brainmask,
        "duramask": duramask,
        "n_dilation_iterations": n_dilation_iterations,
        "output_dir": output_dir,
        "output_base": output_base,
        "kwargs": kwargs
    })
