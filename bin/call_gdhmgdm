#!/usr/bin/env python

import nibabel as nb
from nighres import brain
from nighres.brain import mgdm_segmentation
import sys, getopt
import os
from nilearn import image
from nilearn.image.resampling import resample_to_img
from scipy import ndimage
from lazyfmri import utils
from fmriproc.image import reorient_img
import warnings
import subprocess
import glob
import numpy as np
rb = utils.color.RED+utils.color.BOLD
gb = utils.color.GREEN+utils.color.BOLD
end = rb = utils.color.END
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_gdhmgdm

This script runs MGDM in the GdH-pipeline, using the brain_mask derived from fmriprep (which
is a really nice brain mask). It then applies this mask to the T1-weighted image and the T1-
map as input for mgdm.

Args:
    -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                    put generated by 'call_nighresmgdm', and should have the following
                    suffixes:

                    ```
                    pattern_map = {
                        "T1w": "T1w.nii.gz",
                        "T1map": "T1map.nii.gz",
                        "skull": "skull_mask.nii.gz",
                        "dura": "dura_mask.nii.gz"
                    }
                    ```

                    For instance, the input for a typical call could will look like this (generally
                    the output of 'spinoza_masking', which applies the brain mask to T1w/T1map files
                    to create skullstripped files):

                    ```
                    # only T1w/T1map files available
                    project_path/derivatives/skullstripped/sub-01/ses-1
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-skullstrip_T1map.nii.gz
                    └── sub-01_ses-1_acq-MP2RAGE_desc-skullstrip_T1w.nii.gz
                    ```

    -b|--brainmask  File representing the brain mask. Can also be the brainmask.mgz file from Free-
                    Surfer, in which case a mask is generated from this file.
    -d|--duramask   File representing the dura mask or other garbage that should be ignored ()
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'mgdm'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
    --iter          number of iterations for brain mask dilation (only if specified brainmask != 
                    FreeSurfer's brainmask.mgz). Default is 3.

Outputs
    - MGDM-output
    - Skullstripped T1-weighted/T1map images

Example:
    call_gdhmgdm \
        -i /dir/to/anat \
        -b /path/to/brainmask.nii.gz \
        -d /path/to/duramask.nii.gz \
        -o derivatives/nighres
        -n sub-01_ses-1_acq-MP2RAGE

Notes:
    Need at least the subject number!

    if left to empty, it will look by default for the following files:
     anat   > derivatives/pymp2rage/<subject>/ses-1
     mask   > derivatives/fmriprep/<subject>/ses-1/anat/*brain_mask.nii.gz
     output > derivatives/nighres/<subject>/(<session>)/mgdm/sub-001_ses-1_acq-MP2RAGE_desc

---------------------------------------------------------------------------------------------------
    """

    input_dir = None
    brainmask = None
    duramask = None
    n_dilation_iterations = 3
    output_dir = opj(os.getcwd(), 'mgdm')
    outputbase = "subject_acq-MP2RAGE_desc"
    deriv_dir = os.environ.get("DIR_DATA_DERIV")

    try:
        opts = getopt.getopt(argv,"hs:n:i:b:d:o:",["help", "inputdir=", "brainmask=", "duramask=", "outputdir=", "name=", "iter="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-b", "--brainmask"):
            brainmask = arg
        elif opt in ("-d", "--duramask"):
            duramask = arg
        elif opt in ("--iter"):
            n_dilation_iterations = int(arg)
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            outputbase = arg

    required_args = 1
    if (
        len(argv) < required_args
        or not isinstance(input_dir, str)
        or not os.path.isdir(input_dir)
        ):

        print("\nERROR: Missing or invalid arguments.")
        if len(argv) < required_args:
            print(" - Not enough command-line arguments specified.")
        if not isinstance(input_dir, str):
            print(" - Input directory is not a string.")
        elif not os.path.isdir(input_dir):
            print(f" - Input directory '{input_dir}' does not exist.")

        print(main.__doc__)
        sys.exit(1)

    # load in anatomical images
    files = {}
    pattern_map = {
        "T1w": "skullstrip_T1w.nii.gz",
        "T1map": "skullstrip_T1map.nii.gz",
    }
    if input_dir is not None:
        # we got passed an input_dir, fetch files from directory

        print(f"Loading files from {gb}{input_dir}{end}..")
        for key, pattern in pattern_map.items():
            files[key] = utils.get_file_from_substring(
                pattern,
                input_dir,
                return_msg=None
            )

    #---------------------------------------------------------------------------------------------------
    # Check that input files exist
    required_keys = ["T1w", "T1map"]
    for key in required_keys:
        if not files.get(key) or not os.path.isfile(files[key]):
            print(f"ERROR: Required file '{rb}{key}{end}' is missing or does not exist: {gb}{files.get(key)}{end}")
            sys.exit(1)
    
    #---------------------------------------------------------------------------------------------------
    # dilate brain mask
    gdh_mask = opj(os.path.dirname(duramask), f'{base}-mask_gdh.nii.gz')
    if brainmask.endswith(".mgz"):
        try:
            brain_fn = brainmask.split('.')[0]+'.nii.gz'
            cmd = f"call_mriconvert {brainmask}"
            utils.run_shell_wrapper(cmd)

            # resample to outside-mask
            resampled_brain = image.resample_to_img(
                brain_fn,
                duramask,
                interpolation='nearest'
            )

            # binarize
            brain_mask = image.math_img(
                '(brain_mask > 0)',
                brain_mask=resampled_brain
            )

            if brain_mask.header['qform_code'] == 0:
                brain_mask.header['qform_code'] = np.array([1])

            brain_mask.to_filename(gdh_mask)
        except Exception:
            print(f"Could not derive brain mask from FreeSurfer output..")

    else:
        # dilate mask
        print("Dilating brain mask..")
        brain_mask_dil = ndimage.binary_dilation(
            nb.load(brainmask).get_fdata(),
            iterations=n_dilation_iterations
        )
        brain_mask = image.new_img_like(brainmask, brain_mask_dil)

        # resample to T1w
        print("Resampling brain mask to T1-weighted image")
        brain_mask = image.resample_to_img(brain_mask, t1w)

        # refine with duramask
        print("Refine mask with dura mask")
        brain_mask = image.math_img(
            'brain_mask - dura_mask',
            brain_mask=brain_mask,
            dura_mask=duramask
        )
        brain_mask.to_filename(gdh_mask)

    #---------------------------------------------------------------------------------------------------
    # apply masks
    print("Masking anatomical images")
    t1w_masked = image.math_img(
        'brain_mask * t1w',
        brain_mask=brain_mask,
        t1w=t1w
    )

    t1map_masked = image.math_img(
        'brain_mask * t1map',
        brain_mask=brain_mask,
        t1map=t1map
    )

    #---------------------------------------------------------------------------------------------------
    # save files
    print("Saving new skullstripped images")
    new_files = {}
    for t,n in zip(["T1w", "T1map"], [t1w_masked, t1map_masked]):
        fname = opj(input_dir, f"{outputbase}-skull_gdh_{t}.nii.gz")
        n.to_filename(t1w_masked_fn)
        new_files[t] = fname

    #---------------------------------------------------------------------------------------------------
    # run regular cmd
    print("Running MGDM with 'call_nighresmgdm'")
    cmd = f"""call_nighresmgdm \
        --t1w {new_files['T1w']} \
        --t1map {new_files['T1map']} \
        --dura {duramask} \
        --outputdir {output_dir} \
        --name {outputbase}
    """

    utils.run_shell_wrapper(cmd)

if __name__ == "__main__":
    main(sys.argv[1:])
