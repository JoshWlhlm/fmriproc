#!/usr/bin/env python

import os
import ast
import sys
import getopt
import numpy as np
from lazyfmri import utils
opj = os.path.join

try:
    from cxutils import optimal
except ImportError:
    print("Could not import cxutils. Please install from https://github.com/gjheij/cxutils")

@utils.validate_cli_inputs(required_keys=["subject", "out"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_targetvertex

This script calculates the orientation of the line in the first session anatomy based on the sur-
faces as outputted by FreeSurfer and later also the pRF-maps. Eventually it will create a csv-
file containing the most important information about the orientation of the line. The main ope-
rations will be governed by the classes in cxutils/optimal.py. Aside from functional proper-
ties, we can now also set cut off criteria for cortical thickness and sulcal depth. If you do not 
wish to apply a certain filter, just leave it empty and press ENTER. That way, the default value 
(i.e., no thresholding) will be used.

Usage:
  call_targetvertex [mandatory] [arguments] [options]

Mandatory (required input):
  -s|--sub        Subject name as defined in FreeSurfer directory
  -o|--out        Output file containing translation and rotation values

Optional (flags with defaults):
  -d|--deriv      Path to all derivatives (e.g., freesurfer/pycortex/prf). Defaults to:
                  'os.environ.get("DIR_DATA_DERIV")'
  -r|--roi        ROI to be used; must be a label present in <fs_dir>/<subject>/label; default 
                  = V1_exvivo.thresh. It should be following the nomenclature of FreeSurfer but 
                  omitting the 'lh'/'rh' to include both hemispheresin the analysis
  -v|--vert       list of manually specified vertices instead of based on surface calculation.
                  use the format [5875,8872] with the first vertex in left hemisphere and se-
                  cond in right hemisphere.
  -p|--prf-file   File containing the pRF-estimates. Required if '--use-prf' is specified
  --srf-file      specify custom .csv-file containing the SRFs. Otherwise SRFs are calculated

Options (extra):
  -h|--help       print this help text
  -u|--use-prf    Include pRF in the calculation of the best vertex even if you have a pRF-para-
                  meter file to only use surface (anatomical) information
  -f|--freeview   Disable FreeView while verifying vertex location. Only do this if you already 
                  know where it's located!
  -e|--use-epi    Use EPI intensity data from fmriprep
  --srf           Include size-response functions (SRFs) in criteria for the vertices that sur-
                  vive the initial criterias
  --gallery       save all cortex-objects from 'optimal.TargetVertex()' in a figure. If pRFs and 
                  SRFs are included, this will yield in a 4x5 grid with brainmaps of various 
                  kinds that were used in the selection process of the target vertex.
  --manual        use manual selection of vertices using Freeview/pycortex
  --ctx           open pycortex viewer for vertex selection if '--manual' is specified. Default 
                  is FreeView because it also open a volumetric view
  --aparc         specified ROI is part of the aparc.annot file (e.g., "lateralorbitofrontal").
                  Use 'master -m 18 --help' to see which ROIs are included

Outputs:
  a csv-file in the pycortex/sub-xxx directory specifying the orientation of the line in the
  first session anatomy

Examples
----------
# use pRF
call_targetvertex \
  -s sub-001 \
  -p prf_params.pkl \
  --use-prf

# use pRF & SRFs
call_targetvertex \
  --sub sub-001 \
  --deriv /dir/to/derivatives \
  --prf-file prf_params.pkl \
  --use-prf \
  --srf-file /dir/to/derivatives/prf/sub-001/srfs.pkl \
  --srf \
  --use-epi

Notes
----------
- You only need to specify the paths up until the sub-xxx, assuming a BIDS-like structure
- There are various types of vertex-selection:
    > pRF and surface:
        use both the information from pRF and surface calculations (default). For this we need a 
        pRF-parameter file from call_prf. Additionally, we need the surfaces from FreeSurfer
    > pRF-only:
        will still require the same information as above, but instead you can leave the thres-
        hold for structural properties to default
    > surface-only:
        will require the FreeSurfer surfaces, but if the pRF file is present, set the thres-
        holds to default to not interfere with the mask
    > curvature-only:
        leave all thresholds to default to only look for minimal curvature

---------------------------------------------------------------------------------------------------
    """

    subject = context.get("subject")
    out = context.get("out")
    verts = context.get("verts")
    prf_file = context.get("prf_file")
    selection = context.get("selection")
    epi_file = context.get("epi_file")
    srf_file = context.get("srf_file")
    use_prf = context.get("use_prf")
    use_epi = context.get("use_epi")
    open_fv = context.get("open_fv")
    srf_flag = context.get("srf_flag")
    gallery = context.get("gallery")
    is_aparc = context.get("is_aparc")
    skip_prf_info = context.get("skip_prf_info")
    roi = context.get("roi")
    deriv = context.get("deriv")
    open_with = context.get("open_with")

    #----------------------------------------------------------------------------------------------------------------
    # Set inputs
    if verts:
        try:
            verts = np.array(ast.literal_eval(verts))
        except:
            raise ValueError(f"You used '{verts}'. Make sure to use '[x,y,z]' (comma-separated and no spaces)")

    targ_obj = optimal.TargetVertex(
        subject,
        prf_file=prf_file,
        use_epi=use_epi,
        epi_file=epi_file,
        deriv=deriv, 
        vert=verts,
        use_prf=use_prf,
        out=out,
        roi=roi,
        webshow=open_fv,
        srf=srf_flag,
        srf_file=srf_file,
        selection=selection,
        open_with=open_with,
        aparc=is_aparc,
        skip_prf_info=skip_prf_info
    )

    if gallery:

        # derive file components
        try:
            file_components = utils.split_bids_components(os.path.basename(prf_file))
        except:
            file_components = []

        out_comps = []
        if len(file_components) > 0:
            for comp in ['sub', 'ses', 'task', 'acq', 'rec', 'run', 'space', 'hemi', 'model', 'stage']:
                if comp in file_components.keys():
                    out_comps.append(f"{comp}-{file_components[comp]}")
                
        if len(out_comps) == 0:
            out_comps = [subject]

        # check if we got a specified output file
        output_dir = os.path.dirname(out)
        base_name = "_".join(out_comps)

        # open cortex webviewer
        targ_obj.open_pycortex(
            radius=240,
            pivot=-40,
            rh=0
        )

        # save elements, make figure, and add colormaps
        targ_obj.save_all(
            base_name=base_name,
            fig_dir=output_dir,
            gallery=True,
            y=1.05,
            n_cols=5,
            cb=[0,900,350,1200],
            add_cms=True
        )

if __name__ == "__main__":

    subject = None
    out = None
    verts = None
    prf_file = None
    selection = None
    epi_file = None
    srf_file = None
    use_prf = False
    use_epi = False
    open_fv = True
    srf_flag = False
    gallery = False
    is_aparc = False
    skip_prf_info = False
    roi = "V1_exvivo.thresh"
    deriv = os.environ.get("DIR_DATA_DERIV")
    open_with = "fs"

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "fuhd:s:t:r:o:b:v:m:n:p:",
            ["help", "deriv=", "sub=", "roi=", "out=", "vert=", "use-prf", "no-freeview", "prf-file=", "use-epi", "srf", "srf-file=", "gallery", "manual", "ctx", "epi_file=", "aparc","skip-prf-info"]
        )[0]
    except getopt.GetoptError:
        print("ERROR IN ARGUMENT HANDLING!")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg       
        elif opt in ("-r", "--roi"):
            roi = arg
        elif opt in ("-o", "--out"):
            out = arg
        elif opt in ("-d", "--deriv"):
            deriv = arg
        elif opt in ("-p", "--prf-file"):
            prf_file = arg
        elif opt in ("--epi_file"):
            epi_file = arg            
        elif opt in ("-e", "--use-epi"):
            use_epi = True
        elif opt in ("-u", "--use-prf"):
            use_prf = True                        
        elif opt in ("-f", "--no-freeview"):
            open_fv = False
        elif opt in ("--skip-prf-info"):
            skip_prf_info = True            
        elif opt in ("--vert"):
            verts = arg
        elif opt in ("--srf"):
            srf_flag = True  
        elif opt in ("--srf-file"):
            srf_file = arg
        elif opt in ("--gallery"):
            gallery = True
        elif opt in ("--manual"):
            selection = "manual"
        elif opt in ("--ctx"):
            open_with = "ctx"        
        elif opt in ("--aparc"):
            is_aparc = True

    main(context={
        "subject": subject,
        "out": out,
        "verts": verts,
        "prf_file": prf_file,
        "selection": selection,
        "epi_file": epi_file,
        "srf_file": srf_file,
        "use_prf": use_prf,
        "use_epi": use_epi,
        "open_fv": open_fv,
        "srf_flag": srf_flag,
        "gallery": gallery,
        "is_aparc": is_aparc,
        "skip_prf_info": skip_prf_info,
        "roi": roi,
        "deriv": deriv,
        "open_with": open_with
    })
