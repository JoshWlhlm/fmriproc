#!/usr/bin/env python

import sys
from nilearn import image

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_largestcomponent

This script keeps only the largest connected component in a binary or thresholded image volume. 
It is typically used to remove small, noisy clusters and retain the main object (e.g., after 
binarizing a mask or segmentation).

Usage:
  call_largestcomponent <input_file> [output_file]

Arguments:
  <input_file>    Path to the input NIfTI image (.nii or .nii.gz). This should ideally be a 
                  binarized or thresholded image with isolated clusters.
  <output_file>   Optional. If specified, will write the result to this file. If not specified,
                  the input file will be overwritten with the cleaned version.

Outputs:
  - A NIfTI file containing only the largest connected component from the input image.

Examples:
  call_largestcomponent mask_thresh.nii.gz
    → Keeps the largest component in-place (overwrites mask_thresh.nii.gz)

  call_largestcomponent mask_thresh.nii.gz cleaned_mask.nii.gz
    → Writes largest component to 'cleaned_mask.nii.gz'

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()

    in_file = argv[0]
    out_file = argv[1] if len(argv) > 1 else in_file

    new_img = image.largest_connected_component_img(in_file)
    new_img.to_filename(out_file)

if __name__ == "__main__":
    main(sys.argv[1:])
