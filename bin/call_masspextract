#!/usr/bin/env python

import os
import sys
import getopt
from fmriproc.image import massp_mask_img
opj = os.path.join

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_masspmask2table

Apply a MASSP (Multiple Automatically Segmented Subcortical Structures) label image to a quantitative
parameter map (e.g., T1map or R1map) to extract the mean value for each labeled region. The output
is a structured JSON file listing the average signal values per subcortical region.

This is useful for quantitative neuroimaging analyses where summary statistics are needed per
structure (e.g., in group-level or cross-subject comparisons).

Usage:
  call_masspmask2table -l <label_image> -m <quantitative_map> [-o <output_file>]

Mandatory:
  -l|--label      Path to the MASSP label image (NIfTI format)
  -m|--mask       Quantitative map (e.g., T1 or R1 map) to extract signal values from

Optional:
  -o|--out        Output file name [default: label.json]

Options:
  -h|--help       Show this help text

Outputs:
  A JSON file where each key is a structure name and each value is the mean intensity from the
  quantitative map within that structure.

Example:
  call_masspmask2table \
    -l sub-01_label.nii.gz \
    -m sub-01_T1map.nii.gz \
    -o sub-01_massp_means.json

---------------------------------------------------------------------------------------------------
    """

    input   = None
    mask    = None
    output  = "label.json"

    try:
        opts = getopt.getopt(
            argv,
            "hl:o:u:",
            ["help", "label=", "out=", "mask="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-l", "--label"):
            input = arg
        elif opt in ("-o", "--out"):
            output = arg
        elif opt in ("-m", "--mask"):
            mask = arg            

    if len(argv) < 2:
        print(main.__doc__)
        sys.exit()

    #---------------------------------------------------------------------------------------------------
    # Convert label to volume table

    if os.path.exists(input) and os.path.exists(mask):
        _ = massp_mask_img(
            input,
            mask,
            out=output
        )
        # print(f"wrote {vol_file}")
    else:
        raise FileNotFoundError(f"Could not find input file or to-be-masked image")

if __name__ == "__main__":
    main(sys.argv[1:])
