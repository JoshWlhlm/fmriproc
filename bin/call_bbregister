#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_bbregister

wrapper for boundary-based registration (BBR) with FreeSurfer. It will register the input moving
image to orig.mgz (original image in FreeSurfer space) and output FSL and LTA formatted registra-
tation matrices. Sneakily assumes the image you're transforming to FreeSurfer space is T1-weigh-
ted. If not, change the bbregister --t1 flag in this script.

Usage:
  call_bbregister <subject number> <moving> <header | init> <FSL (0=no|1=yes)> <output>

Arguments:
  -i <type>       if you want to register based on header, type "header" here if you want to
                  register based on initialization matrix, specify the path to the initialization
                  matrix (either FSL .mat or ITK .txt file)

  -c <contrast>   contrast to assume. Default = t1, but can be t2 to work with fMRI data
  -x <kwargs>     Extra arguments that will be directly passed to 'bbregister'. The format should
                  different parameters comma-separated, and parameter-value pair separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                    "-x --t1,--int=/path/to/intermediate_file.nii.gz"

                  The kwargs specified in this flag take precedent over the default args:

                  # dcm2niix
                  cmd_args=(
                    bbregister
                    --s <subject>     1st pos arg
                    --mov <moving>    2nd pos arg
                    --t1 # contrast   -c flag 
                  )

Options:
  -h|--help       print this help text
  -f|--fsl        if flag is specified both LTA and FSL matrix will be outputted.
  --t1            contrast = T1 [default] | same as "-c t1" or "-x --t1"
  --t2            contrast = T2           | same as "-c t2" or "-x --t2"
  --bold          contrast = BOLD         | same as "-c bold" or "-x --bold"
  --dti           contrast = DTI          | same as "-c dti" or "-x --dti"

Positional
  <sub number>    number of subject's FreeSurfer directory from which you can omit "sub-" (e.g.,
                  for "sub-001", enter "001").
  <moving>        string-like path to moving object (either .mgz or .nii.gz)                    
  <output>        string-like basename for output. Extensions ".mat" and ".lta" will be added

Example:
  # use header init, no FSL output
  call_bbregister 001 moving.nii.gz native2fs

  # use init.txt for initialization & output FSL matrix
  call_bbregister -f -i /path/to/init.txt 01 moving.nii.gz native2fs
  
  # use header init, no FSL output, t2 contrast
  call_bbregister -c t2 001 func.nii.gz func2fs

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
contrast="--t1"
FSL=0
kwargs=""
init="hdr"
while getopts :-:hfi:c:x: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in     
        fsl)
          FSL=1
          ;;
        t1)
          contrast="--t1"
          ;;
        t2)
          contrast="--t2"
          ;;
        bold)
          contrast="--bold"
          ;;
        dti)
          contrast="--dti"
          ;;                                 
        help)
          Usage && exit 0
          ;; 
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    i)  init=${OPTARG}
          ;;
    c)  contrast="--${OPTARG}"
          ;;
    f)  FSL=1
          ;; 
    x)  kwargs=${OPTARG}
          ;; 
    h)  Usage && exit 0
          ;; 
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
SUBJECT=${@:$OPTIND:1}
MOVING=${@:$OPTIND+1:1}
OUTPUT=${@:$OPTIND+2:1}

#-----------------------------------------------------------------------------
# Check if FreeSurfer ran
if [[ ! -d "${FS}/${SUBJECT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Directory doesn't exist. Run FreeSurfer first.."
  exit 1
fi

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${MOVING}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find MOVING image ${BOLD_GREEN}\"${MOVING}\"${RESET}"
  exit 1
else
  MOVING="$(readlink -f "${MOVING}")"
fi

if [[ -z "${OUTPUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# get extension
filename=$(basename -- "${init}")
extension="${filename##*.}"
filename="${filename%.*}"

#-----------------------------------------------------------------------------
# Turn kwargs into space-separated array
if [[ -n "${kwargs}" ]]; then
  IFS=' ' read -r -a user_args <<< "$(echo "$kwargs" | tr ',' ' ' | tr '=' ' ')"
else
  user_args=()
fi

# Convert user_args into string for matching
arg_str="${user_args[*]}"

# initialize base command
cmd_args=(
  bbregister
  --s "${SUBJECT}"
  --mov "${MOVING}"
)

#-----------------------------------------------------------------------------
# check the initialization
if [[ ! "$arg_str" =~ (--init-reg|--init-header) ]]; then

  if [[ ${extension} == "txt" ]] || [[ ${extension} == "mat" ]] || [[ ${extension} == "lta" ]]; then
    # we have an initialization matrix
    init="--init-reg ${init}"
  elif [[ $(make_lower ${init}) == "header" ]] || [[ $(make_lower ${init}) == "hdr" ]]; then
    # using header for initialization
    init="--init-header"
  else
    echo "Unknown option specified for registration initialization"
    Usage
    exit 1
  fi

  cmd_args+=("${init}")
fi

#-----------------------------------------------------------------------------
# check reg output
format="--reg ${OUTPUT}.dat"
if [[ ! "$arg_str" =~ (--fslmat) ]]; then
  if [[ ${FSL} -eq 1 ]]; then
    format="--fslmat ${OUTPUT}.mat --reg ${OUTPUT}.dat"
  fi
  cmd_args+=("${format}")
fi
#-----------------------------------------------------------------------------
# check contrast
if [[ ! "$arg_str" =~ (--t1|--t2|--bold|--dti) ]]; then
  cmd_args+=("${contrast}")
fi

#-----------------------------------------------------------------------------
# Add user-specified options
cmd_args+=("${user_args[@]}")

#-----------------------------------------------------------------------------
# print and run
print_cmd "${cmd_args[@]}" && eval "${cmd_args[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" bbregister
  exit 1
fi
