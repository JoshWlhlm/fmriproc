#!/usr/bin/env python

import os
import sys
import getopt
from lazyfmri import utils
from fmriproc import scanner

try:
    from cxutils import optimal
except ImportError:
    print("Could not import cxutils. Please install from https://github.com/gjheij/cxutils")

opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
rb = f"{utils.color.RED}{utils.color.BOLD}"
end = utils.color.END


@utils.validate_cli_inputs(required_keys=["subject"])
def main(context):
    """
---------------------------------------------------------------------------------------------------
call_createlinefs

This script allows you to get an idea of where the line will be positioned in the second session. 
You have to manually fill in the RAS-coordinate and angles in the transform-window, resulting in a 
template slice being warped to the orientation it needs to get. It does so based on the 
line_pycortex file created with cxutils.optimal.CalcBestVertex. If you're using the left 
hemisphere, you'll only need to specify a subject name, the rest will be taken care of, assuming a 
line_pycortex file exists.

Utilizes the same strategy as in spinoza_lineplanning, but instead of using a registration matrix
between two sessions, orig.nii.gz and an identity matrix are used to "warp" the coordinate.

Usage:
  call_createlinefs [mandatory] [optional] [options]

Mandatory (required input):
  -s|--subject    name of the directory as specified in the pycortex filestore directory
  -f|--fsdir      FreeSurfer directory; if left empty, SUBJECTS_DIR will be used 
  -l|--line-ctx   file containing the information about placement of the line. If left empty
                  we'll look for <project>/derivatives/pycortex/<subject>/line_pycortex.csv.
  -n|--session    session ID of line-scanning session to which `line-ctx` belongs. Default = 2
  -o|--output     new nifti-image containing the beam with the correct orientation and dimensions
                  of FreeSurfer
  --lh|--rh       which hemisphere should we do? Use 'lh' for left, 'rh' for right (default = lh)
  --no-freeview   prevent FreeView from opening. This is used if you just want to see how the
                  angles are calculated without the hassle of waiting for FreeView.

Outputs
    a new nifti image with the line at the specified location 

Example:
  call_createlinefs -s sub-001
  call_createlinefs -s sub-001 --rh
  call_createlinefs -s sub-001 --rh --no-freeview

---------------------------------------------------------------------------------------------------
    """

    subject = context["subject"]
    session = context.get("session", 2)
    line_ctx = context.get("line_ctx")
    fs_dir = context.get("fs_dir", os.environ.get("SUBJECTS_DIR"))
    output = context.get("output")
    hemi = context.get("hemi", "lh")
    freeview = context.get("freeview", True)

    # define output if not given
    if not isinstance(output, str):
        if hemi.lower() == "lh":
            tag = "hemi-L"
        elif hemi.lower() == "rh":
            tag = "hemi-R"
        else:
            raise ValueError(
                f"Invalid hemisphere {hemi} specified. Please use 'lh' or 'rh'")

        output = opj(
            fs_dir,
            subject,
            'mri',
            f'{subject}_ses-{session}_space-fsnative_{tag}_desc-beam_template.nii.gz'
        )

    # create beam based on orig.mgz
    orig = opj(fs_dir, subject, 'mri', 'orig.mgz')
    utils.run_shell_wrapper(f'call_createbeamfs {subject}')
    beam = utils.get_file_from_substring(
        "space-fs_desc-template_beam", os.path.dirname(orig))

    # apply similar strategy as in spinoza_lineplanning, but then with an identity matrix
    anat2 = orig.split(".")[0]+".nii.gz"
    if not os.path.exists(anat2):
        utils.run_shell_wrapper(f"call_mriconvert {orig} 2>/dev/null")

    # define file with coordinate/normal vector
    if not isinstance(line_ctx, str):
        line_ctx = opj(
            os.environ.get('CTX'),
            subject,
            f"ses-{session}",
            f"{subject}_ses-{session}_desc-coords.csv"
        )

    if not os.path.exists(line_ctx):
        raise FileExistsError(
            f"Could not find file with coordinates: {line_ctx}")

    # get target vertex
    targ = optimal.TargetVertex(
        subject,
        out=line_ctx,
        deriv=os.environ.get("DIR_DATA_DERIV")
    )

    # calculate angles
    scan = scanner.Scanner(
        targ,
        fs_dir=os.environ.get("FS"),
        new_anat=anat2,
        fs2ses='identity',
        hemi=hemi,
        ses='fs',
        print_to_console=False
    )

    tkr_coords = scan.tkr_coords[hemi]
    fold = scan.foldover[hemi]

    # if orientation is sagittal, we need to first get the beam into sagittal plane, then use the
    # rotation angles from there. E.g., if FH-angle = -2.67, we first enter 90, then subtract
    # 2.67 from that, giving an angle of 87.33 in FH/SI direction
    flip = False
    if fold['value'][0].lower() == "sagittal":
        txt = f"Orientation is {rb}{fold['value'][0]}{end}; first enter 90 in FH/SI-direction"
    else:
        txt = f"Orientation is {rb}{fold['value'][0]}{end}"
        flip = True

    # LR is useless for FreeView
    if fold['value'][4] == 0:
        ap_angle = fold['value'][3]
    else:
        ap_angle = fold['value'][4]

    # encoding is different for FreeView/scanner in coronal orientation
    if flip:
        ap_angle = utils.reverse_sign(ap_angle)

    utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
    print("Enter the following angles (in this order!!):")
    print(txt)
    print(f" FH: {round(fold['value'][5],2)}")
    print(f" AP: {round(ap_angle,2)}")
    print(f" LR: 0")
    print("\nEnter the following translation:")
    print(f" LR: {round(tkr_coords[0],2)}")
    print(f" AP: {round(tkr_coords[1],2)}")
    print(f" FH: {round(tkr_coords[2],2)}")

    if freeview:
        print(f"\nOpening Freeview; make sure to highlight 'space-fs_desc-template_beam'!")
        print(f"Save image as: '{output}'")

        fid = opj(fs_dir, subject, 'surf', f"{hemi}.fiducial")
        x, y, z = [round(tkr_coords[i], 2) for i in tkr_coords]
        cmd = f"launch_freeview \
            -v {orig} {beam}:colormap=Heat \
            -f {fid}:edgecolor=green \
            --ras {x} {y} {z} tkreg \
            --transform-volume \
            2>/dev/null"
        utils.run_shell_wrapper(cmd)
    else:
        print("Not opening FreeView..")

    print("Done")


if __name__ == "__main__":

    context = {
        "subject": None,
        "session": 2,
        "fs_dir": os.environ.get("SUBJECTS_DIR"),
        "line_ctx": None,
        "output": None,
        "hemi": "lh",
        "freeview": True
    }

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hs:f:l:o:n:",
            ["help", "sub=", "fsdir=", "line-ctx=",
                "output=", "no-freeview", "lh", "rh", "ses="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            context["subject"] = arg
        elif opt in ("-n", "--ses"):
            context["session"] = arg
        elif opt in ("-f", "--fsdir"):
            context["fs_dir"] = arg
        elif opt in ("-l", "--line-ctx"):
            context["line_ctx"] = arg
        elif opt in ("-o", "--output"):
            context["output"] = arg
        elif opt == "--no-freeview":
            context["freeview"] = False
        elif opt == "--lh":
            context["hemi"] = "lh"
        elif opt == "--rh":
            context["hemi"] = "rh"

    main(context=context)
