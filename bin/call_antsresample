#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antsresample

Wrapper for ANTs' ResampleImage to simplify resampling of NIfTI images. You only need to specify
the input image, the desired output matrix size (in voxels), and optionally an output file name.
If no output filename is specified, the script will automatically append "_resampled" to the input
filename and store it in the same directory.

This script defaults to using:
  - B-Spline interpolation (order=3)
  - Float pixel type (type=6)

Usage:
  call_antsresample <input> <new matrix> [output]

Mandatory:
  <input>         Input image to be resampled (e.g., NIfTI file)
  <new matrix>    Target voxel matrix size, specified as string in format: MxNxO
                  For example: "256x256x192"

Optional:                  
  <output>        Optional: Output filename for resampled image.
                  If omitted, output will be named <input>_resampled.nii.gz

Example:
  call_antsresample sub-01_T1w.nii.gz "256x256x192"
  -> Output: sub-01_T1w_resampled.nii.gz

Notes:
  - ResampleImage is called with the following parameters:
      * Interpolation type: 3 (B-Spline, order 3)
      * Pixel type: 6 (float)
  - Other interpolation types can be used by editing this script manually.
  - The image dimension is fixed to 3 (3D image).

Reference:
  https://github.com/ANTsX/ANTs/wiki/ResampleImage

---------------------------------------------------------------------------------------------------

USAGE
}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
input=${@:$OPTIND:1}
new_matrix=${@:$OPTIND+1:1}
output=${@:$OPTIND+2:1}

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${input}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${input}${RESET}\""
  exit 1
else
  input=$(readlink -f "${input}")
fi

if [[ -z "${new_matrix}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify a matrix (e.g., '256x256x192')"
  exit 1
fi

if [[ -z "${output}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# set output
if [[ -z "${output}" ]]; then
  output="${input/.nii.gz/_resampled.nii.gz}"
fi

 #  Usage: ResampleImage imageDimension inputImage outputImage MxNxO [size=1,spacing=0] [interpolate type] [pixeltype]
 #  Interpolation type:
 #    0. linear (default)
 #    1. nn
 #    2. gaussian [sigma=imageSpacing] [alpha=1.0]
 #    3. windowedSinc [type = 'c'osine, 'w'elch, 'b'lackman, 'l'anczos, 'h'amming]
 #    4. B-Spline [order=3]
 # pixeltype  :  TYPE
 #  0  :  char
 #  1  :  unsigned char
 #  2  :  short
 #  3  :  unsigned short
 #  4  :  int
 #  5  :  unsigned int
 #  6  :  float (default)
 #  7  :  double
 #

cmd=(
  ResampleImage
  3 
  "${input}"
  "${output}" 
  "${new_matrix}"
  3
  2
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ResampleImage"
  exit 1
fi
