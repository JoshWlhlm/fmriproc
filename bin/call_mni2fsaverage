#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_mni2fsaverage

Projects data in MNI152NLin6Asym (FSL-template) space directly to FSAverage space with a single in-
terpolation step using the method described here:
https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/registration/Wu2017_RegistrationFusion

Usage:
  call_mni2fsaverage [arguments] <input_file> 

Optional:
  -p <prefix>     decides 'prefix' in <prefix>_space-fsaverage_hemi-<L|R>_<suffix>
  -s <suffix>     decides 'suffix' in <prefix>_space-fsaverage_hemi-<L|R>_<suffix>
  -i <interp>     interpolation method (linear or nearest neighbour). Default is 'linear'

Options:
  -h|--help       print this help text
  --freeview      open FreeView for verification of output

Positional 
  input_file      file that needs to be transformed

Example:
  call_mni2fsaverage zstats1.nii.gz _desc-zstats1
  call_mni2fsaverage -o PWD -p sub-01_ses-1_task-pRF -s desc-zstat1 zstat1.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
interp="linear"
VERB=0
open_fv=0
while getopts :-:hr:o:p:t:i:s: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        tr)
          set_tr=1
          ;;
        help)
          Usage && exit 0
          ;; 
        freeview)
          open_fv=1
          ;;
        verbose)
          VERBOSE="--verbose"
          VERB=1
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;
    o)  out_dir=${OPTARG}
          ;;
    p)  prefix=${OPTARG}
          ;;
    s)  suffix=${OPTARG}
          ;;
    i)  interp=${OPTARG}
          ;;
    h)  Usage && exit 0
          ;; 
  esac
done

# error msg
if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
input_file=${@:$OPTIND:1}

#-----------------------------------------------------------------------------
# define inputs
if [[ ! -f "${input_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${input_file}${RESET}\""
  exit 1
else
  input_file="$(readlink -f "${input_file}")"
fi

# set output directory
if [[ -z "${out_dir}" ]]; then
  output_dir="${SUBJECTS_DIR}/fsaverage/volumes"
else
  output_dir="${out_dir}"
fi

if [[ ! -d "${output_dir}" ]]; then
  mkdir -p "${output_dir}"
fi

# set output name for ANTs-RF
if [[ -z "${suffix}" ]]; then
  suffix="desc-$(basename ${input_file} .nii.gz)"
fi

#-----------------------------------------------------------------------------
# make the script
new_script="${input_file/.nii.gz/.m}"
rm -r "${new_script}" 2>/dev/null

cmd=(
  make_antsrf_script \
  "${input_file}" \
  "${interp}" \
  "${output_dir}" \
  "${suffix}" \
  "${new_script}"
)

# call_matlab = in call_bashhelper
if [ ${VERB} -eq 1 ]; then
  echo "creating script with:"
  print_cmd "${cmd[@]}"
fi

eval "${cmd[@]}"
if [[ $? -ne 0 || ! -f "${new_script}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "make_antsrf_script" "Script ${BOLD_GREEN}${new_script}${RESET} was not created"
  exit 1
fi

#-----------------------------------------------------------------------------
# call_matlab = in call_bashhelper
if [ ${VERB} -eq 1 ]; then
  echo "Initializing matlab.."
fi

call_matlab "${new_script}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_matlab"
  exit 1
fi  

#-----------------------------------------------------------------------------
# stack output
if [ ${VERB} -eq 1 ]; then
  echo "Stacking gifti's into numpy-array"
fi

# stacking giftis into numpy array so we can load them in with Pycortex
lh="${output_dir}/lh.${suffix}.nii.gz"
rh="${output_dir}/rh.${suffix}.nii.gz"

# prefix for final output numpy file
if [[ -z ${prefix} ]]; then
  out_name="space-fsaverage_hemi-LR_${suffix}.npy"
else
  out_name="${prefix}_space-fsaverage_hemi-LR_${suffix}.npy"
fi

both_hemis="${output_dir}/${out_name}"
cmd=(
  call_stackgifti
  "${lh}"
  "${rh}"
  "${both_hemis}"
)

# print and run
print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "dcm2niix"
  exit 1
fi  

if [ ${VERB} -eq 1 ]; then
  echo "Wrote ${both_hemis}"
fi

#-----------------------------------------------------------------------------
# verify in FreeView
if [[ ${open_fv} -eq 1 ]]; then
  # Visualise lh results
  fs_dir="${SUBJECTS_DIR}/fsaverage/surf"
  cmd=(
    launch_freeview
    -f "${fs_dir}/lh.inflated":overlay="${lh}" "${fs_dir}/rh.inflated":overlay="${rh}"
    -viewport '3d'
  )

  if [[ ${VERB} -eq 1 ]]; then
    print_cmd "${cmd[@]}"
  fi
  eval "${cmd[@]}"
fi
