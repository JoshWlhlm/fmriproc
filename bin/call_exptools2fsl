#!/usr/bin/env python

import os
import sys
import getopt
from lazyfmri import (
    utils,
    dataset,
)

@utils.validate_cli_inputs(required_keys=["tsv_file", "output_base"])
def main(context):

    """
---------------------------------------------------------------------------------------------------
call_exptools2fsl

Convert a file obtained with Exptools2 to FSL-compatible 3-column files. Uses internally 'lazyfmri.
dataset.ParseExpToolsFile'.

Usage:
  call_exptools2fsl [options] -t <tsv file> -o <task ID>

Mandatory (required input):
  -t|--tsv        string-like path as obtained with Exptools2
  -o|--out        string representing the basename of output files (if not spec ified, the files
                  will be created based on the event-names as specified in the file). Should
                  include the directory to the files if the current working directory is not
                  sufficient (e.g.,<some path>/sub-003/ses-3/func/event will create
                  event?_run-?.txt)

Optional (flags with defaults):
    -d|--duration   duration of events (will default to 1s if empty)

Options (extra):
  -h|--help       print this help text
  -n|--no-bids    disable BIDS-read in of the file. Will default to subject=1 and run=1. Might
                  be necessary if your file is not in BIDS format (e.g., 'sub-0' will fail!)
  -v|--verbose    Turn on verbose messages

Outputs
  Per event a text file in 3-column format

Examples:
  call_exptools2fsl --no-bids -t <tsv file> -o <task ID> -d 2 # file is not bids, event = 2s
  call_exptools2fsl -t <tsv file> -o <task ID> # file is bids, event = 1s, custom output
  call_exptools2fsl -t <tsv file> # file is bids, event = 1s, read events from file
  call_exptools2fsl -t sub-003_ses-3_task-SR_run-3_events.tsv -o event -n -v

---------------------------------------------------------------------------------------------------
    """

    tsv_file = context.get("tsv_file")
    output_base = context.get("output_base")
    duration = context.get("duration", 1)
    use_bids = context.get("use_bids", True)
    verbose = context.get("verbose", False)

    if os.path.exists(tsv_file):
        exp = dataset.ParseExpToolsFile(
            tsv_file,
            use_bids=use_bids,
            verbose=verbose
        )
        
        exp.onsets_to_fsl(
            duration=float(duration),
            output_base=output_base
        )

if __name__ == "__main__":

    tsv_file    = None
    output_base = None
    duration    = 1
    use_bids    = True
    verbose     = False

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "nhvt:o:d:",
            ["help", "tsv=", "out=", "duration=", "verbose=", "no-bids"]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()            
        elif opt in ("-t", "--tsv"):
            tsv_file = arg
        elif opt in ("-o", "--out"):
            output_base = arg
        elif opt in ("-d", "--duration"):
            duration = arg
        elif opt in ("-v", "--verbose"):
            verbose = True
        elif opt in ("-n", "--no-bids"):
            use_bids = False

    main(context={
        "tsv_file": tsv_file,
        "output_base": output_base,
        "duration": duration,
        "use_bids": use_bids,
        "verbose": verbose
    })
