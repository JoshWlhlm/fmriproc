#!/usr/bin/env python

import os
import sys
import numpy as np
import nibabel as nb
from fmriproc.image import mgz2nii
opj = os.path.join

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_splitribbon

Split FreeSurfer's `ribbon.mgz` into binary gray matter (GM), white matter (WM), and combined cortex
masks in NIfTI format.

This script extracts key tissue regions from the `ribbon.mgz` file created by FreeSurfer. It uses 
the default FreeSurfer labeling:
  - 2: Left-White-Matter
  - 41: Right-White-Matter
  - 3: Left-Cortex (Gray Matter)
  - 42: Right-Cortex (Gray Matter)

Outputs include binary masks for:
  - Gray Matter (`_desc-ribbon_gm.nii.gz`)
  - White Matter (`_desc-ribbon_wm.nii.gz`)
  - Combined Cortical Mask (`_desc-ribbon_mask.nii.gz`)

Arguments:
  <subject>       FreeSurfer subject ID (used to locate SUBJECTS_DIR/<subject>/mri/ribbon.mgz)
  <output>        Basename path where output files will be saved. The script will append:
                    *_desc-ribbon_gm.nii.gz
                    *_desc-ribbon_wm.nii.gz
                    *_desc-ribbon_mask.nii.gz

Notes:
  - If the output directory does not exist, it will be created automatically.
  - Ribbon is converted to NIfTI using the `mgz2nii` utility from `fmriproc.image`.

Example:
  call_splitribbon sub-001 /project/derivatives/manual_masks/sub-001/ses-1/sub-001

This will generate:
  /project/derivatives/manual_masks/sub-001/ses-1/sub-001_desc-ribbon_gm.nii.gz
  /project/derivatives/manual_masks/sub-001/ses-1/sub-001_desc-ribbon_wm.nii.gz
  /project/derivatives/manual_masks/sub-001/ses-1/sub-001_desc-ribbon_mask.nii.gz

---------------------------------------------------------------------------------------------------
    """

    subject   = None
    output    = None

    if len(argv) < 2:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    # gather inputs
    subject = argv[0]
    output_base = argv[1]

    # set output
    output_dir = os.path.dirname(output_base)
    os.makedirs(output_dir, exist_ok=True)

    # fetch ribbon file
    ribbon_mgz = opj(os.environ.get('SUBJECTS_DIR'), subject, 'mri', 'ribbon.mgz')
    ribbon_nii = mgz2nii(ribbon_mgz)

    ribbon_img = nb.load(ribbon_nii)
    ribbon_data = ribbon_img.get_fdata().astype(int)

    # Define label mapping
    label_map = {
        'gm': [3, 42],
        'wm': [2, 41]
    }
    
    # convert
    mask_combined = np.zeros_like(ribbon_data)
    for label_name, label_values in label_map.items():
        mask = np.isin(ribbon_data, label_values).astype(np.uint8)
        nb.Nifti1Image(
            mask,
            affine=ribbon_img.affine,
            header=ribbon_img.header
        ).to_filename(f"{output_base}_desc-ribbon_{label_name}.nii.gz")
        mask_combined += mask

    # Save combined cortex mask
    cortex_mask = (mask_combined > 0).astype(np.uint8)
    nb.Nifti1Image(
        cortex_mask,
        affine=ribbon_img.affine,
        header=ribbon_img.header
    ).to_filename(f"{output_base}_desc-ribbon_mask.nii.gz")

if __name__ == "__main__":
    main(sys.argv[1:])
