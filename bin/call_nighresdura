#!/usr/bin/env python

try:
    from nighres.brain import mp2rage_dura_estimation
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys
import getopt
import os
from lazyfmri import utils
opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["inv2", "mask"], allow_input_dir=False)
def main(context):
    r"""
---------------------------------------------------------------------------------------------------
call_nighresdura

This script is a wrapper for the mp2rage object that can calculate a Unified T1-weighted
image and a quantitative T1 map, based on the magnitude and phase-information of the two
volumes of a MP2RAGE-sequence (Marques et al., 2010). It can also further correct this map
for B1 inhomogenieties using a B1 map (Marques et al., 2014)

Mandatory (required input):
    -i|--inv2       2nd inversion image
    -m|--mask       binary mask of inv2 or other modality with the same coordinates/dimensions/space

Optional (flags with defaults):
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'skullstripping'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")

Options (extra):
    -h|--help       print this help text

Outputs
    result (niimg): Dura probability image (-dura_proba)

Example:
    call_nighresdura \
        -i inv2.nii.gz \
        -m inv2_mask.nii.gz \
        -o derivatives/nighres \
        -n sub-001_desc

Notes:
    docs: https://nighres.readthedocs.io/en/latest/brain/mp2rage_dura_estimation.html
---------------------------------------------------------------------------------------------------
    """

    inv2_skull = context["inv2"]
    inv2_mask = context["mask"]
    output_dir = context.get("output_dir", opj(os.getcwd(), 'dura'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")

    #---------------------------------------------------------------------------------------------------
    # Run dura estimation
    mp2rage_dura_estimation(
        inv2_skull,
        inv2_mask,
        file_name=output_base,
        output_dir=output_dir,
        save_data=True
    )

    utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
    print()

    #---------------------------------------------------------------------------------------------------
    # Rename file to BIDS style
    print("Rename to more BIDS'ey style")
    fn_old = opj(output_dir, output_base + "_dura-proba.nii.gz")
    fn_new = opj(output_dir, output_base + "-dura_proba.nii.gz")

    if os.path.exists(fn_old):
        print(f" {os.path.basename(fn_old)} â†’ {gb}{os.path.basename(fn_new)}{end}")
        os.rename(fn_old, fn_new)

    print("Done")

if __name__ == "__main__":
    inv2_skull = None
    inv2_mask = None
    output_dir = opj(os.getcwd(), 'dura')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:m:o:n:",
            ["help", "inv2=", "mask=", "outputdir=", "name="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inv2"):
            inv2_skull = arg
        elif opt in ("-m", "--mask"):
            inv2_mask = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg

    main(context={
        "inv2": inv2_skull,
        "mask": inv2_mask,
        "output_dir": output_dir,
        "output_base": output_base
    })
