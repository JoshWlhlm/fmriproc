#!/usr/bin/env python

try:
    from nighres.brain import mp2rage_dura_estimation
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys
import getopt
import os
from lazyfmri import utils
rb = utils.color.RED+utils.color.BOLD
end = rb = utils.color.END

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_nighresdura

This script is a wrapper for the mp2rage object that can calculate a Unified T1-weighted
image and a quantitative T1 map, based on the magnitude and phase-information of the two
volumes of a MP2RAGE-sequence (Marques et al., 2010). It can also further correct this map
for B1 inhomogenieties using a B1 map (Marques et al., 2014)

Args:
    -i|--inv2       2nd inversion image
    -s|--mask       binary mask of inv2 or other modality with the same coordinates/dimensions/space
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'skullstripping'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")

Outputs
    taken from https://nighres.readthedocs.io/en/latest/brain/mp2rage_dura_estimation.html
    Dictionary collecting outputs under the following keys (suffix of output files in brackets)

    - result (niimg): Dura probability image (_dura-proba)

Example:
    call_nighresdura -i inv2.nii.gz -m inv2_mask.nii.gz -o derivatives/nighres -f sub-001_desc

---------------------------------------------------------------------------------------------------
    """

    inv2_skull = None
    inv2_mask = None
    output_dir = opj(os.getcwd(), 'dura')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(argv,"hi:m:o:b:",["help", "inv2=", "mask=", "outputdir=", "outputbase="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help")
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inv2"):
            inv2_skull = arg
        elif opt in ("-m", "--mask"):
            inv2_mask = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg

    if len(argv) < 2:
        print("\nNOT ENOUGH ARGUMENTS SPECIFIED")
        print(main.__doc__)
        sys.exit()

    #---------------------------------------------------------------------------------------------------
    # Check that input files exist
    required_files = {
        "INV2-image with skull": inv2_skull,
        "Brain mask": inv2_mask,
    }

    missing_files = [desc for desc, path in required_files.items() if not path or not os.path.isfile(path)]
    if missing_files:
        print("ERROR: The following required input files are missing or invalid:")
        for f in missing_files:
            print(f"  - {rb}{f}{end}")
        sys.exit(1)
    
    #---------------------------------------------------------------------------------------------------
    # run
    mp2rage_dura_estimation(
        inv2_skull,
        inv2_mask,
        file_name=output_base,
        output_dir=output_dir,
        save_data=True
    )

if __name__ == "__main__":
    main(sys.argv[1:])
