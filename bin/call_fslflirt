#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fslflirt

Wrapper for rigid-body registration using FSL FLIRT. By default, performs 6 DOF registration unless
overridden by user-specified options. Additional arguments can be passed after the required inputs.

Usage:
  call_fslflirt <fixed> <moving> <output> <matrix> [additional FLIRT options]

Arguments:
  <fixed>       Reference image (fixed)
  <moving>      Image to be registered (moving)
  <output>      Output registered image
  <matrix>      Output transformation matrix

Optional FLIRT arguments:
  Any additional flags (e.g. -cost mutualinfo, -interp sinc) can be added after the required 4 args
  These flags are added if not specified:
    -dof 6
    -cost normmi
    -searchrx -90 90
    -searchry -90 90
    -searchrz -90 90
    -interp sinc

Example:
  call_fslflirt fixed.nii.gz moving.nii.gz mov2fix.nii.gz matrix.mat -cost corratio

Notes:
  - Default uses 6 DOF (rigid-body), normalized mutual information, and wide search angles
  - Will skip registration if matrix file already exists

---------------------------------------------------------------------------------------------------

USAGE

}

# Require at least 4 arguments
if [[ $# -lt 4 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
ref="${1}"
in="${2}"
out="${3}"
omat="${4}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${ref}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find FIXED image \"${BOLD_GREEN}${ref}${RESET}\""
  exit 1
else
  ref=$(readlink -f "${ref}")
fi

if [[ ! -f "${in}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find MOVING image \"${BOLD_GREEN}${in}${RESET}\""
  exit 1
else
  in=$(readlink -f "${in}")
fi

if [[ ! -f "${omat}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find WARP file \"${BOLD_GREEN}${omat}${RESET}\""
  exit 1
else
  omat=$(readlink -f "${omat}")
fi

if [[ -z "${out}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
shift 4  # Remove the first 4 arguments

# Optional arguments to pass to flirt
extra_args=("$@")

#-----------------------------------------------------------------------------
# Inject defaults if not specified
arg_str="${extra_args[*]}"

[[ ! "${arg_str}" =~ "-cost" ]]     && extra_args+=("-cost" "normmi")
[[ ! "${arg_str}" =~ "-searchrx" ]] && extra_args+=("-searchrx" "-90" "90")
[[ ! "${arg_str}" =~ "-searchry" ]] && extra_args+=("-searchry" "-90" "90")
[[ ! "${arg_str}" =~ "-searchrz" ]] && extra_args+=("-searchrz" "-90" "90")
[[ ! "${arg_str}" =~ "-interp" ]]   && extra_args+=("-interp" "sinc")
[[ ! "${arg_str}" =~ "-dof" ]]      && extra_args+=("-dof" "6")

#-----------------------------------------------------------------------------
# Run it
cmd=(
  flirt
  -in "${in}"
  -ref "${ref}"
  -out "${out}"
  -omat "${omat}"
  "${extra_args[@]}"
)

# print and run
echo "Running FLIRT with command:"
print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "flirt"
  exit 1
fi

echo "Done"
