#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_editoutside

Script to create or edit the 'outside' segmentation. The script will open ITK-Snap to create a 
manual edit file.

Usage:
  call_editoutside <fs_dir> <segmentation file name>

Arguments:
  -s <subject>    subject ID
  -n <session>    session number
  -a <depth>      depth for 'find_hierarchical_anatomy' to derive appropriate anatomical directory.
                  default = 4 (starts looking in DIR_DATA_DERIV/cat12)

Options:
  -h|--help       print this help text

Positional:  
  <t1w-image>     base image to use as reference
  <output name>   output name for outside, automatically appends _desc-outside.nii.gz

Specify only '-s' and/or 'n' if you've run the pipeline as it is without changing directories or 
filenames; this option will look for all the default directories and files. If you want to edit
your own things, specify the FreeSurfer directory and output name for segmentation and leave the 
'-s' and '-n' flag empty.


Example:
  call_editoutside sub-001_T1w.nii.gz sub-001_desc-sagittalsinus.nii.gz
  call_editoutside -s sub-001 -n 1
  
---------------------------------------------------------------------------------------------------

USAGE

}


if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
anat_depth=4
while getopts :-:hs:n:a: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;   
    h)  Usage && exit 0
          ;;  
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    a)  anat_depth=${OPTARG}
          ;;          
  esac
done

#-----------------------------------------------------------------------------
# define inputs based on positional or flag arguments
if [[ ! -z ${sub} ]]; then

  # collect subject name
  read base_path base <<< "$(collect_session_info "$ses" "$sub")"
  mask_dir="${DIR_DATA_DERIV}/manual_masks/${base_path}"

  # anatomical reference
  ANAT_DIR=$(find_hierarchical_anatomy ${anat_depth})
  if [[ ! -d "${ANAT_DIR}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "find_hierarchical_anatomy" "Directory ${BOLD_GREEN}${ANAT_DIR}${RESET} does not exist. Reduce depth (=${anat_depth})"
    exit 1
  fi

  # search for reference in directory
  REF=$(
    find "${ANAT_DIR}/${base_path}" \
    -type f \
    -name "${sub}*" \
    -and -name "*T1w.nii.gz"
    2>/dev/null
  )

  if [[ ! -f "${REF}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "find" "No file with ${BOLD_RED}${sub}*${RESET} and ${BOLD_RED}*T1w.nii.gz${RESET} in ${BOLD_GREEN}${ANAT_DIR}${RESET}"
    exit 1
  else
    REF=$(readlink -f "${REF}")
  fi

  MAN="${mask_dir}/${base}_acq-${DATA_UPR}_desc-outside.nii.gz"
else
  # reference is positional input
  REF=${@:$OPTIND:1}

  if [[ ! -f "${REF}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "find" "Anatomical file ${BOLD_GREEN}${REF}${RESET} does not exist"
    exit 1
  else
    REF=$(readlink -f "${REF}")
  fi

  MAN=${@:$OPTIND+1:1}
fi

#-----------------------------------------------------------------------------
# create empty
if [[ ! -f "${MAN}" ]]; then
  if [[ ! -d "$(dirname ${MAN})" ]]; then
    mkdir -p "$(dirname ${MAN})"
  fi
  print_create_img "${MAN}"
  cmd=(
    call_createimg
    "${REF}"
    "${MAN}"
  )

  # print and run
  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 || ! -f "${MAN}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "call_createimg" "Mask ${BOLD_GREEN}${MAN}${RESET} was not created"
    exit 1
  fi  
fi

#-----------------------------------------------------------------------------
# launch itksnap
echo -e "T1w: ${BOLD_GREEN}${REF}${RESET}"
echo -e "Mask: ${BOLD_GREEN}${MAN}${RESET}"

cmd=(
  launch_itksnap
  -g "${REF}"
  -s "${MAN}"
)

# print and run
print_cmd "${cmd[@]}" && eval "${cmd[@]}" 2>/dev/null
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "launch_itksnap"
  exit 1
fi

#-----------------------------------------------------------------------------
# copy header
cmd=(
  call_copyheader
  "${REF}"
  "${MAN}"
)

# print and run
print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "call_copyheader"
  exit 1
fi
