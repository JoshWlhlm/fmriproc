#!/usr/bin/env python

import os
import sys
import getopt
from nilearn import image
from lazyfmri import utils

opj = os.path.join
opd = os.path.dirname
rb = f"{utils.color.RED}{utils.color.BOLD}"
end = utils.color.END


@utils.validate_cli_inputs(required_keys=["input_file", "output_file"])
def main(context):
    """
---------------------------------------------------------------------------------------------------
call_createmask

This script is a wrapper for the generation of a mask based on FSL and SPM. Generally, this is used
in the MP(2)RAGE(ME) workflows to create a first instance of a brain mask. This brain mask is later
refined using CAT12. The idea is simple: MP2RAGE(ME) images can have pepper corn noise structure
on the outside of the brain, which interferes with automatic brain extraction tools. In case of 
MP2RAGE(ME)s, we can use the INV2-image instead. We create a mask using FSL and SPM (works with
standalone version), then combine them. This is because each mask can miss particular areas which 
is compensated with the other.

Arguments:
  -i|--input      image to use for processing (e.g., INV2 or MPRAGE image)
  -o|--output     file name of the output mask

Optional (flags with defaults):
  -t|--t1         in case '--input' is INV2, you can specify the T1w image to apply the genera-
                  ted mask to remove noise around the brain. Generally should be done for
                  MP2RAGE(ME)s, not MPRAGE.

Options (extra):
  -h|--help       print this help text
  --verbose       print some stuff to the terminal
  --skip-bg       do not attempt to remove the noise structure around the brain (in case of
                  MPRAGE image)

Outputs:
    T1w: nifti file of denoised T1w image
    Mask: nifti file of brain mask

Examples:
    call_createmask -i inv2.nii.gz -o spm_mask.nii.gz # no t1
    call_createmask --input inv2.nii.gz --output spm_mask.nii.gz --t1 t1w.nii.gz # add t1
    call_createmask -i t1w.nii.gz -o spm_mask.nii.gz --skip-bg # skip background stuff

---------------------------------------------------------------------------------------------------
    """

    input_file = context.get("input_file")
    output_file = context.get("output_file")
    verbose = context.get("verbose", False)
    apply_mask = context.get("apply_mask", True)
    t1_file = context.get("t1_file")
    lower = context.get("lower", 0.01)
    upper = context.get("upper", 0.99)

    #-----------------------------------------------------------------------------
    # check if T1-file was specified
    if apply_mask:
        if not isinstance(t1_file, str) or not os.path.exists(t1_file):
            print(
                f" {rb}WARNING{end}: apply_mask was set to True, but no valid T1-file was specified..")
            apply_mask = False

    #-----------------------------------------------------------------------------
    # generate FSL mask
    fsl_mask = opj(opd(input_file), 'tmp_mask.nii.gz')
    if not os.path.exists(fsl_mask):
        cmd = f"bet2 {input_file} {opj(opd(input_file), 'tmp')} -m -f 0.2"
        utils.run_shell_wrapper(
            cmd,
            "Make mask with FSL from INV2-image",
            verb=verbose
        )

    #-----------------------------------------------------------------------------
    # generate SPM mask
    if not os.path.exists(output_file):
        cmd = f'call_spmmask {input_file} {output_file}'
        utils.run_shell_wrapper(
            cmd,
            "Make mask with SPM from INV2-image",
            verb=verbose
        )

        # SPM-mask sometimes gets rid of a part of the cerebellum; adding FSL's bet2 mask to it improves this area,
        # but also leaves in more dura. This will be removed, however, during the CAT12 stage
        if os.path.exists(output_file) and os.path.exists(fsl_mask):
            utils.verbose(
                "Combining SPM & FSL mask to include cerebellum too", verbose)
            try:
                new_mask = image.math_img(
                    '(spm + fsl) > 0',
                    spm=output_file,
                    fsl=fsl_mask
                )
            except Exception as e:
                raise ValueError(f"Could not complete operation: {e}")

            new_mask.to_filename(output_file)

    #-----------------------------------------------------------------------------
    # remove files starting with 'tmp'
    utils.remove_files(
        opd(input_file),
        'tmp',
        ext=False
    )

    #-----------------------------------------------------------------------------
    # remove pepper noise pattern around brain
    if apply_mask:
        cmd = f"""call_rmbackground \
            --t1w {t1_file} \
            --mask {output_file} \
            --inv2 {input_file} \
            --output {t1_file}"""
        
        # run
        utils.run_shell_wrapper(
            cmd,
            "Removing noise pattern around the brain",
            verb=verbose
        )

        utils.verbose(f"{rb}TIP{end}: check the brain mask; if needed, edit it, remove T1w.nii.gz-file and re-run", True)

        #-----------------------------------------------------------------------------
        # do some final intensity things
        print()
        utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
        cmd = f"call_wsd -l {lower} -u {upper} {t1_file}"
        utils.run_shell_wrapper(
            cmd,
            "Running post-processing to fix intensities and datatype",
            verb=verbose
        )


if __name__ == "__main__":

    input_file = None
    output_file = None
    verbose = False
    apply_mask = True
    t1_file = None
    lower = 0.01
    upper = 0.99

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:o:t:u:l:",
            ["help", "input=", "output=", "t1=",
                "skip-bg", "verbose", "lower=", "upper="]
        )[0]
    except getopt.GetoptError:
        print("ERROR while handling arguments; did you specify an illegal/non-defined argument?")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--input"):
            input_file = os.path.abspath(arg)
        elif opt in ("-o", "--output"):
            output_file = arg
        elif opt in ("-u", "--upper"):
            upper = float(arg)
        elif opt in ("-l", "--lower"):
            lower = float(arg)
        elif opt in ("-t", "--t1"):
            t1_file = os.path.abspath(arg)
        elif opt in ("--skip-bg"):
            apply_mask = False
        elif opt in ("--verbose"):
            verbose = True

    main(context={
        "input_file": input_file,
        "output_file": output_file,
        "verbose": verbose,
        "apply_mask": apply_mask,
        "t1_file": t1_file,
        "lower": lower,
        "upper": upper
    })
