#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antssanlm

Wrapper for SANLM denoising with ANTs' DenoiseImage. Takes an input file and an output file
using default setting for 'DenoiseImage'. You can add more flags directly to the function
after specifying the input and output files. This is the ANTs version of the call_spmsanlm, which
requires a Matlab/MCR installation.

This script allows specifying:
- Required input file
- Required output file
- Any additional options from DenoiseImage, passed as extra arguments (kwargs).

Usage:
  call_antssanlm <input file> <output file> [extra_options]

Options:
  -o              Overwrite existing output file
  -v              Make some noise
  [extra_options] anything after gets passed to DenoiseImage

Example:
  call_antssanlm input.nii.gz output.nii.gz -x mask.nii.gz -r 1

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Defaults
ow=0
verbose=0

#-----------------------------------------------------------------------------
# Parse options
while getopts "vo:" opt; do
  case $opt in
    o) ow=1 ;;
    v) verbose=1 ;;
    *) Usage ;;
  esac
done
shift $((OPTIND-1))

#-----------------------------------------------------------------------------
# Required arguments
if [[ $# -lt 1 ]]; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
input="${1}"
output="${2:-}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${input}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${input}${RESET}\""
  exit 1
else
  input="$(readlink -f "${input}")"
fi

if [[ -z "${output}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

# Shift away input & output arguments if present
shift 2 || true

# Capture any additional arguments passed after "--"
extra_args=()
while [[ $# -gt 0 ]]; do
  extra_args+=("$1")
  shift
done

#-----------------------------------------------------------------------------
# Run DenoiseImage

if [[ -z "${output}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Please specify an output file"
  exit 1
fi

dim=$(fslval "${input}" dim0)
if [[ -z "$dim" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fslval"
  exit 1
fi

cmd=(
  DenoiseImage
  --image-dimensionality "${dim}"
  --input-image "${input}"
  --output "${output}"
  --verbose ${verbose}
  "${extra_args[@]}"
)

# print and run
if [[ ${verbose} -eq 1 ]]; then
  echo "Executing: ${cmd[*]}"
fi

eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "DenoiseImage"
  exit 1
fi

if [[ ${verbose} -eq 1 ]]; then
  echo "Denoising complete."
fi
