#!/usr/bin/env python

import os
from nilearn import image
from scipy import ndimage
import sys, getopt
from lazyfmri import utils
opj = os.path.join
rb = f"{utils.color.RED}{utils.color.BOLD}"
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = f"{utils.color.END}"

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_gdhcombine

Combine the outputs from FAST (fmriprep or FSL itself), FreeSurfer, and Nighres' MGDM. If possible, 
we will also include CAT12-segmentations. These should be located in DIR_DATA_DERIV/cat12/sub-xxx/.
Also takes in manual edits that are weighted 5-times more than the segmentations from the other
softwares. 

Args:
    -s|--sub        subject ID
    -q|--cat        directory in DIR_DATA_DERIV containing labels from CAT12 (optional!)
    -a|--fast       directory containing segmentations from FAST
    -b|--fs         directory containing segmentations from FreeSurfer
    -c|--nighres    directory containing segmentations from Nighres
    -d|--manual     directory containing manual edits
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'masks'))
    -n|--outputbase basename for output (default is "subject_acq-MP2RAGE_desc")

Example:
    call_gdhcombine \
        --sub sub-01
        --cat cat12/sub-01/ses-1
        --fast fmriprep/sub-01/ses-1/anat
        --fs freesurfer/sub-01
        --nighres nighres/sub-01/ses-1/cruise
        --manual manual_masks/sub-01/ses-1
        --outputdir manual_masks/sub-01/ses-1
        --outputbase sub-01_ses-1_acq-MP2RAGE

Notes:
    if you only specify the subject ID, it will look for the files in the environmental variables
    Nighres/FreeSurfer/fMRIprep are compulsory, manual edits & CAT12 are optional!
---------------------------------------------------------------------------------------------------
    """

    subject     = None
    session     = None
    fprep_prob  = None
    fs          = None
    nigh_prob   = None
    cat_prob    = None
    output_dir = opj(os.getcwd(), 'masks')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(argv,"hs:q:a:f:c:d:o:b:n:",["sub=", "ses=", "cat=", "fast=", "fs=", "nighres=", "manual=", "outputdir=", "outputbase="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print(main.__doc__)
            sys.exit()
        elif opt in ("--sub"):
            subject = arg
        elif opt in ("--ses"):
            session = arg            
        elif opt in ("-q", "--cat"):
            cat_prob = arg            
        elif opt in ("-a", "--fast"):
            fprep_prob = arg
        elif opt in ("-f", "--fs"):
            fs = arg
        elif opt in ("-c", "--nighres"):
            nigh_prob = arg
        elif opt in ("-d", "--manual"):
            man_edit = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--outputbase"):
            output_base = arg

    if len(argv) < 1:
        utils.verbose("\nNEED AT LEAST A SUBJECT ID", True)
        utils.verbose(main.__doc__, True)
        sys.exit()
    
    # At least fMRIprep/Nighres/FreeSurfer need to be specified. Manual & CAT12 are optional
    if not fprep_prob:
        raise ValueError("Need an fmriprep-directory")

    if not nigh_prob:
        raise ValueError("Need a nighres-directory")

    if not fs:
        raise ValueError("Need a FreeSurfer-directory")

    # split ribbon.mgz into wm/gm components
    utils.verbose("Split FreeSurfer's ribbon files", True)
    base_name= opj(man_edit, f"{subject}_ses-1_acq-{os.environ.get('DATA')}")
    cmd = f"call_splitribbon {subject} {base_name}"
    utils.run_shell_wrapper(cmd)

    # Load and resample
    utils.verbose("Load and resample segmentations to nighres-output", True)
    try:
        search_terms = {
            "wm": "manualsegwm",
            "gm": "manualseggm",
            "outside": "desc-outside.nii.gz"
        }

        manual = {
            key: utils.get_file_from_substring(val, man_edit, return_msg=None)
            for key, val in search_terms.items()
        }
    except:
        manual = None
    
    ## Nighres: compulsory
    utils.verbose(f" {gb}nighres{end}..", True)
    search_terms = {
        "wm": "proba_cr-wm.nii.gz",
        "gm": "proba_cr-gm.nii.gz",
        "csf": "proba_cr-csf.nii.gz"
    }

    nighres = {
        key: utils.get_file_from_substring(val, nigh_prob)
        for key, val in search_terms.items()
    }

    for i in nighres:
        if isinstance(nighres[i], list):
            raise ValueError(f"Found more than 1 file for '{i}'-segmentation from Nighres containing string 'proba_cr-{i}.nii.gz'..\n{nighres[i]}")    

    ## fMRIprep: compulsory
    utils.verbose(f" {gb}fmriprep{end}..", True)

    labels = {
        "wm": [f"{os.environ.get('DATA')}", "label-WM"],
        "gm": [f"{os.environ.get('DATA')}", "label-GM"],
        "csf": [f"{os.environ.get('DATA')}", "label-CSF"]
    }

    fmriprep = {
        key: utils.get_file_from_substring(val, fprep_prob)
        for key, val in labels.items()
    }

    for i in fmriprep:
        if isinstance(fmriprep[i], list):
            raise ValueError(f"Found more than 1 file for '{i}'-segmentation from fMRIprep/FAST with '{labels[i]}'..\n{fmriprep[i]}")
        else:
            fmriprep[i] = image.resample_to_img(
                fmriprep[i],
                nighres['gm'],
                interpolation='nearest'
            )
            
    ## CAT12
    utils.verbose(f" {gb}CAT12{end}..", True)
    cat_labels = {
        "gm": "p1",
        "wm": "p2",
        "csf": "p3"
    }

    cat = {
        key: image.resample_to_img(
            utils.get_file_from_substring(val, cat_prob),
            nighres["gm"],
            interpolation="nearest"
        )
        for key, val in cat_labels.items()
    }

    # FreeSurfer
    utils.verbose(f" {gb}FreeSurfer{end}..", True)
    freesurfer_labels = {
        "wm": "ribbon_wm.nii.gz",
        "gm": "ribbon_gm.nii.gz",
        "cx": "ribbon_mask.nii.gz"
    }

    freesurfer = {}
    for key, fname in freesurfer_labels.items():
        img = utils.get_file_from_substring(fname, man_edit)
        resampled = image.resample_to_img(
            img, 
            nighres["gm"],
            interpolation="nearest"
        )
        resampled.to_filename(img)
        freesurfer[key] = img

    # combine segmentations
    utils.verbose("Combining segmentations", True)
    utils.verbose(f" {gb}wm{end}..", True)
    if manual['wm'] is not None:
        wm = image.math_img(
            'fmriprep + cat + freesurfer + manual*5',
            cat=cat['wm'],
            fmriprep=fmriprep['wm'],
            freesurfer=freesurfer['wm'],
            manual=image.resample_to_img(manual['wm'], nighres['wm'], interpolation='nearest')
        )
    else:
        wm = image.math_img(
            'fmriprep + cat + freesurfer',
            cat=cat['wm'],
            fmriprep=fmriprep['wm'],
            freesurfer=freesurfer['wm']
        )

    utils.verbose(f" {gb}gm{end}..", True)
    if manual['gm'] is not None:
        gm = image.math_img(
            'fmriprep + cat*3 + freesurfer + manual*5',
            fmriprep=fmriprep['gm'],
            cat=cat['gm'],
            freesurfer=freesurfer['gm'],
            manual=image.resample_to_img(manual['gm'], nighres['gm'])
        )
    else:
        gm = image.math_img(
            'fmriprep + cat + freesurfer',
            fmriprep=fmriprep['gm'],
            cat=cat['gm'],
            freesurfer=freesurfer['gm']
        )

    utils.verbose(f" {gb}csf{end}..", True)
    csf = image.math_img('3 * cat', cat=cat['csf'])

    utils.verbose(f" {gb}total{end}..", True)
    total_prob = image.math_img(
        'wm + gm + csf',
        wm=wm,
        gm=gm,
        csf=csf
    )

    utils.verbose("Calculating normalized tissue probability maps and writing output files...", True)

    # Normalize tissue probability maps
    tissue_maps = {
        'WM': image.math_img('wm / total_prob', wm=wm, total_prob=total_prob),
        'GM': image.math_img('gm / total_prob', gm=gm, total_prob=total_prob),
        'CSF': image.math_img('csf / total_prob', csf=csf, total_prob=total_prob),
    }

    # Write each map to file
    out_files = {}
    for label, img in tissue_maps.items():
        out_file = opj(output_dir, f"{output_base}_label-{label}_probseg.nii.gz")
        img.to_filename(out_file)
        out_files[label] = out_file
        utils.verbose(f" wrote normalized {label}-probability map â†’ {gb}{out_file}{end}", True)


    # set midbrain to one in WM and to zero in GM/CSF
    utils.verbose("Removing midbrain", True)
    utils.run_shell_wrapper(f"call_setmasktoone -i {out_files['WM']} -m {freesurfer['wm']}")
    utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['WM']} -m {out_files['CSF']}")
    utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {freesurfer['wm']}")
    
    # get rid of outside stuff
    if isinstance(manual['outside'], str):
        utils.verbose("Set 'outside' mask to zero", True)
        utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {manual['outside']}")

    # make inside mask
    utils.verbose("Create 'inside' mask", True)
    inside_mask = image.math_img('wm > 0.45', wm=wm)
    inside_mask = image.largest_connected_component_img(inside_mask)
    inside_mask = image.new_img_like(inside_mask,ndimage.binary_closing(inside_mask.get_fdata(),iterations=3))
    inside_mask.to_filename(opj(output_dir, output_base + '_desc-inside.nii.gz'))

    utils.verbose("Done", True)

if __name__ == "__main__":
    main(sys.argv[1:])
