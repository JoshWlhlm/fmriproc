#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
call_loadsetup
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_freesurfer

Wrapper for surface parcellation with FreeSurfer. Called in spinoza_freesurfer. You can also run
this script after editing your volumes/surfaces. Read below what the possible options and defaults
are. 

Usage:
  call_freesurfer [arguments] [options]

Mandatory (required input):
  -s <subj ID>    subject ID as per output of FreeSurfer (e.g., 'sub-001')
  -t <t1 input>   T1-weighted image (not necessary if you're running debugging mode)

Optional (flags with defaults):
  -p <t2 input>   T2-weighted image (not necessary, but recommended for better pial-surface
                  segmentation
  -r <stage>      Which stage of recon-all should be run; combinations are possible!
                  Possible options are:
                    'all' = all stages (Perform all reconstruction steps, including
                            subcortical segmentation) [default]
                    '1'   = autorecon1 (Motion correction through skull strip)
                    '2'   = autorecon2 (Subcortical segmentation through make final
                            surfaces)
                    '3'   = autorecon3 (Cortical parcellation)
                    '12'  = autorecon1 and autorecon2 (do your edits after this step)
                    '23'  = autorecon2 and autorecon3 (perform any edits and re-run with
                            '-e flag')
  -e <edit type>  What type of edit did you perform after autorecon2? Possible options are:
                    'cp'  = you made normalization edits  > runs -autorecon2-cp
                    'wm'  = you made white matter edits   > runs -autorecon2-wm
                    'pial'= you made pial edits           > runs -autorecon-pial
                    'aseg'= edits to aseg.presurf.mgz     > runs -autorecon2-noaseg
  -j <cpus>       number of cores to use (default is 2). As we parallellize over hemispheres
                  by default, the number of cores is divided by 2. 
  -o <other>      Here you can specify the gcut-option to remove latched on pial surface
  -x <expt file>  expert option file that maps to '-expert'. See:
                  \REPO_DIR/misc/example_experts.opts
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -k <kwargs>     Extra arguments that will be directly passed to 'recon-all'. The format should 
                  be as follows: different parameters comma-separated, and parameter-value pair 
                  separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                    "-k -mail,-deface"

Options:
  -h|--help       print this help text
  --freeview      Open FreeView automatically (default is NO!)
  --force-exec    Force execution even though directory exists already
  --sge           Submit the script to a cluster using a template script
  --local         Force local processing even though cluster is available
  --no-t2         Do not reuse T2 with autorecon3. Must be used in concert with '-e' and
                  '-r'. By default, we'll re-use the T2 if present. Same flag should be 
                  used for not re-using FLAIR images
  --no-highres    Turn of highres mode by setting '-highres' flag empty
  --xopts-use     maps to '-xopts-use' for existing expert option file; use existing file
  --xopts-clean   maps to '-xopts-clean' for existing expert option file; delete existing 
                  file
  --xopts-overwrite   maps to '-xopts-overwrite' for existing expert option file; use new file

Instructions for editing (from Andrew Jahn's YouTube series):
  - Control points (intensity normalization errors):
    White matter is incorrectly labeled as gray matter, which happens mostly in the ventral-
    temporal lobes and the orbito-frontal cortex. You can fix this with 'control points', which
    boost the intensity surrounding the control point

    1.) Open freeview with 'call_freeview <subj ID> surf 0'
    2.) Find slices where the problems begins and starts (easiest in axial view)
    3.) To add control points, click 'File'>'New point set'>name it 'control.dat'>select 'brain-
        mask.mgz' as tempalte
    4.) Left-click voxels that are white matter but not included in the WM-boundary. Space out 
        control points by a few mm
    5.) When you're done, click on 'File'>'Save Point Set as'>'control.dat' in the 'tmp'-folder
    6.) Re-run with call_freesurfer -s sub-001 -r 23 -e cp

  - Skullstripping: the GCUT-option
    When the skull has been mostly removed, but excessive dura remain, you can use the GCUT-option.

    1.) Make a back-up of the directory
    2.) Run call_freesurfer -s <subj ID> -o gcut
    3.) This outputs a file called brainmask.gcut.mgz
    4.) If this has fixed the problem, run call_freesurfer -s <subj ID> -r 23 (leave '-e' empty so 
        we know you did gcut)

  - Pial edits:
    If the above strategy was not successful, you can try more aggressive skullstripping, but this 
    usually does more harm than good. In that case, pial-edits are recommended.

    1.) Open freeview with 'call_freeview <subj ID> surf 0'
    2.) Make sure 'brainmask.mgz' is highlighted, and press 'recon-edit' icon (head with 'R' and 
        pencil)
    3.) To remove voxels, pressing 'shift'+left mouse
    4.) Find slices where the problems begins and starts (easiest in axial view). Be conservative 
        though!
    5.) When you're done, press 'File'>'Save Volume'
    6.) Re-run with call_freesurfer -s sub-001 -r 23 -e pial

Example (TL;DR):
  # Regular recon-all
  call_freesurfer -s sub-01 -t sub-01_ses-1_T1w.nii.gz

  # add T2
   call_freesurfer -s sub-01 -t sub-01_ses-1_T1w.nii.gz -p sub-01_ses-1_T2w.nii.gz

  # run gcut
  call_freesurfer -s sub-01 -o gcut

  # then, after gcut, rerun autonrecon2/3
  call_freesurfer -s sub-01 -r 23
  
  # After control points
  call_freesurfer -s sub-01 -r 23 -e cp
  
  # After call_gdhinject or white matter edits
  call_freesurfer -s sub-01 -r 23 -e wm
  
  # After pial edits
  call_freesurfer -s sub-01 -r 23 -e pial

Notes:
  When an expert options is passed, it will be copied to scripts/expert-options. Future calls to 
  recon-all, the user MUST explicitly specify how to treat this file. Options are (1) use the file 
  ('--xopts-use'), or (2) delete it ('--xopts-clean'). If this file exsts and the user specifies 
  another expert options file, then the user must also specify '--xopts-overwrite'.

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
FREEVIEW=0
FORCE_EXEC=0
run_local=1
highres_flag="-hires"
XOPTS_=""
EXPERT_FILE=""
reuse_t2=1
allowed_edits=("cp" "wm" "pial" "aseg")
n_cpus=2
stage="all"
kwargs=""
while getopts :-:hs:t:p:r:e:o:f:c:x:q:j:k: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in     
        freeview)
          FREEVIEW=1
          ;;            
        force-exec)
          FORCE_EXEC=1
          ;;          
        sge)
          run_local=0
          ;;        
        local)
          run_local=1
          ;;   
        no-highres)
          highres_flag=""
          ;; 
        no-t2)
          reuse_t2=0
          ;;            
        xopts-use)
          XOPTS_="-xopts-use"
          ;;             
        xopts-clean)
          XOPTS_="-xopts-clean"
          ;;               
        xopts-overwrite)
          XOPTS_="-xopts-overwrite"
          ;;              
        help)
          Usage && exit 0
          ;;         
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;    
    s)  subj_ID=${OPTARG}
          ;;
    t)  T1=${OPTARG}
          ;;
    p)  T2=${OPTARG}
          ;;
    r)  stage=${OPTARG}
          ;;
    e)  edit=${OPTARG}
          ;;
    o)  option=${OPTARG}
          ;;
    x)  EXPERT_FILE=${OPTARG}
          ;;    
    q)  SGE_QUEUE=${OPTARG}
          ;;  
    j)  n_cpus=${OPTARG}
          ;;
    k)  kwargs=${OPTARG}
          ;;          
    h)  Usage && exit 0
          ;;                             
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

if [[ -z "${SUBJECTS_DIR}" ]]; then
  echo "SUBJECTS_DIR is not set"
  exit 1
fi

if [[ -z "${subj_ID}" ]]; then
  Usage
  echo "Whatever you want to do, I'll always need a subject ID"
  exit 1
fi

# check if we got expert file
if [[ ! -z "${EXPERT_FILE}" ]]; then
  if [[ ! -f "${EXPERT_FILE}" ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "file" "Specified expert file \"${EXPERT_FILE}\" does not exist"
    exit 1
  fi
  expert_flag="-expert ${EXPERT_FILE}"
  echo "Expert options: \"${EXPERT_FILE}\""

  # check if there's an expert-options file already and whether the user has specified a protocol
  subj_xopts="${SUBJECTS_DIR}/${subj_ID}/scripts/expert-options"
  if [[ -f "${subj_xopts}" ]]; then
    if [[ -z "${XOPTS_}" ]]; then
      echo 
      print_line -
      print_error_msg "$(basename ${0})" "file" "An expert-options file was specified, but one already exists [${BOLD_GREEN}${subj_xopts}${RESET}]."
      echo "Please specify the protocol to deal with this with one of the following flags:"
      echo "  1) --xopts-use;       use the existing file"
      echo "  2) --xopts-clean;     delete the existing file"
      echo "  3) --xopts-overwrite; use a new file"
      exit 1
    fi
  fi
else
  XOPTS_=""
  expert_flag=""
fi

#-----------------------------------------------------------------------------
# check cores
check_n_cpus() {
  # Detect slots / cores in a portable way
  if   [[ -n "$SLURM_CPUS_PER_TASK" ]]; then
    NCORES=$SLURM_CPUS_PER_TASK
  elif [[ -n "$NSLOTS" ]]; then
    NCORES=$NSLOTS
  elif [[ -n "$PBS_NP" ]]; then
    NCORES=$PBS_NP
  else
    # portable on Linux, macOS, *BSD
    if command -v getconf &>/dev/null; then
      NCORES=$(getconf _NPROCESSORS_ONLN)
    else
      # fallback for very old systems
      NCORES=1
    fi
  fi

  echo $NCORES

}
#-----------------------------------------------------------------------------
# Create function that submits or runs stuff locally
define_fs_command(){

  local subj_id="${1}"
  local stage_id="${2}"
  local stage_flag="${3}"
  local t1_flag="${4}"
  local t2_flag="${5}"

  # check if function exists, will throw an error if it doesn't exist
  fn_exists freesurfer
  echo && print_line -
  echo -e "Using FreeSurfer from: ${BOLD_GREEN}$(which freesurfer)${RESET}"

  # check number of cores
  available_cores="$(check_n_cpus)"

  # check if it's not overflowing the system:
  if [[ "${n_cpus}" -gt "${available_cores}" ]]; then
    if [ ${FORCE_EXEC} -eq 0 ]; then
      echo && print_line -
      print_error_msg "$(basename ${0})" "check_n_cpus" "Number of ${BOLD_RED}requested${RESET} cores (${BOLD_RED}${n_cpus}${RESET}) is more than the number of ${BOLD_RED}available${RESET} cores (${available_cores}). Use '--force-exec' to force the issue.."
      exit 1
    else
      echo -e "${BOLD_RED}WARNING${RESET}: You've requested ${n_cpus} cores, which is more than the available cores (${BOLD_RED}${available_cores}${RESET})"
    fi
  else
    # throw warning in its not modulo 2
    if (( n_cpus % 2 != 0 )); then
      echo -e "${BOLD_RED}WARNING${RESET}: You've requested ${n_cpus} cores, which isn't a multiple of 2. Splitting evenly will round down to $(( n_cpus / 2 )) threads per hemisphere, leaving one core unused."
    fi

    # split hemispheres
    hemi_cpu=$(( n_cpus / 2 ))
    echo -e "Allocating ${BOLD_RED}$hemi_cpu${RESET} OpenMP threads per hemisphere (total ${hemi_cpu}×2=${BOLD_RED}$((hemi_cpu*2))${RESET} cores)"
  fi

  parallel_flag="-parallel"
  mp_flag="-openmp ${hemi_cpu}"

  # delete previously existing file
  fs_script="${PATH_HOME}/freesurfer/${PROJECT}/${subj_id}_stage-${stage_id}.sh"
  echo -e "Script: ${BOLD_GREEN}${fs_script}${RESET}"
  rm -r "${fs_script}" 2>/dev/null

  # bash will complain if you want to create a file but the directory doesn't exist
  if [[ ! -d "$(dirname ${fs_script})" ]]; then
    mkdir -p "$(dirname ${fs_script})"
  fi

  # remove old log file
  log_file="${fs_script/.sh/.log}"
  rm "${log_file}" 2>/dev/null

  # If you have ran FreeSurfer in fMRIprep, fsaverage will miss a few labels that
  # FreeSurfer v7 has.
  if [[ ! -z "${SGE_QUEUE}" ]]; then
    QUEUE="${SGE_QUEUE}"
  else
    QUEUE="${SGE_QUEUE_LONG}"
  fi    

  # Turn kwargs into space-separated array
  if [[ -n "${kwargs}" ]]; then
    IFS=' ' read -r -a user_args <<< "$(echo "$kwargs" | tr ',' ' ' | tr '=' ' ')"
  else
    user_args=()
  fi

# Generate recon-all script
cat <<EOF > "${fs_script}"
#!/bin/bash

export SUBJECTS_DIR="${SUBJECTS_DIR}"
recon-all -subjid ${subj_id} ${t1_flag} ${highres_flag} ${parallel_flag} ${mp_flag} ${stage_flag} ${t2_flag} ${expert_flag} ${XOPTS_} ${user_args[@]}

EOF

  # collapse repeating spaces
  tr -s ' ' < "${fs_script}" > "${fs_script}.tmp" && mv "${fs_script}.tmp" "${fs_script}"

  # run
  if [[ ${run_local} -eq 0 ]]; then
  
    submit=$(
      generate_submission_command \
      "${QUEUE}" \
      "${n_cpus}" \
      "$(basename ${fs_script} .sh)" \
      "$(dirname ${fs_script})"
    )
  
    eval "${submit}" "${fs_script}"
    if [[ $? -ne 0 ]]; then
      echo && print_line -
      print_error_msg "$(basename ${0})" "${submit}"
      exit 1
    fi

    echo "Now wait until the program has finished and do some editing in FreeView if required."
    echo "Waiting to qstat/squeue.."
    sleep 5

    system=$(detect_scheduler) || return 1
    if [[ ${system} == "soge" ]]; then
      qstat
    elif [[ ${system} == "slurm" ]]; then
      squeue
    fi
  else
    echo "Running FreeSurfer locally"
    bash "${fs_script}"
    if [[ $? -ne 0 ]]; then
      echo && print_line -
      print_error_msg "$(basename ${0})" "${BOLD_GREEN}${fs_script}${RESET}"
      exit 1
    fi
    echo "Now do some editing in FreeView if required."
  fi

}

validate_inputs(){

  T1_flag=""
  T2_flag=""
  if [ -z ${T1} ]; then
    if [[ ${1} == "all" || ${1} == *"1"* ]]; then
      echo "Could not find T1-weighted image"
      exit 1
    fi
  else
    if [[ ${1} == "all" || ${1} == *"1"* ]]; then

      if [[ ! -f "${T1}" ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" T1w "Could not find T1w image \"${BOLD_GREEN}${T1}${RESET}\""
        exit 1
      else
        T1=$(readlink -f "${T1}")
      fi
      T1_flag="-i ${T1}"
    fi
  fi

  if [[ ! -z "${T2}" ]]; then
    # also got a T2 weighted image
    if [[ ! -f "${T2}" ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" T2w "Could not find T2w image \"${BOLD_GREEN}${T2}${RESET}\""
      exit 1
    else
      T2=$(readlink -f "${T2}")
    fi

    # check if input if FLAIR or T2
    if [[ "${T2}" == *"T2w.nii.gz"* ]]; then
      if [[ ${1} == "all" ]]; then
        T2_flag="-T2 ${T2} -T2pial"
      else
        if [[ ${reuse_t2} -eq 1 ]]; then
          T2_flag="-T2pial"
        else
          T2_flag=""
        fi
      fi
    elif [[ "${T2}" == *"FLAIR.nii.gz"* ]]; then
      if [[ ${1} == "all" ]]; then
        T2_flag="-FLAIR ${T2} -FLAIRpial"
      else
        if [[ ${reuse_t2} -eq 1 ]]; then
          T2_flag="-FLAIRpial"
        else
          T2_flag=""
        fi
      fi
    else
      echo 
      print_line -
      print_error_msg "$(basename ${0})" "file" "File must end with *T2w.nii.gz or *FLAIR.nii.gz [${BOLD_GREEN}$(basename ${T2})${RESET}]"
      exit 1
    fi
  else
    # for stage != 'all', check if there's a T2.mgz file in the mri folder if no T2 image was specified
    if [[ ${1} != "all" || ${1} != *"1"* ]]; then
      if [[ ${reuse_t2} -eq 1 ]]; then
        if [[ -f "${SUBJECTS_DIR}/${subj_ID}/mri/T2.mgz" ]]; then
          T2_flag="-T2pial"
        elif [[ -f "${SUBJECTS_DIR}/${subj_ID}/mri/FLAIR.mgz" ]]; then
          T2_flag="-FLAIRpial"
        fi
      fi
    else
      T2_flag=""
    fi
  fi

}

check_is_running(){
  is_running="${SUBJECTS_DIR}/${subj_ID}/scripts/IsRunning.lh+rh"
  if [[ -f ${is_running} ]]; then
    rm -r ${is_running}
  fi
}

check_execution(){

  # execute either when there's no directory, or when there's no files in /surf, or force-exec=1
  execute=0

  if [[ -d "${SUBJECTS_DIR}/${subj_ID}" ]]; then
    if [[ ! -d "${SUBJECTS_DIR}/${subj_ID}/surf" ]]; then
      reason="directory \"${SUBJECTS_DIR}/${subj_ID}\" is empty"
      execute=1
    else
      nr_files=$(ls -l "${SUBJECTS_DIR}/${subj_ID}/surf" | grep "total" | cut -d' ' -f2)
      if [ ${nr_files} -eq 0 ]; then
        reason="directory \"${SUBJECTS_DIR}/${subj_ID}/surf\" is empty"
        execute=1
      fi
    fi
    
    if [ ${FORCE_EXEC} -eq 1 ]; then
      reason="--force-exec was specified"
      execute=1
    fi
  else
    reason="new FreeSurfer subject"
    execute=1
  fi
  
}

#-----------------------------------------------------------------------------
# Run it

if [[ ! -d "${SUBJECTS_DIR}" ]]; then
  mkdir -p "${SUBJECTS_DIR}"
fi

# start with the simplest option: check if there's gcut
if [[ ! -z ${option} ]]; then

  if [ ! -d "${SUBJECTS_DIR}/${subj_ID}" ]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "gcut" "You're trying to run gcut (i presume) before running recon-all..?"
    exit 1
  else
    if [[ ${option} != "gcut" ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "option" "Option '${option}' is not implemented (yet). Please specify \"gcut\" if this is what you wanted or open an issue"
      exit 1
    fi
  fi

  if [ ! -d "${SUBJECTS_DIR}/${subj_ID}_backup" ]; then
    echo "Backing up FS-directory"
    cp -r "${SUBJECTS_DIR}/${subj_ID}" "${SUBJECTS_DIR}/${subj_ID}_backup" 2>/dev/null
  fi

  if [[ -z ${edit} ]]; then
    echo "Running gcut .."
    cmd=(
      recon-all
      -skullstrip
      -clean-bm
      -gcut
      -s "${subj_ID}"
    )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "${cmd[0]}"
      exit 1
    fi
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" "input" "You specifed \"-e\" for the gcut option.. This is not necessary"
    exit 1
  fi

  if [[ ${FREEVIEW} -eq 1 ]]; then

    # open FreeView
    echo "Opening Freeview .."
    call_freeview "${subj_ID}"

    # rerun
    echo "Run recon-all again or not [n] = no, [y] = yes"
    while : ; do
      read -n 1 k <&1
      if [[ ${k} = n ]]; then
        echo "Quitting from the program"
        break
      elif [[ ${k} = y ]]; then
        echo "Running recon stage 2+3 with gcut option"
        
        # define command
        define_fs_command \
          "${subj_ID}" \
          "23" \
          "-autorecon2 -autorecon3"

      else
        echo
        print_line -
        print_error_msg "$(basename ${0})" "unknown" "Unknown option, something weird happened"
        exit 1
      fi
    done
  fi

# do all other things when -o is not specified
else

  if [[ -z ${stage} ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "stage" "Please specify a stage with the '-r' flag"
    exit 1
  fi

  if [[ ${stage} == "all" ]]; then

    # check for T1 and T2
    validate_inputs "${stage}"

    if [[ ! -z ${edit} ]]; then
      echo "You want to run all stages of recon-all but specified the \"edit\" flag. This is not necessary"
    fi

    # check execution; sets 'execution' and 'reason' variables
    check_execution

    if [[ ${execute} -eq 1 ]]; then
      echo "Reason to execute: ${reason}"

      # define command
      define_fs_command \
        "${subj_ID}" \
        "${stage}" \
        "-all" \
        "${T1_flag}" \
        "${T2_flag}"
    else
      echo "This step is already complete; use '--force-exec' to force execution"    
    fi

  elif [[ ${stage} == "12" ]]; then

    # check for T1 and T2
    validate_inputs "${stage}"

    # remove running job
    check_is_running

    if [[ ! -z ${edit} ]]; then
      echo "You want to run all stages of recon-all but specified the \"edit\" flag. This is not necessary"
    fi
    
    # define command
    define_fs_command \
      "${subj_ID}" \
      "${stage}" \
      "-autorecon1 -autorecon2" \
      "${T1_flag}" \
      "${T2_flag}"

  elif [ ${stage} == "23" ]; then

    # check for T1 and T2 flags; the actual inputs are not required, but the flags must be present 
    validate_inputs "${stage}"

    # remove running job
    check_is_running

    if [[ ! -z ${edit} ]]; then

      # check if specified edit stage is an allowed option
      if [[ ! " ${allowed_edits[*]} " =~ " ${edit} " ]]; then
        Usage
        echo 
        print_line -
        print_error_msg "$(basename ${0})" "mode" "To run this mode, you need to specify \"cp\", \"wm\", \"pial\", or \"aseg\" to let me know your type of edit.."
        exit 1
      fi

      if [[ ${edit} == "pial" ]]; then
        edit_flag="-autorecon-pial -autorecon3"
      elif [[ ${edit} == "aseg" ]]; then
        edit_flag="-autorecon2-noaseg -autorecon3"
      else
        edit_flag="-autorecon2-${edit} -autorecon3"
      fi
    else
      edit_flag="-autorecon2 -autorecon3"
    fi

    # define command
    define_fs_command \
      "${subj_ID}" \
      "${stage}" \
      "${edit_flag}" \
      "${T1_flag}" \
      "${T2_flag}"

  elif [[ ${stage} == "1" ]]; then

    # check for T1 and T2
    validate_inputs "${stage}"

    # check execution; sets 'execution' and 'reason' variables
    check_execution

    if [[ ${execute} -eq 1 ]]; then
      echo "Reason to execute: ${reason}"

      # define command
      define_fs_command \
        "${subj_ID}" \
        "${stage}" \
        "-autorecon1" \
        "${T1_flag}" \
        "${T2_flag}"
    else
      echo "This step is already complete; use '--force-exec' to force execution"
    fi

  elif [[ ${stage} == "2" ]]; then

    # remove running job
    check_is_running

    # define command
    define_fs_command \
      "${subj_ID}" \
      "${stage}" \
      "-autorecon2"

  elif [[ ${stage} == "3" ]]; then

    # remove running job
    check_is_running

    # check for T1 and T2
    validate_inputs "${stage}"

    # define command
    define_fs_command \
      "${subj_ID}" \
      "${stage}" \
      "-autorecon3" \
      "${T1_flag}" \
      "${T2_flag}"

  fi
fi
