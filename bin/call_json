#!/usr/bin/env python

import os
import sys
import json
from lazyfmri import utils

def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_json

This script adds one or multiple key-value pairs to a `.json` sidecar file, typically used in BIDS-
formatted datasets. The values can be string, float, or integer, and are interpreted accordingly. 
You may optionally prevent overwriting of existing keys using the `--merge` flag. If the specified 
file does not exist, a new JSON file will be created with the provided key(s) and value(s).

Usage:
  call_json [--merge] <json_file> <key> <message>

Arguments:
  <json_file>     Path to the JSON file to modify or create. Must end with '.json'.
  <key>           Key to add to the JSON file. Accepts a single string or a comma-separated list 
                  wrapped in quotes (e.g., "'key1','key2'")
  <message>       Value(s) associated with the key(s). Accepts a single value or a list of values 
                  (e.g., "'value1','value2'")

Options:
  --merge         Prevent overwriting of existing key/value pairs. Only adds keys that are not 
                  already present in the file.

Outputs:
  - If the file exists, the key/value pairs are added or merged.
  - If the file does not exist, a new JSON file is created with the key/value pair(s).

Examples:
  call_json sub-001_epi.json PhaseEncodingDirection j
    → Adds the key 'PhaseEncodingDirection' with value 'j' to sub-001_epi.json

  call_json sub-001_epi.json Nordic True
    → Adds the key 'Nordic' with boolean/integer value True

  call_json sub-001_epi.json "'Nordic','PhaseEncodingDirection'" "'True','j'"
    → Adds multiple keys in one command

  call_json --merge sub-001_epi.json "'RepetitionTime','TaskName'" "'1.2','rest'"
    → Only adds the keys if they are not already present

---------------------------------------------------------------------------------------------------
    """

    if len(argv) < 3:
        print(main.__doc__)
        sys.exit()
    
    # Flags
    merge = False
    force_list = False
    args = []

    # Parse flags manually
    for arg in argv:
        if "--merge" in arg:
            merge = True
        elif "--force-list" in arg:
            force_list = True
        else:
            args.append(arg)

    if len(args) < 3:
        raise ValueError("Missing arguments after removing flags: need <json_file> <key> <value>")

    json_file = args[0]
    add_key = args[1]
    add_msg = args[2]

    if not json_file.endswith("json"):
        raise TypeError(f"Must be JSON file, not '{json_file}'")

    if "," in add_key:
        add_key = utils.string2list(add_key)
    else:
        add_key = [add_key]

    if "," in add_msg:
        add_msg = utils.string2list(add_msg)
    else:
        add_msg = [add_msg]

    msg_is_list = False
    if len(add_key) == 1 and len(add_msg) > 1:
        msg_is_list = True

    add_dict = {}

    # Interpret types
    for ix, msg in enumerate(add_msg):
        if msg.isdigit():
            add_msg[ix] = int(msg)
        elif msg.replace('.', '', 1).isdigit() and msg.count('.') < 2:
            add_msg[ix] = float(msg)

    if os.path.exists(json_file):
        with open(json_file) as f:
            data = json.load(f)

        for ix, key in enumerate(add_key):
            val = add_msg if msg_is_list or force_list else add_msg[ix]
            if merge and key in data:
                print(f"merge = True, not overwriting {key}")
            else:
                if force_list and not isinstance(val, list):
                    val = [val]
                add_dict[key] = val

        data.update(add_dict)
        with open(json_file, 'w') as f:
            json.dump(data, f, indent=4)
    else:
        for ix, key in enumerate(add_key):
            val = add_msg if msg_is_list or force_list else add_msg[ix]
            if force_list and not isinstance(val, list):
                val = [val]
            add_dict[key] = val

        with open(json_file, "w") as outfile:
            json.dump(add_dict, outfile, indent=4)
            
if __name__ == "__main__":
    main(sys.argv[1:])

