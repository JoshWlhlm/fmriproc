#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_feat

Simple wrapper to submit an *fsf-file to the cluster. It generates a new .sh-file that will be run
according to your input. If '--sge' is specified, the job will be submitted to the cluster with a 
specified number of cores (default = 1) to a specific queue (default = long.q, check your setup file).

Usage:
  call_feat [arguments] [options] <fsf file>

Arguments:
  -n <name>       custom name for job (default = 'feat')
  -j <cpus>       number of cores to use (default is 1)
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
                  must be used with '--sge', otherwise it'll run locally still

Options:
  -h|--help       print this help text
  --sge           submit the script to a cluster using a template script

Positional:
  <fsf file>

Example:
  call_feat design.fsf # standard implementation
  call_feat -j 10 design.fsf # run locally with more cores
  call_feat --sge -j 10 -q short.q design.fsf # submit to cluster
  
---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
submit=0
run_local=1
n_cpus=1
SGE_QUEUE=${SGE_QUEUE_LONG}
job_name="feat"
while getopts :-:hj:q:n: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        sge)
          submit=1
          run_local=0
          if [[ ! -d ${DIR_LOGS} ]]; then
            mkdir -p ${DIR_LOGS} 2>/dev/null
          fi
          ;;
        help)
          Usage && exit 0
          ;;                  
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;  
    j)  n_cpus=${OPTARG}
          ;; 
    n)  job_name=${OPTARG}
          ;;     
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# define inputs
tmp="${@:$OPTIND:1}"
if [[ ! -f "${tmp}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "input" "Specified fsf-file ${BOLD_GREEN}${tmp}${RESET} does not exist"
  exit 1
else
  fsf_file=$(readlink -f "${tmp}")
fi

#-----------------------------------------------------------------------------
# delete previously existing file
base_name=$(dirname ${fsf_file})/$(basename ${fsf_file} .fsf)
fsf_script=${base_name}.sh
if [[ -f ${fsf_script} ]]; then
  rm -r ${fsf_script}
fi

#-----------------------------------------------------------------------------
# define command
(
echo "#!/bin/bash"
echo "feat ${fsf_file}"
) > ${fsf_script}

job="$(
  decide_job_type \
  "call_feat" \
  "${base_name}" \
  "${run_local}" \
  "${DIR_LOGS} \
  "${n_cpus}" \
  "${SGE_QUEUE}" \
)"

cmd=(
  "${job}"
  "${fsf_script}"
)

#-----------------------------------------------------------------------------
# run
eval "${cmd[@]}"
