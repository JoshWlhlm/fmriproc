#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_antsbias

Wrapper for bias field correction with ANTs' N4-function. Takes an input file and an output file
using default setting for 'N4BiasFieldCorrection'. You can add more flags directly to the function
after specifying the input and output files.

This script allows specifying:
- Required input file
- Required output file
- Any additional options from N4BiasFieldCorrection, passed as extra arguments (kwargs).

Usage:
  call_antsbias [default_options] <input file> <output file> [extra_options]

Options:
  -o              Overwrite existing output file
  -v              Make some noise
  [extra_options] anything after gets passed to N4BiasFieldCorrection

Example:
  call_antsbias -s 4 input.nii.gz output.nii.gz -x mask.nii.gz -r 1

Notes:
see https://github.com/ANTsX/ANTs/wiki/N4BiasFieldCorrection for more information on the relation-
ship between parameters (especially spline spacing & convergence)

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Defaults
ow=0
verbose=0

#-----------------------------------------------------------------------------
# Parse options
while getopts "vo:" opt; do
  case $opt in
    o) ow=1 ;;
    v) verbose=1 ;;
    *) Usage && exit 0 ;;
  esac
done
shift $((OPTIND-1))

#-----------------------------------------------------------------------------
# Required arguments
if [[ $# -lt 1 ]]; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
input="${1}"
output="${2:-}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${input}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${input}${RESET}\""
  exit 1
else
  input="$(readlink -f "${input}")"
fi

if [[ -z "${output}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

shift 2 || true  # Shift away input & output arguments if present

# Capture any additional arguments passed after "--"
extra_args=()
while [[ $# -gt 0 ]]; do
  extra_args+=("$1")
  shift
done

#-----------------------------------------------------------------------------
# check dimensions
dim=$(fslval "$input" dim0)
if [[ -z "$dim" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fslval" "Unable to determine image dimensionality of ${BOLD_GREEN}${input}${RESET}"
fi

#-----------------------------------------------------------------------------
# Run N4BiasFieldCorrection
if [[ ${verbose} -eq 1 ]]; then
  echo "Running N4BiasFieldCorrection:"
  echo "  Input          = $(basename "${input}")"
  echo "  Output         = $(basename "${output}")"
  echo "  Dimensionality = $dim"
  echo "  Extra options  = ${extra_args[*]:-(none)}"
  echo
fi

cmd=(
  N4BiasFieldCorrection
  --image-dimensionality "$dim"
  --input-image "$input"
  --output "$output"
  --verbose ${verbose}
  "${extra_args[@]}"
)

# print and run
if [[ ${verbose} -eq 1 ]]; then
  print_cmd "${cmd[@]}"
fi

eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "N4BiasFieldCorrection"
  exit 1
fi

if [[ ${verbose} -eq 1 ]]; then
  echo "Bias field correction complete."
fi
