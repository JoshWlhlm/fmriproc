#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fastsurfer

Run FastSurfer - a fast and accurate deep-learning based neuroimaging pipeline. This approach pro-
vides a full FreeSurfer alternative for volumetric analysis (within 1 minute) and surface-based 
thickness analysis (within only around 1h run time). The whole pipeline consists of two main parts:

(i) FastSurferCNN - an advanced deep learning architecture capable of whole brain segmentation 
    into 95 classes in under 1 minute, mimicking FreeSurfer's anatomical segmentation and cortical 
    parcellation (DKTatlas)

(ii)recon-surf - full FreeSurfer alternative for cortical surface reconstruction, mapping of cor-
    tical labels and traditional point-wise and ROI thickness analysis in approximately 60 
    minutes. For surface group analysis, sphere.reg can be additionally generated by adding the 
    --surfreg flag.

Usage:
  call_fastsurfer [options] <subject> <t1w reference> [extra opts]

Options:
  -d <sub dir>    output directory (defaults to DIR_DATA_DERIV/fastsurfer)
  -j <n_cpus>     number of cores/threads to use (default = 5)

Positional:
  <subject>       subject ID
  <t1 ref>        reference t1-weighted image
  <extra>         these inputs will be directly pass to FastSurfer. By default, we use the 
                  following:
                    - "--surf_only"
                    - "--parallel"

Example:
  call_fastsurfer sub-001 t1w.nii.gz --surf_only --threads 15

Notes:
  - expects FASTSURFER_HOME variable to be set correctly
  - FastSurfer must be installed in active environment

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
n_cpus=5
while getopts s:d: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    d)  dir=${OPTARG}
          ;;          
    j)  n_cpus=${OPTARG}
          ;;                    
  esac
done
shift $((OPTIND-1))

sub="${1}"
t1="${2:-}"

if [[ ! -f "${t1}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Input file ${BOLD_GREEN}${t1}${RESET} does not exist"
  exit 1
else
  t1=$(readlink -f "${t1}")
fi

shift 2 || true  # Shift away input & output arguments if present

# Capture any additional arguments passed after "--"
extra_args=()
while [[ $# -gt 0 ]]; do
  extra_args+=("$1")
  shift
done

#-----------------------------------------------------------------------------
# Run it

if [ -z "${dir}" ]; then
  output_dir="${DIR_DATA_DERIV}/fastsurfer"
else
  output_dir="${dir}"
fi

# add surf_only
[[ ! "$extra_args" =~ "--surf_only" ]] && extra_args+=("--surf_only")
[[ ! "$extra_args" =~ "--parallel" ]] && extra_args+=("--parallel")

# Run FastSurfer (fastsurfer is an alias for run_fastsurfer.sh)
cmd=(
  fastsurfer
  --t1 "${t1}"
  --sid "${sub}"
  --sd "${output_dir}"
  --threads "${n_cpus}"
  "${extra_args[@]}"
)

print_cmd "${cmd[@]}" && eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "fastsurfer"
  exit 1
fi  
