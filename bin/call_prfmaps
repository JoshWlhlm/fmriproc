#!/usr/bin/env python

import os
import sys
import numpy as np
from fmriproc import prf
from lazyfmri import utils
opj = os.path.join

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_prfmaps

Create polar angle, eccentricity, and R² maps from the output of 'call_prf'. This script loads 
fitted pRF parameter files from a given model and extracts:
  - Polar angle (θ)
  - Eccentricity (r)
  - Variance explained (R²)

The script supports different pRF models including:
  - gauss : Gaussian pRF [Dumoulin & Wandell, 2008]
  - dog   : Difference of Gaussian [Zuiderbaan et al., 2013]
  - css   : Compressive Spatial Summation [Kay et al., 2013]
  - norm  : Divisive Normalization [Aqil et al., 2021]

Usage:
  call_prfmaps <input_dir> [model]

Arguments:
  <input_dir>     Path to the directory containing output from `call_prf`, e.g.,:
                  derivatives/prf/sub-01/ses-1

  [model]         Optional string indicating model type; defaults to "gauss"

Outputs:
  Saves three NumPy arrays:
    - *_polarangle.npy : polar angle map (in radians)
    - *_ecc.npy        : eccentricity map (in visual degrees)
    - *_r2.npy         : variance explained (R²)

Output filenames are derived from the original parameter file name with suffixes:
  "_polarangle.npy", "_ecc.npy", and "_r2.npy"

Example:
  call_prfmaps derivatives/prf/sub-01/ses-1
  call_prfmaps derivatives/prf/sub-01/ses-1 css

---------------------------------------------------------------------------------------------------
    """

    input_dir = None
    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()

    input_dir = argv[0]
    model = argv[1] if len(argv) > 1 else "gauss"

    # get files    
    prf_params = utils.get_file_from_substring(
        [f"model-{model}", "_desc-prf_params.pkl"],
        input_dir
    )

    # check if input is valid
    if isinstance(prf_params, str):
        pars = prf.read_par_file(prf_params)
    else:
        raise TypeError(
            f"Params file '{prf_params}' is not a string, but {type(prf_params)}: {prf_params}"
        )

    # calculate maps
    polar = np.angle(pars[:,0]+pars[:,1]*1j)
    r2 = pars[:,-1]
    ecc = np.sqrt(pars[:,0]**2+pars[:,1]**2)
    
    # set output
    out = "_".join(prf_params.split("_")[:-1])

    # define output dict
    pattern = {
        "_polarangle": polar,
        "_ecc": ecc,
        "_r2": r2
    }

    for i, j in pattern.items():
        np.save(f"{out}{i}.npy", j)

if __name__ == "__main__":
    main(sys.argv[1:])
