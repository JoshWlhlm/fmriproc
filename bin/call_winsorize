#!/usr/bin/env bash

source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_winsorize

This scripts makes the call to ImageMath Windorize a little easier, as you'll only have to provide
the input image

Usage:
  call_winsorize [arguments] [options] <input> <output>

Arguments:
  -l <lower>      lower percentile (default = 0.01)
  -u <upper>      upper percentile (default = 0.99)
  -b <bins>       number of bins to use (default = 256)

Options:
  -h|--help       print this help text
  --verbose       echo command to terminal

Positional:
  <input>         input image to be resample
  <output>        output name of resampled image

Example:
  call_winsorize input.nii.gz output.nii.gz                 # use all defaults
  call_winsorize --verbose input.nii.gz output.nii.gz       # 
  call_winsorize -l 0 input.nii.gz output.nii.gz
  call_winsorize -l 0.05 -u 0.95 input.nii.gz output.nii.gz
  call_winsorize -b 65 input.nii.gz output.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

VERB=0
lower=0.01
upper=0.99
n_bins=256
while getopts :-:hvl:u:t:b: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in                
        verbose)
          VERBOSE="--verbose 1"
          VERB=1
          ;;
        help)
          Usage && exit 0
          ;;                   
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;    
    l)  lower=${OPTARG}
          ;;
    u)  upper=${OPTARG}
          ;;    
    b)  n_bins=${OPTARG}
          ;;                
    v)  VERBOSE="--verbose 1"
        VERB=1
          ;;    
    h)  Usage && exit 0
          ;;                  
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# read args
in=${@:$OPTIND:1}
out=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${in}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${in}${RESET}\""
  exit 1
else
  in_file=$(readlink -f "${in}")
fi

#-----------------------------------------------------------------------------
# echo intensities before Truncation
if [[ ${VERB} -eq 1 ]]; then
  intensities_pre=$(fslstats "${in_file}" -R)
  echo "pre: ${intensities_pre}"
fi

#-----------------------------------------------------------------------------
# set output to input if no output is specified
if [[ -z "${out}" ]]; then
  out_file="${in_file}"
else
  out_file="${out}"
fi

#-----------------------------------------------------------------------------
# set dimensions and define command
dim=$(fslval "${in_file}" dim0)
cmd=(
  ImageMath
  "${dim}"
  "${out_file}"
  TruncateImageIntensity
  "${in_file}"
  "${lower}"
  "${upper}"
  "${n_bins}"
)

# echo cmd
if [[ ${VERB} -eq 1 ]]; then
  print_cmd "${cmd[@]}"
fi

# run cmd
eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ImageMath"
  exit 1
fi

#-----------------------------------------------------------------------------
# echo intensities before Truncation
if [[ ${VERB} -eq 1 ]]; then
  intensities_post=$(fslstats "${out_file}" -R)
  echo "post: ${intensities_post}"
fi
