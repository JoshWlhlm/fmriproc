#!/usr/bin/env python

import os
import sys
import getopt
import shutil
import pathlib
from lazyfmri import utils
from fmriproc import image
from pymp2rage import MP2RAGE
opj = os.path.join

@utils.validate_cli_inputs(required_keys=["inv1", "inv1ph", "inv2", "inv2ph"], allow_input_dir=True)
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_mp2rage

This script is a wrapper for the memp2rage object that can calculate a Unified T1-weighted image
and a quantitative T1 map, based on the magnitude and phase-information of the two volumes of a
MP2RAGE-sequence (Marques et al., 2010).

Usage:
  call_mp2rage [mandatory] [arguments] [options]

Mandatory (required input):
  --inv1          first inversion magnitude image (usually something with INV1)
  --inv1ph        first inversion phase (usually something with INV1ph)
  --inv2          second inversion magnitude image (usually something with INV2)
  --inv2ph        second inversion phase image (usually something with INV2ph)

  OR:
  -i|--inputdir   project root directory with the subject-directories on which we need to run
                  the script. Should be BIDS-compliant, up until 'anat' folder

Optional (flags with defaults):
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'pymp2rage'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE"). '*_{T1w|T1map}.nii.gz'
                  will be added
  -l|--lower      lower bound for truncing image intensities using 'call_winsorize'. Default
                  is 0.01
  -u|--upper      upper bound for truncing image intensities using 'call_winsorize'. Default
                  is 0.99                            
  -p|--pars       json-file with custom parameter settings. Should have the following format:

Options:
  -c|--mask       make INV2 mask with SPM+FSL to remove background noise induced by the 
                  combination of INV-images. Note that not doing this will results in pat-
                  terns of noise around the brain which will confuse automated segmentation 
                  softwares 
                  pulses
  --pars <file>   json-file with custom parameter settings. Should have the following format:
                  
                  {
                      "TR": 5.5,
                      "inv_times": [0.8,2.7],
                      "fa": [6,6],
                      "nZ": 200,
                      "FLASH_tr": [0.0062,0.0062]
                  }
                  see: $REPO_DIR/misc/mp2rage_pars.json

Options (extra):
  -h|--help       print this help text
  -c|--mask       make INV2 mask with SPM+FSL to remove background noise induced by the combina-
                  tion of INV-images. Note that not doing this will results in patterns of noise
                  around the brain which will confuse automated segmentation softwares 
  --skip-bg       Skip background stuff (default = remove noise around brain)
  --ups           use UP-parameters; there's different MP2RAGE-parameters for universal 


Outputs:
  T1map   (Nifti1Image): Quantitative T1 map
  T1w     (Nifti1Image): Unified T1-weighted image

Example:
  call_mp2rage \
    -i $DIR_DATA_HOME/sub-005/ses-1 \
    -o $DIR_DATA_DERIV/pymp2rage/sub-005/ses-1 \
    -b sub-01_ses-1_acq-MP2RAGE \
    --mask

  call_mp2rage \
    --inv1 inv1.nii.gz \
    --inv1ph inv1ph.nii.gz \
    --inv2 inv2.nii.gz \
    --inv2ph inv2ph.nii.gz \
    --outputdir derivatives/pymp2rage/sub-01/ses-1 \
    --name sub-01_ses-1_acq-MP2RAGE

Notes:
  Assumes you ran spinoza_scanner2bids before. If not, change the required filenames in the
  script; by default, we'll look for files with 'acq-MP2RAGE' and 'inv' in the filename. In total, 
  there must be 4 files:

  - INV1      ('inv-1_part-mag')
  - INV1ph    ('inv-1_part-phase')
  - INV2      ('inv-2_part-mag')
  - INV2ph    ('inv-2_part-phase')

---------------------------------------------------------------------------------------------------
    """

    inv1 = context.get("inv1")
    inv1ph = context.get("inv1ph")
    inv2 = context.get("inv2")
    inv2ph = context.get("inv2ph")
    input_dir = context.get("input_dir")
    output_dir = context.get("output_dir")
    output_base = context.get("output_base")
    ups = context.get("ups")
    do_stuff = context.get("do_stuff")
    pars_file = context.get("pars_file")
    lower = context.get("lower")
    upper = context.get("upper")

    if input_dir is not None:
        select_fn = utils.select_files_from_bids(input_dir)
    else:
        select_fn = []
        # we did not get an input directory; check if separate files have been specified
        fn = ["inv1", "inv1ph", "inv2", "inv2ph"]
        for r,i in enumerate([inv1, inv1ph, inv2, inv2ph]):
            if i == None:
                raise ValueError(f"Missing {fn[r]}-file. Make sure you specified it with the --{fn[r]} flag")
            else:
                if os.path.dirname(i) == "":
                    i = opj(os.getcwd(), i)
                select_fn.append(i)

    if len(select_fn) != 4:
        print(f"For MP2RAGE-reconstruction we should have 4 files; got {len(select_fn)}")
        sys.exit(1)
    else:
        if input_dir == None:
            input_dir = os.path.dirname(select_fn[0])

    # set default 0.7 MP2RAGE Phillips parameters
    pars = image.define_mr_parameters(
        pars_file=pars_file,
        ups=ups,
        is_mp2rage=True
    )

    print("Loading all images to the mp2rage object")
    print(pars)
    mp2rage = MP2RAGE(
        inv1=select_fn[0],
        inv1ph=select_fn[1],
        inv2=select_fn[2],
        inv2ph=select_fn[3],
        **pars
    )
    
    # make output directory
    pathlib.Path(output_dir).mkdir(parents=True, exist_ok=True)

    # Define output file types
    file_types = {
        "suffix": ["T1w", "T1map"],
        "attr": ["t1w_uni", "t1map"]
    }

    # Generate the OUTPUT dictionary dynamically
    output_dict = {attr.lower(): opj(output_dir, f"{output_base}_{suff}.nii.gz") for attr, suff in zip(file_types["attr"], file_types["suffix"])}

    print("Creating output files")
    for key, val in output_dict.items():
        _ = image.write_pymp2rage_nifti(
            val,
            key,
            mp2rage,
            select_fn,
            is_mp2rageme=False
        )

    # copy original pymp2rage output which has proper intensity histograms
    src = output_dict["t1w_uni"]
    trg = opj(os.path.dirname(src), "orig.nii.gz")
    shutil.copyfile(src, trg)

    # combine FSL+SPM mask to remove pepper noise around MP2RAGE
    if do_stuff:
        print()
        utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
        spm_mask = opj(output_dir, f'{output_base}_desc-spm_mask.nii.gz')
        cmd = f"""call_createmask \
            --input {select_fn[2]} \
            --output {spm_mask} \
            --t1 {output_dict["t1w_uni"]} \
            --verbose \
            -l {lower} \
            -u {upper}"""\
        
        # run
        utils.run_shell_wrapper(cmd, verb=True)

    print("Done")

if __name__ == "__main__":

    output_dir = opj(os.getcwd(), "pymp2rage")
    output_base = "subject_acq-MP2RAGE"
    input_dir = None
    inv1 = None
    inv1ph = None
    inv2 = None
    inv2ph = None
    ups = False
    do_stuff = False
    pars_file = None
    lower = 0.01
    upper = 0.99

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hci:o:b:u:l:n:",
            ["help", "inputdir=", "outputdir=", "name=", "inv1=", "inv1ph=", "inv2=", "inv2ph=", "mask", "ups", "beta=", "skip-bg", "pars=", "lower=", "upper="]
        )[0]
    except getopt.GetoptError:
        print("ERROR while handling arguments; did you specify an illegal/non-defined argument?")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()       
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-l", "--lower"):
            lower = float(arg)
        elif opt in ("-u", "--upper"):
            upper = float(arg)
        elif opt in ("-c", "--mask"):
            do_stuff = True            
        elif opt in ("--skip-bg"):
            do_stuff = False            
        elif opt in ("--inv1"):
            inv1 = os.path.abspath(arg)
        elif opt in ("--inv1ph"):
            inv1ph = os.path.abspath(arg)
        elif opt in ("--inv2"):
            inv2 = os.path.abspath(arg)
        elif opt in ("--inv2ph"):
            inv2ph = os.path.abspath(arg)
        elif opt in ("--pars"):
            pars_file = os.path.abspath(arg)
        elif opt in ("--ups"):
            ups = True

    main(context={
        "input_dir": input_dir,
        "output_dir": output_dir,
        "output_base": output_base,
        "inv1": inv1,
        "inv1ph": inv1ph,
        "inv2": inv2,
        "inv2ph": inv2ph,
        "ups": ups,
        "do_stuff": do_stuff,
        "pars_file": pars_file,
        "lower": lower,
        "upper": upper
    })
