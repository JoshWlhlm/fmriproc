#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_spmsanlm

Denoising using Cat12 as part of SPM. Let's see if this makes CAT12 more reliable.. It tends to 
make the image as nice as a full on 'call_cat12'-run, but sometimes that's a bit overkill. Using 
SANLM-filter and bias correction separately we obtain the best of both worlds, presumably.

Usage:
  call_spmsanlm [options] <input image> <output directory + basename>

Optional:
  -s <SPM_PATH>   path to SPM; should contain CAT12 in toolbox directory
  -l <LOG_PATH>	  path to working directory, defaults to DIR_LOGS

Options:
  -h|--help       print this help text

Positional:
  <input image>   input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                  new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                  not like *.nii.gz files.
  <output base>	  directory+basename of output image

Example:
 call_spmsanlm input.nii.gz output.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
while getopts :-:hl:s: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;          
    l)  LOG=${OPTARG}
            ;;
    s)  SPM=${OPTARG}
            ;;
    h)  Usage && exit 0
          ;;            
  esac
done

#-----------------------------------------------------------------------------
# read args
INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${INPUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${INPUT}${RESET}\""
  exit 1
else
  INPUT=$(readlink -f "${INPUT}")
fi

if [[ -z "${OUTPUT}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# Define default LOG-path
if [[ -z "${LOG}" ]]; then
  if [[ -z "${DIR_LOGS}" ]]; then
    LOG_DIR="${PWD}"
  else
    LOG_DIR="${DIR_LOGS}"
  fi
else
  LOG_DIR="${LOG}"
fi

if [[ ! -d "${LOG_DIR}" ]]; then
  mkdir -p "${LOG_DIR}"
fi

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z "${SPM}" ]]; then
  if [[ -z "${SPM_PATH}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "SPM" "SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH="${SPM_PATH}"
  fi
else
  SPM_PATH="${SPM}"
fi

# double check if directory exists
if [[ ! -d "${SPM_PATH}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "SPM" "Could not find SPM directory ${BOLD_GREEN}${SPM_PATH}${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# get extension and make nii
ext=$(fetch_extension "${INPUT}")
if [[ ${ext} == "gz" ]]; then
  in_file="${INPUT%.gz}"
  gunzip -fc "${INPUT}" > "${in_file}"
else
  in_file="${INPUT}"
fi

#-----------------------------------------------------------------------------
# Create new script
output_dir="$(dirname "${OUTPUT}")"
new_script="$(dirname "${in_file}")/spm_sanlm.m"
rm -r "${new_script}" 2>/dev/null

# make output directory
if [[ ! -d "${output_dir}" ]]; then
  mkdir -p "${output_dir}"
fi

#-----------------------------------------------------------------------------
# check output
filter_img=$(
  find "$(dirname "${in_file}")" \
  -type f \
  -name "sanlm_$(basename "${in_file}")"* \
  2>/dev/null
)

if [[ -z "${filter_img}" ]]; then

  #-----------------------------------------------------------------------------
  # make script
  make_sanlm_script \
    "${SPM_PATH}" \
    "${in_file}" \
    "${new_script}"

  #-----------------------------------------------------------------------------
  # call_matlab = in call_bashhelper
  call_matlab ${new_script}
  if [[ $? -ne 0 || ! -f "${filter_img}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "make_sanlm_script"
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# Convert SPM's .nii-files to .nii.gz if the input file was nii.gz
filter_img=$(
  find "$(dirname "${in_file}")" \
  -type f \
  -name "sanlm_$(basename "${in_file}")"* \
  2>/dev/null
)

if [[ ! -z "${filter_img}" ]]; then
  if [[ ${ext} == "gz" ]]; then
    gzip -fc "${filter_img}" > "${OUTPUT}" 2>/dev/null
    rm -r "${in_file}" 2>/dev/null  
  else
    mv "${filter_img}" "${OUTPUT}"
  fi
  rm -r "${filter_img}" 2>/dev/null
fi

#-----------------------------------------------------------------------------
# copy header
cmd=(
  call_copyheader
  "${in_file}"
  "${OUTPUT}"
)

# run
eval "${cmd[@]}"
if [[ $? -ne 0 ]]; then
  echo 
  print_line -
  print_error_msg "$(basename ${0})" "${cmd[0]}"
  exit 1
fi
