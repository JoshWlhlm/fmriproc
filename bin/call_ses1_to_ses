#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
  cat <<USAGE

---------------------------------------------------------------------------------------------------
call_ses1_to_ses

This script warps session 1 anatomy as per output for pymp2rage to the anatomy of session X as spe-
cified in /project_folder/<subject>/ses-X/anat. It uses predefined paths only so unless you changed 
something in previous steps you can use it with just the subject ID.

It will look for the following files:
  - ses-1 anat: \$DIR_DATA_DERIV/<anat_stage>/<subject>/ses-1  (uses 'find_hierarchical_anatomy' 
                function if certain stages are not present. Will look in 'denoised' first, then 
                'pymp2rage', then 'anat' in \$DIR_DATA_HOME)
  - ses-2 anat: \$DIR_DATA_HOME/<subject>/ses-<ses_nr>/anat/*acq-MP2RAGE*_T1w.nii.gz

And output a transformation matrix as:
  \$CTX/transforms/<subject>_from-ses1_to-ses2_desc-genaff.mat

Usage:
  call_ses1_to_ses [options] -s <subject> -n <ses_nr> -q <queue> -d <depth> -j <n_cpus>

Mandatory:
  -s <subject>    subject ID, e.g., sub-001
  -n <ses nr>     session number, e.g., 2

Optional:
  -d <depth>      passed along to 'find_hierarchical_anatomy'. Defaults to \$DIR_DATA_DERIV/
                  pymp2rage; depth to look for anatomical files. The higher the number, the high-
                  er up the workflow we look, from \$DIR_DATA_HOME to fMRIPrep/FreeSurfer and
                  all preprocessing steps in between.
  -q <queue>      queue name for when --sge is passed. Default = short.q
  -j <n_cpus>     number of cores to use (default = 1)

Options:
  -h|--help       print this help text
  --inv           invert the matrix 
  --sge           submit job to SoGE
  --verbose       print stuff to the terminal
  --clear         remove existing log-file
  --debug         just print command, don't execute

Example:
  call_ses1_to_ses -s sub-001 -n 2

---------------------------------------------------------------------------------------------------

USAGE
  exit 1
}

invert=0
verbose=""
run_local=1
n_cpus=1
search_depth=3
SGE_QUEUE=${SGE_QUEUE_LONG}
clear=0
debug=0
while getopts :-:vh:s:n:q:j:d: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        inv)
          invert=1
          ;;
        sge)
          run_local=0
          if [[ ! -d ${DIR_LOGS} ]]; then
            mkdir -p ${DIR_LOGS} 2>/dev/null
          fi
          ;;          
        verbose)
          verbose="--verbose"
          ;;        
        clear)
          clear=1
          ;;       
        debug)
          debug=1
          ;;                         
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;   
    h)  Usage && exit 0
          ;;       
    s)  sub_id=${OPTARG}
          ;;  
    n)  ses_id=${OPTARG}
          ;;                          
    i)  invert=1
          ;;   
    q)  SGE_QUEUE=${OPTARG}
          ;;
    j)  n_cpus=${OPTARG}
          ;;       
    d)  search_depth=${OPTARG}
          ;;               
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# check inputs
if [[ -z "${sub_id}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify a subject ID"
  exit 1
fi

if [[ -z "${ses_id}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify a session ID"
  exit 1
fi

#-----------------------------------------------------------------------------
# Check some directories/files
if [[ ! -d "${CTX}/${sub_id}" ]]; then
  call_ctximport -s "${sub_id}"
fi

# find anatomy directory hierarchically
INPUT_DIR=$(find_hierarchical_anatomy ${search_depth})

#-----------------------------------------------------------------------------
# reference session
ses1=$(
  find \
  "${INPUT_DIR}/${sub_id}/ses-1" \
  -type f \
  -name "${sub_id}*" \
  -and -name "*T1w.nii.gz" \
  2>/dev/null
)

# check if ses-1 exists
if [[ -z "${ses1}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ses-1" "Could not find ses-1 image with \"${sub_id}*\" and \"*T1w.nii.gz\" in ${BOLD_GREEN}${INPUT_DIR}/${sub_id}/ses-1${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# target session
ses2=$(
  find "${DIR_DATA_HOME}/${sub_id}/ses-${ses_id}/anat" \
  -type f \
  -name "${sub_id}*" \
  -and -name "*acq-MP2RAGE*" \
  -and -name "*T1w.nii.gz" \
  2>/dev/null
)

if [[ -z "${ses2}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "ses-${ses_id}" "Could not find ses-${ses_id} image with \"${sub_id}*\", \"*acq-MP2RAGE*\" and \"*T1w.nii.gz\" in ${BOLD_GREEN}${DIR_DATA_HOME}/${sub_id}/ses-${ses_id}/anat${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# set input/output
if [[ ${invert} -eq 1 ]]; then
  ref="${ses1}"
  mov="${ses2}"
  tag="ses${ses_id}_to-ses1"
else
  ref="${ses2}"
  mov="${ses1}"
  tag=ses1_to-ses${ses_id}
fi

# set output name and make directory
aff="${CTX}/${sub_id}/transforms/${sub_id}_from-${tag}_desc-genaff.mat"
if [[ ! -d "$(dirname ${aff})" ]]; then
  mkdir -p "$(dirname ${aff})"
fi

# define log-file
log_file="${aff/.mat/.log}"
if [[ ${clear} -eq 1 ]]; then
  rm ${log_file} 2>/dev/null
fi

#-----------------------------------------------------------------------------
# decide job
job="$(
  decide_job_type \
    call_antsregistration \
    "$(basename ${aff})" \
    "${run_local}" \
    "${DIR_LOGS}" \
    "${n_cpus}" \
    "${SGE_QUEUE}"
)"

#-----------------------------------------------------------------------------
# define command
cmd=(
  "${job}"
  -j "${n_cpus}"
  "${verbose}"
  "${ref}"
  "${mov}"
  "${aff%genaff.mat}"
)

# echo command
if [[ ${run_local} -eq 1 || ${debug} -eq 1 ]]; then
  print_cmd "${cmd[@]}"
fi

# execute
if [[ ${debug} -eq 0 ]]; then
  (
  echo ""
  echo "### New invocation of call_antsregistration @$(date)"
  echo "$(echo ${cmd[@]} | tr '\n' ' ')"
  echo ""
  ) >> "${log_file}"
  eval "${cmd[@]}"
fi
