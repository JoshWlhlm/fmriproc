#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_cat12

Wrapper for brain extraction CAT12. You should have the toolbox installed in <path>. This script
uses a tempate script to run CAT12 in SPM.

Usage:
 call_cat12 [arguments] [options] <input file> <output directory>
 
Arguments:
  -s <SPM_PATH>   path to SPM; should contain CAT12 in toolbox directory
  -l <LOG_PATH>	  path to working directory, defaults to DIR_LOGS
  -c <file>       specify a custom batch-file for CAT12; versions utilize different inputs, making
                  it hard to be agnostic to support all versions. For now, I have template files
                  for the following versions in \$REPO_DIR/misc:
                    - r1113
                    - r1450
                    - r2043
                    - r2170
                    - r2556 [CAT12 Linux Standalone (2017b)]
                    - r2557 [CAT12 MacOS Standalone (2023b)]
                    - r2664 [CAT12 Linux Standalone (2023b)]

                  you can either save your batch-file as '\$REPO_DIR/misc/cat_batch_custom.m' or
                  use this flag to use a different version.

Options:
  -h|--help       print this help text
  --full          refers to a full processing with CAT12, which is sometimes overkill (makes the
                  brain too smooth). Default is just tissue segmentation.

Positional:
  <input image>   input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                  new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                  not like *.nii.gz files.
  <output path>	  path to output directory; in here, 'mri' and 'report' will be stored

Example:
  call_cat12 /path/to/inputfile.nii.gz /path/to/output_dir
  call_cat12 -l /path/to/logs -s /packages/matlab/toolbox/spm12 input.nii.gz /path/to/output

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
MODE="brain"
while getopts :-:hl:s:m:c: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        full)
          MODE="full"
          ;;
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    l)  LOG="${OPTARG}"
          ;;
    s)  SPM="${OPTARG}"
          ;;
    m)  MODE="${OPTARG}"
          ;;
    c)  custom_file="${OPTARG}"
          ;;
  esac
done

#-----------------------------------------------------------------------------
# read args
in_file="${@:$OPTIND:1}"
out_dir="${@:$OPTIND+1:1}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${in_file}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input image \"${BOLD_GREEN}${in_file}${RESET}\""
  exit 1
else
  in_file="$(readlink -f "${in_file}")"
fi

# set input dir
in_dir="$(dirname "${in_file}")"

if [[ -z "${out_dir}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output directory"
  exit 1
fi

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z "${SPM}" ]]; then
  if [[ -z "${SPM_PATH}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "SPM" "SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH="${SPM_PATH}"
  fi
else
  SPM_PATH="${SPM}"
fi

# double check if directory exists
if [[ ! -d "${SPM_PATH}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "SPM" "Could not find SPM directory ${BOLD_GREEN}${SPM_PATH}${RESET}"
  exit 1
fi

#-----------------------------------------------------------------------------
# Define default processing MODE
if [[ -z ${MODE} ]]; then
  MODE='brain'
else
  if [[ ${MODE,,} != 'full' && ${MODE,,} != 'brain' ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "mode" "Must be \"full\" or \"brain\", not \"${MODE}\""
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# check if input is nii or nii.gz
ext=$(fetch_extension "${in_file}")
if [[ ${ext} == "gz" ]]; then
  tmp_file="${in_file/.nii.gz/.nii}"
  gunzip -c "${in_file}" > "${tmp_file}"
else
  tmp_file="${in_file}"
fi

#-----------------------------------------------------------------------------
# Define default LOG-path
if [[ -z ${LOG} ]]; then
  LOG_DIR="${in_dir}"
else
  LOG_DIR="${LOG}"
fi

if [[ ! -d "${LOG_DIR}" ]]; then
  mkdir -p "${LOG_DIR}"
fi

#-----------------------------------------------------------------------------
# Create new script
new_script="${LOG_DIR}/catscript.m"
if [[ -f "${new_script}" ]]; then
  rm -r "${new_script}"
fi

if [[ ! -d "${out_dir}" ]]; then
  mkdir -p "${out_dir}"
fi

#-----------------------------------------------------------------------------
# Only run stuff if we can't find 'mri'-directory in the directory from the input
# file or in the specified output-directory. Mind you, it therefore does NOT over-
# write stuff from CAT12..
if [[ -d "${out_dir}/mri" ]]; then
  if [[ $(ls "${out_dir}/mri" | wc -l) -eq 0 ]]; then
    RUN=1
    verdict="Running CAT12:"
    reason="${out_dir}/mri is empty"
  else
    verdict="Not running CAT12:"
    reason="${out_dir}/mri is not empty"  
    RUN=0
  fi
else
  if [[ -d "${in_dir}/mri" ]]; then
    if [[ $(ls "${in_dir}/mri" | wc -l) -eq 0 ]]; then
      RUN=1
      verdict="Running CAT12"
      reason="input folder contains empty \"mri\"-folder"
    else
      RUN=0
      verdict="Not running CAT12"
      reason="input folder contains non-empty \"mri\"-folder"      
    fi
  else
    # some CAT versions might not have mri/ report/ folders
    if ls "${out_dir}"/p[0-4]sub* &>/dev/null; then
      RUN=0
      verdict="Not running CAT12"
      reason="p[0-4]-files (probability maps) present in output folder"
    else
      if ls "${in_dir}"/p[0-4]sub* &>/dev/null; then
        RUN=0
        verdict="Not running CAT12"
        reason="input folder contains p[0-4]-files"
      else
        RUN=1
        verdict="Running CAT12"
        reason="output folder does not contain p[0-4]-files"
      fi
    fi
  fi
fi

#-----------------------------------------------------------------------------
# run
echo "${verdict}: ${reason}"
if [[ ${RUN} -eq 1 ]]; then

  #-----------------------------------------------------------------------------
  # make_cat_script = in call_bashhelper
  make_cat_script \
    "${SPM_PATH}" \
    "${tmp_file}" \
    "${MODE}" \
    "${new_script}" \
    "${custom_file}"

  if [[ $? -ne 0 ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "make_cat_script"
    exit 1
  fi

  #-----------------------------------------------------------------------------
  # store output in log file so we can check for errors
  log_file="${out_dir}/catlog.txt"
  rm -r "${log_file}" 2>/dev/null

  #-----------------------------------------------------------------------------
  # call_matlab = in call_bashhelper
  echo "Starting CAT12.."
  call_matlab "${new_script}" >> "${log_file}"

  #-----------------------------------------------------------------------------
  # we should have p* files by now
  ff=$(find "${in_dir}" -type f \( -name "p[0-4]sub*.nii" \))
  if [[ -z "${ff}" ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "CAT12:Segmentation" "Segmentation files not created"
    exit 1
  fi

  #-----------------------------------------------------------------------------
  # check if matlab succeeded
  ff=$(cat "${log_file}" | grep "Failed: CAT12: Segmentation" | cut -d"." -f2 | xargs | sed 's/\r$//')
  if [[ ! -z "${ff}" ]]; then
    mv "${log_file}" "${tmp_file/.nii/_error.log}" 2>/dev/null
    echo
    print_line -
    print_error_msg "$(basename ${0})" "matlab"
    exit 1
  else
    mv "${log_file}" "${tmp_file/.nii/.log}" 2>/dev/null
  fi

  #-----------------------------------------------------------------------------
  # check for error-directory
  if [[ -d "${in_dir}/err" ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "CAT12:Segmentation" "CAT12 encountered an error"
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# Copy relevant files to OUTPUT
echo "Finding and copying CAT12 log and report files..."
find "${in_dir}" -type f \( -name "catlog*" -o -name "catreport*" -o -name "*.log" \) -print0 | while IFS= read -r -d '' file; do
  mv "${file}" "${out_dir}/"
done

#-----------------------------------------------------------------------------
# compress output if needed
echo "Finding and processing segmentation output files..."
find "${in_dir}" \
  -type f \
  \( -name "p[0-4]sub*.nii" -o -name "msub*.nii" \) \
  -print0 | \
  sort -z | \
  while IFS= read -r -d '' file; do
  
  # copy file 
  mv "$file" "${out_dir}/"
  out_file="${out_dir}/$(basename "$file").gz"
  if [[ ${ext} == "gz" ]]; then
    # compress
    echo -e " Compressing ${BOLD_GREEN}$(basename "$file")${RESET} to ${BOLD_RED}.nii.gz${RESET}"
    gzip -f "${out_dir}/$(basename "$file")"
  fi

  # copy geometry from input file
  cmd=(
    call_copyheader
    "${in_file}"
    "${out_file}"
  )
  
  # run
  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi
done

#-----------------------------------------------------------------------------
# create binary mask from p0-segmentation (= brain extracted image)
img_for_mask=$(
  find "${out_dir}" \
  -type f \
  -name "p0*"
) 2>/dev/null

if [ ! -z "${img_for_mask}" ]; then
  echo && print_line -
  echo "Create mask from brain extracted segmentation image \"p0\""
  cmd=(
    fslmaths
    "${img_for_mask}"
    -bin
    "${out_dir}/mask$(basename ${img_for_mask})"
  )

  # run
  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo 
    print_line -
    print_error_msg "$(basename ${0})" "fslmaths"
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# clean up if folders exists (depending on version)
find "${in_dir}" \
  -type f \
  -name "*T1w.mat" \
  -or -name "*T1w.xml" \
  -exec rm {} \; \
  2>/dev/null

for d in "${in_dir}" "${out_dir}"; do
  rm -r "${d}/mri" "${d}/err" "${d}/report" 2>/dev/null
done

# remove created T1w.nii files
if [[ "${ext}" == "gz" ]]; then
  rm -r "${tmp_file}" 2>/dev/null
fi
