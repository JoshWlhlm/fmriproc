#!/usr/bin/env bash
#$ -S /usr/bin/env bash
#$ -cwd
#$ -j Y
#$ -V

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_cat12

Wrapper for brain extraction CAT12. You should have the toolbox installed in <path>. This script
uses a tempate script to run CAT12 in SPM.

Args:
 -s <SPM_PATH>  path to SPM; should contain CAT12 in toolbox directory
 -l <LOG_PATH>	path to working directory, defaults to DIR_LOGS
 --full         refers to a full processing with CAT12, which is sometimes overkill (makes the brain 
                too smooth). Default is just tissue segmentation.
 <input image>  input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                not like *.nii.gz files.
 <output path>	path to output directory; in here, 'mri' and 'report' will be stored

Usage:
 call_cat12 -l <log_dir> -s <SPM_PATH> <input file> <output directory>
 call_cat12 <input file> <output directory>

Example:
 call_cat12 /path/to/inputfile.nii.gz /path/to/output_dir
 call_cat12 -l /path/to/logs -s /packages/matlab/toolbox/spm12 input.nii.gz /path/to/output

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
MODE="brain"
while getopts :-:l:s:m: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        full)
          MODE="full"
          ;;
    *)
      if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
        echo "Unknown option --${OPTARG}. Did you mean \"--full\"?"
        exit 1
      fi
      ;;
      esac;;    
    l)  LOG=${OPTARG}
            ;;
    s)  SPM=${OPTARG}
            ;;
    m)  MODE=${OPTARG}
            ;;			
  esac
done

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z "${SPM}" ]]; then
  if [[ -z "${SPM_PATH}" ]]; then
    echo "ERROR: SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH="${SPM_PATH}"
  fi
else
  SPM_PATH="${SPM}"
fi

#-----------------------------------------------------------------------------
# Define default processing MODE
if [[ -z ${MODE} ]]; then
  MODE='brain'
else
  if [[ ${MODE,,} != 'full' && ${MODE,,} != 'brain' ]]; then
    echo "ERROR in basename ${0}: MODE must be \"full\" or \"brain\", got \"${MODE}\""
    exit 1
  fi
fi

# if file specified is in current directory, add entire path
INPUT=$(fetch_filepath "${INPUT}")

ext=$(fetch_extension "${INPUT}")
if [[ ${ext} == "gz" ]]; then
  in_file=$(dirname "${INPUT}")/$(basename "${INPUT}" .gz)
  gunzip -c "${INPUT}" > "${in_file}"
else
  in_file="${INPUT}"
fi

#-----------------------------------------------------------------------------
# Define default LOG-path
if [[ -z ${LOG} ]]; then
  LOG_DIR="$(dirname "${in_file}")"
else
  LOG_DIR="${LOG}"
fi

if [[ ! -d "${LOG_DIR}" ]]; then
  mkdir -p "${LOG_DIR}"
fi

#-----------------------------------------------------------------------------
# Create new script
new_script="${LOG_DIR}/catscript.m"
if [[ -f "${new_script}" ]]; then
  rm -r "${new_script}"
fi

if [[ ! -d ${OUTPUT} ]]; then
  mkdir -p ${OUTPUT}
fi

# Only run stuff if we can't find 'mri'-directory in the directory from the input
# file or in the specified output-directory. Mind you, it therefore does NOT over-
# write stuff from CAT12..
if [[ -d "${OUTPUT}/mri" ]]; then
  if [[ $(ls "${OUTPUT}/mri" | wc -l) -eq 0 ]]; then
    RUN=1
    verdict="Running CAT12:"
    reason="${OUTPUT}/mri is empty"
  else
    verdict="Not running CAT12:"
    reason="${OUTPUT}/mri is not empty"  
    RUN=0
  fi
else
  if [[ -d $(dirname "${in_file}")/mri ]]; then
    if [[ `ls $(dirname "${in_file}")/mri | wc -l` -eq 0 ]]; then
      RUN=1
      verdict="Running CAT12"
      reason="input folder contains empty \"mri\"-folder"
    else
      RUN=0
      verdict="Not running CAT12"
      reason="input folder contains non-empty \"mri\"-folder"      
    fi
  else
    # some CAT versions might not have mri/ report/ folders
    if ls "${OUTPUT}"/p[0-4]sub* &>/dev/null; then
      RUN=0
      verdict="Not running CAT12"
      reason="p[0-4]-files (probability maps) present in output folder"
    else
      if ls "$(dirname "${in_file}")"/p[0-4]sub* &>/dev/null; then
        RUN=0
        verdict="Not running CAT12"
        reason="input folder contains p[0-4]-files"
      else
        RUN=1
        verdict="Running CAT12"
        reason="output folder does not contain p[0-4]-files"
      fi
    fi
  fi
fi

echo "${verdict}: ${reason}"
if [[ ${RUN} -eq 1 ]]; then

  # make_cat_script = in call_bashhelper
  make_cat_script "${SPM_PATH}" "${in_file}" ${MODE} "${new_script}"
  
  # call_matlab = in call_bashhelper
  echo "Starting CAT12.."

  # store output in log file so we can check for errors
  log_file="${OUTPUT}/catlog.txt"
  if [ -f "${log_file}" ]; then
    rm -r "${log_file}" 2>/dev/null
  fi

  call_matlab "${new_script}" >> "${log_file}"

  # we should have p* files by now
  ff=$(find "$(dirname "${in_file}")" -type f \( -name "p[0-4]sub*.nii" \))
  if [[ -z ${ff} ]]; then
    echo "ERROR: could not find segmentation files in $(dirname ${in_file}). Matlab must have exited with non-zero status"
    exit 1
  fi

  # check if matlab succeeded
  ff=cat "${log_file}" | grep "Failed: CAT12: Segmentation" | cut -d"." -f2 | xargs | sed 's/\r$//'
  if [[ ! -z ${ff} ]]; then
    mv "${log_file}" $(dirname "${in_file}")/$(basename "${in_file}" .nii)_error.log
    echo "ERROR in basename ${0}: matlab exited with non-zero status"
    exit 1
  else
    mv "${log_file}" $(dirname "${in_file}")/$(basename "${in_file}" .nii).log
  fi

  # check for error-directory
  if [[ -d $(dirname "${in_file}")/err ]]; then
    echo "ERROR in basename ${0}: CAT12 encountered an error"
    exit 1
    rm -r $(dirname "${in_file}")/err # info is in the report-file; delete this directory
  fi
fi

# Copy relevant files to OUTPUT
echo "Finding and copying CAT12 log and report files..."
find "$(dirname "${in_file}")" -type f \( -name "catlog*" -o -name "catreport*" -o -name "*.log" \) -print0 | while IFS= read -r -d '' file; do
  mv "$file" "${OUTPUT}/"
done

echo "Finding and processing segmentation output files..."
find "$(dirname "${in_file}")" -type f \( -name "p[0-4]sub*.nii" -o -name "msub*.nii" \) -print0 | sort -z | while IFS= read -r -d '' file; do
  
  # copy file 
  mv "$file" "${OUTPUT}/"
  if [[ ${ext} == "gz" ]]; then
    # compress
    out_file="${OUTPUT}/$(basename "$file").gz"
    echo " Compressing $(basename "$file") to .nii.gz"
    gzip --force "${OUTPUT}/$(basename "$file")"
  fi

  # copy geometry from input file
  cmd="fslcpgeom "${INPUT}" "${OUTPUT}/$(basename "$file").gz""
  eval ${cmd}
  if [[ $? -ne 0 ]]; then
    echo "ERROR in $(basename ${0}): fslcpgeom exited with non-zero status"
    echo "${cmd}"
    exit 1
  fi
done

# create binary mask from p0-segmentation (= brain extracted image)
img_for_mask=$(find ${OUTPUT} -type f -name "p0*") 2>/dev/null
if [ ! -z ${img_for_mask} ]; then
  echo "Create mask from brain extracted segmentation image \"p0\""
  fslmaths ${img_for_mask} -bin ${OUTPUT}/mask$(basename ${img_for_mask})
fi

# clean up if folders exists (depending on version)
find "$(dirname "${INPUT}")" -type f \( -name "*T1w.mat" -o -name "*T1w.xml" \) -exec rm {} \; 2>/dev/null
rm -r "${OUTPUT}/mri" "${OUTPUT}/err" "${OUTPUT}/report" 2>/dev/null
rm -r "$(dirname "${INPUT}")/mri" "$(dirname "${INPUT}")/err" "$(dirname "${INPUT}")/report" 2>/dev/null

# remove created T1w.nii files
if [[ ${ext} == "gz" ]]; then
  rm -r "${in_file}" 2>/dev/null
fi
