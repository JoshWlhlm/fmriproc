#!/usr/bin/env python

import os
from nilearn import image
from scipy import ndimage
import sys, getopt
from lazyfmri import utils
opj = os.path.join
rb = f"{utils.color.RED}{utils.color.BOLD}"
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = f"{utils.color.END}"

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_combine

This is a hardcore version of call_gdhcombine. In that script, a weighted combination is calculated
and used to derive tissue probability maps. This one is more rigid, in that it creates binary tissue
"probabilities" mainly based on CAT12 and FreeSurfer (ignoring FAST and MGDM segmentations). This
can be particularly useful in hard-to-segment areas, such as the ACC, and prefrontal regions. 

Args:
    -s <subject nr>  subject ID
    -q <CAT12>       directory in DIR_DATA_DERIV containing labels from CAT12 (optional!)
    -a <FAST>        directory containing segmentations from FAST
    -b <FreeSurfer>  directory containing segmentations from FreeSurfer
    -c <Nighres>     directory containing segmentations from Nighres
    -d <Manual>      directory containing manual edits
    -o <Output>      output directory + basename output

Example:
    call_combine \
        --sub sub-01
        --cat cat12/sub-01/ses-1
        --fast fmriprep/sub-01/ses-1/anat
        --fs freesurfer/sub-01
        --nighres nighres/sub-01/ses-1/cruise
        --manual manual_masks/sub-01/ses-1
        --outputdir manual_masks/sub-01/ses-1
        --outputbase sub-01_ses-1_acq-MP2RAGE

Notes:
    if you only specify the subject ID, it will look for the files in the environmental variables
    Nighres/FreeSurfer/fMRIprep are compulsory, manual edits & CAT12 are optional!

---------------------------------------------------------------------------------------------------
    """

    subject     = None
    fprep_prob  = None
    fs          = None
    nigh_prob   = None
    cat_prob    = None
    output_dir = opj(os.getcwd(), 'masks')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(argv,"hs:q:a:f:c:d:o:b:n:",["sub=", "cat=", "fast=", "fs=", "nighres=", "manual=", "outputdir=", "outputbase="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print(main.__doc__)
            sys.exit()
        elif opt in ("--sub"):
            subject = arg    
        elif opt in ("-q", "--cat"):
            cat_prob = arg            
        elif opt in ("-a", "--fast"):
            fprep_prob = arg
        elif opt in ("-f", "--fs"):
            fs = arg
        elif opt in ("-c", "--nighres"):
            nigh_prob = arg
        elif opt in ("-d", "--manual"):
            man_edit = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--outputbase"):
            output_base = arg

    if len(argv) < 1:
        utils.verbose("\nNEED AT LEAST A SUBJECT ID", True)
        utils.verbose(main.__doc__, True)
        sys.exit()
    
    # At least fMRIprep/Nighres/FreeSurfer need to be specified. Manual & CAT12 are optional
    if not fprep_prob:
        raise ValueError("Need an fmriprep-directory")

    if not nigh_prob:
        raise ValueError("Need a nighres-directory")

    if not fs:
        raise ValueError("Need a FreeSurfer-directory")

    # split ribbon.mgz into wm/gm components
    utils.verbose("Split FreeSurfer's ribbon files", True)
    base_name = opj(man_edit, output_base)
    cmd = f"call_splitribbon {subject} {base_name}"
    utils.run_shell_wrapper(cmd)

    # Load and resample
    utils.verbose("Load and resample segmentations to nighres-output", True)
    try:
        search_terms = {
            "wm": "manualsegwm",
            "gm": "manualseggm",
            "outside": "desc-outside.nii.gz"
        }

        manual = {
            key: utils.get_file_from_substring(val, man_edit, return_msg=None)
            for key, val in search_terms.items()
        }
    except:
        manual = None
    
    ## Nighres: compulsory
    utils.verbose(f" {gb}nighres{end}..", True)
    search_terms = {
        "wm": "proba_cr-wm.nii.gz",
        "gm": "proba_cr-gm.nii.gz",
        "csf": "proba_cr-csf.nii.gz"
    }

    nighres = {
        key: utils.get_file_from_substring(val, nigh_prob)
        for key, val in search_terms.items()
    }

    for i in nighres:
        if isinstance(nighres[i], list):
            raise ValueError(f"Found more than 1 file for '{i}'-segmentation from Nighres containing string 'proba_cr-{i}.nii.gz'..\n{nighres[i]}")    

    ## fMRIprep: compulsory
    utils.verbose(f" {gb}fmriprep{end}..", True)

    labels = {
        "wm": [f"{os.environ.get('DATA')}", "label-WM"],
        "gm": [f"{os.environ.get('DATA')}", "label-GM"],
        "csf": [f"{os.environ.get('DATA')}", "label-CSF"]
    }

    fmriprep = {
        key: utils.get_file_from_substring(val, fprep_prob)
        for key, val in labels.items()
    }

    for i in fmriprep:
        if isinstance(fmriprep[i], list):
            raise ValueError(f"Found more than 1 file for '{i}'-segmentation from fMRIprep/FAST with '{labels[i]}'..\n{fmriprep[i]}")
        else:
            fmriprep[i] = image.resample_to_img(
                fmriprep[i],
                nighres['gm'],
                interpolation='nearest'
            )
            
    ## CAT12
    utils.verbose(f" {gb}CAT12{end}..", True)
    cat_labels = {
        "gm": "p1",
        "wm": "p2",
        "csf": "p3"
    }

    cat = {
        key: image.resample_to_img(
            utils.get_file_from_substring(val, cat_prob),
            nighres["gm"],
            interpolation="nearest"
        )
        for key, val in cat_labels.items()
    }

    # FreeSurfer
    utils.verbose(f" {gb}FreeSurfer{end}..", True)
    freesurfer_labels = {
        "wm": "ribbon_wm.nii.gz",
        "gm": "ribbon_gm.nii.gz",
        "cx": "ribbon_mask.nii.gz"
    }

    freesurfer = {}
    for key, fname in freesurfer_labels.items():
        img = utils.get_file_from_substring(fname, man_edit)
        resampled = image.resample_to_img(
            img, 
            nighres["gm"],
            interpolation="nearest"
        )
        resampled.to_filename(img)
        freesurfer[key] = img

    # do some operations to cortex img
    print("Creating cortex-specific mask from ribbon.mgz")
    utils.run_shell_wrapper(f"call_dilate {freesurfer['cx']} {freesurfer['cx']} 2")

    # wm
    utils.verbose("Combining segmentations", True)
    utils.verbose(f" {gb}wm{end}..", True)
    if manual['wm'] is not None:
        wm = image.math_img(
            '(cat*ctx) + manual',
            cat=cat['wm'],
            ctx=freesurfer['cx'],
            manual=image.resample_to_img(
                manual['wm'],
                nighres['wm'],
                interpolation='nearest'
            )
        )

        wm_data = wm.get_fdata()
        wm_data[wm_data > 1] = 1
        wm = nb.Nifti1Image(wm_data, affine=wm.affine, header=wm.header)                        
    else:
        wm = image.math_img('(cat*ctx)', cat=cat['wm'], ctx=freesurfer["cx"])

    # gm
    utils.verbose(f" {gb}gm{end}..", True)
    gm = image.math_img(
        '(cat*ctx)',
        cat=cat['gm'],
        ctx=freesurfer["cx"]
    )  

    # csf
    utils.verbose(f" {gb}csf{end}..", True)
    csf = image.math_img(
        '(3 * mgdm) + (cat*ctx)', 
        mgdm=nighres['csf'],
        ctx=freesurfer['cx'],
        cat=cat['csf']
    )

    csf_data = csf.get_fdata()
    csf_data[csf_data > 1] = 1
    csf = nb.Nifti1Image(csf_data, affine=csf.affine, header=csf.header)
    
    # total
    utils.verbose(f" {gb}total{end}..", True)
    total_prob = image.math_img(
        'wm + gm + csf',
        wm=wm,
        gm=gm,
        csf=csf
    )

    utils.verbose("Calculating normalized tissue probability maps and writing output files...", True)

    # Normalize tissue probability maps
    tissue_maps = {
        'WM': image.math_img('wm / total_prob', wm=wm, total_prob=total_prob),
        'GM': image.math_img('gm / total_prob', gm=gm, total_prob=total_prob),
        'CSF': image.math_img('csf / total_prob', csf=csf, total_prob=total_prob),
    }

    # Write each map to file
    out_files = {}
    for label, img in tissue_maps.items():
        out_file = opj(output_dir, f"{output_base}_label-{label}_probseg.nii.gz")
        img.to_filename(out_file)
        out_files[label] = out_file
        utils.verbose(f" wrote normalized {label}-probability map â†’ {gb}{out_file}{end}", True)

    # exclude midbrain, sinus, and CSF-stuff from GM-segmentation
    for mask in [freesurfer['wm'], manual['outside', utils.get_file_from_substring('p3', cat['csf'])]]:
        utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {mask}")
        
    # exclude midbrain from CSF-segmentation
    for mask in [freesurfer['wm'], out_files["GM"]]:
        utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['CSF']} -m {mask}")    

    # get rid of cerebellum
    utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {out_files['CSF']}")

    # remove midbrain stuff
    utils.verbose("Removing midbrain", True)
    utils.run_shell_wrapper(f"call_setmasktoone -i {out_files['WM']} -m {freesurfer['wm']}")
    utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['WM']} -m {out_files['CSF']}")
    utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {freesurfer['wm']}")
    
    # get rid of outside stuff
    if isinstance(manual['outside'], str):
        utils.verbose("Set 'outside' mask to zero", True)
        utils.run_shell_wrapper(f"call_setmasktozero -i {out_files['GM']} -m {manual['outside']}")

    # make inside mask
    utils.verbose("Create 'inside' mask", True)
    inside_mask = image.math_img('wm > 0.45', wm=wm)
    inside_mask = image.largest_connected_component_img(inside_mask)
    inside_mask = image.new_img_like(inside_mask,ndimage.binary_closing(inside_mask.get_fdata(),iterations=3))
    inside_mask.to_filename(opj(output_dir, f"{output_base}_desc-inside.nii.gz"))

    # WM/GM-segmentations need to be binarized to be converted to levelsets properly
    utils.run_shell_wrapper(f"fslmaths {gm_file} -bin {gm_file}")
    utils.run_shell_wrapper(f"fslmaths {wm_file} -bin {wm_file}")

    # set manual GM edits to 1 in GM-file and 0 in WM-file
    if manual['gm'] is not None:
        utils.run_shell_wrapper(f"call_setmasktoone -i {gm_file} -m {manual['gm']}")
        utils.run_shell_wrapper(f"call_setmasktozero -i {wm_file} -m {manual['gm']}")

    print("Make a manual cruise image")
    gm_img = nb.load(gm_file)
    wm_img = nb.load(wm_file)

    gm_data,wm_data = gm_img.get_fdata(), wm_img.get_fdata()
    cruise_img = np.zeros_like(gm_data)
    cruise_img[wm_data > 0] = 2
    cruise_img[gm_data > 0] = 1

    nb.Nifti1Image(
        cruise_img,
        affine=gm_img.affine,
        header=gm_img.header
    ).to_filename(opj(outputdir, f"{output_base}_desc-cruise_cortex.nii.gz"))

    utils.verbose("Done", True)

if __name__ == "__main__":
    main(sys.argv[1:])
