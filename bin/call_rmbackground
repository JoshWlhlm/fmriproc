#!/usr/bin/env python

import os
import sys
import getopt
from nilearn import image
opj = os.path.join

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_rmbackground

Remove background noise from an MP2RAGE image using a brain mask and the INV2 magnitude image.

This method leverages the assumption that the second inversion (INV2) in MP2RAGE provides a better
representation of non-brain regions due to its noise profile. This script uses a binary mask to
preserve brain regions from the T1-weighted image and fills the background (outside the mask) with 
a normalized version of the INV2 image. This can suppress extreme background intensities that may
interfere with processing or visualization.

The operation can be summarized as:

      't1w * t1w_mask * np.mean(inv2[t1w_mask == 1]
  -------------------------------------------------------
  np.max(inv2)) + t1w * inv2/np.max(inv2) * (1-t1w_mask)'

Usage:
  call_rmbackground -t <T1w image> -m <mask> -i <INV2 image> -o <output>

Mandatory arguments:
  -t|--t1w        Path to the T1-weighted image (with noisy background)
  -m|--mask       Binary brain mask image (non-zero = brain, 0 = background)
  -i|--inv2       Second inversion image (e.g., INV2 magnitude)
  -o|--output     Output image with cleaned background

Options:
  -h|--help       Print this help text

Outputs:
  A background-corrected T1-weighted image with noise replaced outside the mask using normalized 
  INV2

Examples:
  call_rmbackground \
    -t t1w.nii.gz \
    -m mask.nii.gz \
    -i inv2.nii.gz \
    -o masked.nii.gz

  call_rmbackground \
    --t1w derivatives/pymp2rage/sub-01/ses-1/sub-01_ses-1_acq-MP2RAGE_T1w.nii.gz \
    --mask derivatives/pymp2rage/sub-01/ses-1/sub-01_ses-1_acq-MP2RAGE_desc-spm_mask.nii.gz \
    --inv2 sub-01/ses-1/anat/sub-01_ses-1_acq-MP2RAGE_inv-2_part-mag.nii.gz \
    --output derivatives/pymp2rage/sub-01/ses-1/sub-01_ses-1_acq-MP2RAGE_T1w_denoised.nii.gz

---------------------------------------------------------------------------------------------------
    """

    t1w_fn  = None
    mask    = None
    inv2    = None
    output  = None

    #-----------------------------------------------------------------------------
    # deal with arguments
    try:
        opts = getopt.getopt(
            argv,
            "ht:m:i:o:",
            ["help", "t1w=", "mask=", "inv2=", "output="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-t", "--t1w"):
            t1w_fn = arg
        elif opt in ("-m", "--mask"):
            mask = arg
        elif opt in ("-i", "--inv2"):
            inv2 = arg            
        elif opt in ("-o", "--output"):
            output = arg

    if len(argv) < 4:
        print(main.__doc__)
        sys.exit()
    
    #-----------------------------------------------------------------------------
    # ensure binary
    mask = image.math_img('(t1w_mask > 0)', t1w_mask=mask)

    #-----------------------------------------------------------------------------
    # run masking
    new_t1w = image.math_img(
        't1w * t1w_mask * np.mean(inv2[t1w_mask == 1]/np.max(inv2)) + t1w * inv2/np.max(inv2) * (1-t1w_mask)',
        t1w=t1w_fn,
        t1w_mask=mask,
        inv2=inv2
    )

    new_t1w.to_filename(output)

if __name__ == "__main__":
    main(sys.argv[1:])
