#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_stats2surf

This script warps your statistical image to the FreeSurfer inflated surface using the registration
files from fmriprep. First, we need to warp the rendered_zstat image to the T1w-space with from-
template_to-T1w.h5 (call_antsapplytransforms), then we warp it to the surface with mri_vol2surf. 
I will always need at least a subject ID, a FEAT-directory with the stats map (or input file), and 
the warp file mapping template to T1w-space. You can leave fsdir empty if you want to use the path 
described in SUBJECTS_DIR.

Usage:
  call_stats2surf -s <subj_ID> -f <fsdir> -w <warpfile> -t <threshold> -q <added flag> -a <search>
                  -r <reference>

Mandatory:
  -s <subj ID>    subject ID as per output of FreeSurfer (e.g., 'sub-001')
  -i <dir/file>   Input file or path to FEAT-directory (can also be group-directory, but in that 
                  case it should be specified up to the dir.gfeat/cope?.feat-directory). Whatever 
                  you named the stats-map; make sure you have something with "zstat?" in it.. If 
                  you have completely changed the name (while keeping zstat? [!!!]), use the '-a' 
                  flag.
                  
                  If you specify a gfeat directory, you have to specify some registration file to
                  on of the subjects, and warp it to the surface from there. So if you want to
                  warp the group-file to the surface:
                    - warp zstat to sub-xxx (-s sub-xxx)
                    - warp zstat_space-subxxx to surface of fsaverage
  -w <warp file>  h5 (or other) warp file mapping your stats file to T1w-space.

Optional:
  -f <fsdir>      path to freesurfer directory; if left empty > reads SUBJECTS_DIR
  -o <output dir> by default in 'freesurfer/fsaverage/volumes'
  -r <reference>  reference file on which the <warp file> is based. If not specified, it will look
                  for the preprocessed anatomical file from fMRIPrep in the folder from <warp 
                  file>. If that's empty, I'll assume the input is a FEAT-directory, in which case 
                  it will look for the highres.nii.gz file in <FEAT>/reg.
  -a <str>        here you can specify substring to look for the statistical image. If you do not 
                  want to use the standard rendered_thresh_zstat1.nii.gz, add some more search cri-
                  teria. For now, please use only 1 extra search parameter.. (leave this empty if 
                  you want to use the regular rendered_thresh_zstat?.nii.gz images)
  -t <thresh>     threshold rendered stats map? Leave empty to skip thresholding. Skipping will
                  show both the negative and positive values of the zstat-image on the surface
  -q <suffix>     string to add to the .gii files to differentiate?

Options:
  -h|--help       print this help text

Example:
  call_stats2surf -s sub-001 -i run-1.feat -w /path/to/warp.h5
  call_stats2surf -s sub-001 -f /path/to/freesurfer -i <gfeat/cope1.feat> -w /path/to/warp.h5
  call_stats2surf -s sub-001 -i some_file.nii.gz -w /path/to/warp.h5

---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# Deal with arguments
while getopts :-:hs:f:o:i:w:a:t:q:r: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in
        help)
          Usage && exit 0
          ;;              
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;  
    s)  subj_ID=${OPTARG}
          ;;
    f)  fsdir=${OPTARG}
          ;;
    o)  outdir=${OPTARG}
          ;;
    i)  input=${OPTARG}
          ;;            
    w)  warp=${OPTARG}
          ;;
    a)  search=${OPTARG}
          ;;
    t)  thresh=${OPTARG}
          ;;
    q)  thresh=${OPTARG}
          ;;
    r)  reference=${OPTARG}
          ;;
    h)  Usage && exit 0
          ;;            
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

# we need SUBJECTS_DIR for mri_vol2surf
if [[ -z "${fsdir}" ]]; then
  if [[ -z "${SUBJECTS_DIR}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "FreeSurfer" "SUBJECTS_DIR-variable not set.."
    exit 1
  else
    fsdir="${SUBJECTS_DIR}"
  fi
else
  export SUBJECTS_DIR="${fsdir}"
fi

# check if we have a valid subjects-directory
if [[ ! -d "${fsdir}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "FreeSurfer" "Could not find ${BOLD_GREEN}${fsdir}${RESET}"
  exit 1
fi

if [[ ! -f "${warp}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "input" "Please specify transformation file"
  exit 1
fi

# check if input was directory or file
if [[ -f "${input}" ]]; then
  input=$(fetch_filepath "${input}")
  ext=$(fetch_extension "${input}")

  if [[ ${ext} == "gz" ]]; then
    search=$(basename "${input}" .nii.gz)
  elif [[ ${ext} == "nii" ]]; then
    search=$(basename "${input}" .nii)
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" "extension" "input file must end with \".nii.gz\" or \".nii\", not \".${ext}\""
    exit 1
  fi
  
  # for later output naming
  set_zstat_id=0
elif [[ -d "${input}" ]]; then
  set_zstat_id=1
  if [[ ! -z "${search}" ]]; then
    input=$(
      find "${input}" \
      -maxdepth 1 \
      -type f \
      -name "*.nii.gz" \
      -and -name "*${search}*" \
      -and -not -name "*space-*" \
      2>/dev/null
    )
  else
    input=$(
      find "${input}" \
      -maxdepth 1 \
      -type f \
      -name "*rendered_thresh*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )
    search="zstat"
  fi
else
  echo
  print_line -
  print_error_msg "$(basename ${0})" "input" "Unknown input type. Must be a file or directory"
  exit 1
fi 

# sort array
IFS=$'\n' inputs=($(sort <<<"${input[*]}"))
unset IFS

# get the reference anatomy (in native space)
if [[ -z "${reference}" ]]; then
  if [[ "${input}" == *".gfeat"* ]]; then
    T1=$(
      find "$(dirname "${warp}")" \
      -type f \
      -name "*preproc_T1w.nii.gz" \
      -and -not -name "*space-*" \
      2>/dev/null
    )
  else
    T1=$(
      find "${input}" \
      -type f \
      -name "*highres*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )
  fi
else
  T1="${reference}"
fi

if [[ ! -f ${T1} ]]; then
  echo 
  print_line -
  print_error_msg "$(basename ${0})" "Could not locate reference image. "
  echo " - If the input is gfeat-directory, I'm looking for \"preproc_T1w.nii.gz\" in \"$(dirname ${warp})\""
  echo " - If the input is a FEAT-directory, I'm looking for \"highres.nii.gz\" in \"${input}\""
  echo " - If the input is a file, I'm looking for the -r flag, \"${reference}\""
  exit 1
fi

# output stuff
if [[ ! -z "${outdir}" ]]; then
  if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
  fi
  out_flag="-o ${outdir}"
else
  out_flag=""
fi

for i in ${inputs[@]}; do

  # set output name for space-T1w file
  if [[ ${set_zstat_id} -eq 1 ]]; then
    STRING="$(basename "${i}")"
    nr=$(echo "${STRING//[!0-9]/}")
    new_warp="${i}/${subj_ID}_space-T1w_desc-${search}${nr}.nii.gz"
  else
    new_warp="$(dirname "${i}")/${subj_ID}_space-T1w_desc-${search}.nii.gz"
  fi

  # warp to T1w-space
  if [[ ! -f "${new_warp}" ]]; then
    echo "Warping $(basename ${i}) image to T1w-space"
    cmd=(
      call_antsapplytransforms
      "${T1}"
      "${i}"
      "${new_warp}"
      "${warp}"
    )
    
    print_cmd "${cmd[@]}" && eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "call_antsapplytransforms"
      exit 1
    fi
  fi

  # threshold zstat-images
  if [[ ! -z ${thresh} ]]; then
    if [[ $(fslstats ${i} -R | awk '{print $1}') != "0.000000" ]]; then
      echo "Thresholding $(basename ${new_warp}) with z=${thresh}"
      cmd=(
        fslmaths
        "${new_warp}"
        -thr "${thresh}"
        "${new_warp}"
      )

      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "fslmaths"
        exit 1
      fi        
    fi
  fi

  # set output based on whether input was directory or file
  if [[ ${set_zstat_id} -eq 1 ]]; then
    base_out="${search}${nr}${q}"
  else
    base_out="${search}${q}"
  fi 

  # project to fsaverage through fsnative of subj_ID
  cmd=(
    call_vol2fsaverage
    "${out_flag}"
    -p "group" 
    "${subj_ID}"
    "${new_warp}"
    "${base_out}"
  )

  # print and run
  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "call_vol2fsaverage"
    exit 1
  fi  
done
