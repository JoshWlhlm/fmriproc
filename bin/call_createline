#!/usr/bin/env python

import os
import sys
import getopt
from lazyfmri import utils
from fmriproc.image import create_line_from_slice


@utils.validate_cli_inputs(required_keys=["in_file", "out_file"])
def main(context):
    """
---------------------------------------------------------------------------------------------------
call_createline

This super short script creates a nifti image of the line-contours based on the single slice image.
It assumes your slice gap was 4mm, +2mm and -2mm from the middle. Given a voxel size of 0.25mm, 
this translates to 8 voxels above and below the center for a total gap of 16 voxels. It returns a 
nifti image with high values of where the box was.

Usage:
  call_createline [mandatory] [optional] [options]

Mandatory (required input):
  -i|--in <file>  string-like path to file to extract from
  -o|--out <file> string-like path to output new volume to

Optional (flags with defaults):    
    -w|--width    int value of line thickness (default 4mm [=16 voxels], larger for visibility 
                  purposes). It will add half of the <width> in both directions from the cen-
                  ter, so <width> has to be a divideable by 2. Even numbers only!

Options (extra):
    -h|--help     print this help text                          
    --fh          set foldover to FH [default]
    --lr          set foldover to LR
    --ap          set foldover AP

Outputs
  output file     new volume containing the extracted data from input file

Usage:
  call_createline <input> <output> <width> <foldover direction>

Example:
  call_createline -i input.nii.gz -o output.nii.gz -w 16 --fh
  call_createline -i input.nii.gz -o output.nii.gz --width 16 --fh

---------------------------------------------------------------------------------------------------
    """

    in_file = context["in_file"]
    out_file = context["out_file"]
    width = context.get("width", 16)
    fold = context.get("fold", "FH")
    shift = context.get("shift", 0)

    if os.path.exists(in_file):
        create_line_from_slice(
            in_file,
            out_file=out_file,
            width=width,
            fold=fold,
            shift=shift
        )
    else:
        raise FileNotFoundError(f"Could not find specified file: {in_file}")


if __name__ == "__main__":

    context = {
        "in_file": None,
        "out_file": None,
        "width": 16,
        "fold": "FH",
        "shift": 0,
    }

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hi:o:w:",
            ["help", "in=", "out=", "width=", "fh", "lr", "ap"]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--in"):
            context["in_file"] = arg
        elif opt in ("-o", "--out"):
            context["out_file"] = arg
        elif opt in ("-w", "--width"):
            context["width"] = int(arg)
        elif opt == "--fh":
            context["fold"] = "FH"
        elif opt == "--lr":
            context["fold"] = "LR"
        elif opt == "--ap":
            context["fold"] = "AP"

    main(context=context)
