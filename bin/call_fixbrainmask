#!/usr/bin/env python

import os
import sys
import shutil
import numpy as np
import nibabel as nb
from nilearn import image
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_fixbrainmask

Sometimes the brainmask.mgz image contains remnants of the skull around the mouth/eye area. I am 
not entirely sure where this comes from and to what extent this affects the surface reconstruc-
tion, but this script can be used to get rid of that by using a binary mask to mask that stuff 
out. The input mask is either a preprocessed image or automatically retrieved from a directory if 
it contains a file with 'spm_mask' in its name.

The result is written back into the FreeSurfer subject directory as a replacement for the original 
brainmask and additionally stored as 'brain.finalsurfs.manedit.mgz'.

Usage:
  call_fixbrainmask <subject id> <mask_dir_or_file>

Positional Arguments:
  <subject id>    FreeSurfer subject ID directory (i.e., SUBJECTS_DIR/<subject>)
  <Man seg>       path to directory containing the manual segmentation mask, or directly to 
                  a binary mask file to be applied. If input is a directory the following files will
                  be prioritized:
                    - *cat_mask.nii.gz (output from master -m 09)
                    - *spm_mask.nii.gz (output from master -m 04)

Outputs:
  - $SUBJECTS_DIR/<subject id>/mri/brainmask.mgz
  - $SUBJECTS_DIR/<subject id>/mri/brain.finalsurfs.manedit.mgz

Example:
  call_fixbrainmask sub-01 /path/to/manual_masks/sub-01/ses-1
  call_fixbrainmask sub-01 mask.nii.gz

Notes:
  - The mask will be resampled to match the FreeSurfer brainmask
  - Overwrites 'brainmask.mgz' directly, so make a backup if needed
  - Intended as a cleanup step prior to surface regeneration or reprocessing

---------------------------------------------------------------------------------------------------
    """

    fs_subject = None
    manseg = None

    if len(argv) < 2:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    fs_subject = argv[0]
    manseg = argv[1]

    subjects_dir = os.environ.get("SUBJECTS_DIR")
    fsdir = opj(
        subjects_dir,
        fs_subject
    )

    if not os.path.exists(fsdir):
        raise ValueError(f"Could not find '{fs_subject}' in '{subjects_dir}'. Make sure SUBJECTS_DIR is set correctly")
    
    # Determine the appropriate mask file
    if os.path.isfile(manseg):
        spm_mask = manseg
    else:
        mask_files = [f for f in os.listdir(manseg) if "cat_mask" in f or "spm_mask" in f]
        if not mask_files:
            raise ValueError(f"Could not find file with 'spm_mask' or 'cat_mask' in '{manseg}'")
        # Prioritize 'cat_mask' if present
        mask_files.sort(key=lambda f: ("cat_mask" not in f, f))
        spm_mask = opj(manseg, mask_files[0])
            
    brainmask = opj(fsdir, 'mri', 'brainmask.mgz')
    mask_img = image.resample_to_img(
        spm_mask,
        brainmask,
        force_resample=True,
        copy_header=True,
        interpolation='nearest'
    )

    mask_img = nb.freesurfer.MGHImage(
        mask_img.get_fdata().astype(np.float32),
        affine=mask_img.affine
    )

    new_brainmask = image.math_img(
        'brain * (mask > 0)',
        brain=brainmask,
        mask=mask_img
    )

    # make backup
    fs_backup = opj(fsdir, 'mri', "brainmask.backup.mgz")
    shutil.copyfile(brainmask, fs_backup)

    for f in ["brainmask", "brain.finalsurfs", "brainmask.auto", "brain.finalsurfs.manedit"]:
        new_filename = opj(fsdir, 'mri', f'{f}.mgz')
        new_brainmask.to_filename(new_filename)

if __name__ == "__main__":
    main(sys.argv[1:])
