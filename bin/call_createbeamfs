#!/usr/bin/env python

import os
import sys
import numpy as np
import nibabel as nb
from lazyfmri import utils
opj = os.path.join


def main(argv):
    """
---------------------------------------------------------------------------------------------------
call_createbeamfs

This script creates a simple binary volume ("template beam") aligned with the native FreeSurfer 
(orig.mgz) space for a given subject. The purpose is to mark a central location (along the 
midsagittal plane) which can then be used for further line-based annotations, e.g., with 
call_createlinefs.

The created beam spans a narrow slab through the volume center, aligned along the anterior-
posterior axis.

Usage:
  call_createbeamfs <subject>

Arguments:
  <subject ID>    Subject ID as found in the FreeSurfer SUBJECTS_DIR (e.g., 'sub-001')

Outputs:
  space-fs_desc-template_beam.nii.gz     A 3D binary NIfTI image with a central beam

Example:
  call_createbeamfs sub-001

Notes:
  - The beam is constructed by setting a central stripe of voxels to 1 in the orig.mgz space.
  - If the required NIfTI version of orig.mgz (i.e., orig.nii.gz) does not exist, it will be 
    created using call_mriconvert.
  - Intended as a quick anatomical anchor for visual overlays or further geometric definitions.

---------------------------------------------------------------------------------------------------
    """

    sub = None

    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()

    sub = argv[0]

    orig = opj(
        os.environ.get('SUBJECTS_DIR'), sub, 'mri', 'orig.nii.gz')

    if not os.path.exists(orig):
        cmd = f"call_mriconvert {orig.split('.')[0]+'.mgz'}"
        utils.run_shell_wrapper(cmd)

    img = nb.load(orig)
    data = img.get_fdata()
    center = data.shape[0]//2
    new = np.zeros_like(data)
    new[:, center-2:center+1, center-2:center+2] = 1

    fnew = opj(os.path.dirname(orig), 'space-fs_desc-template_beam.nii.gz')
    nb.Nifti1Image(
        new,
        affine=img.affine,
        header=img.header
    ).to_filename(fnew)

    return fnew


if __name__ == "__main__":
    main(sys.argv[1:])
