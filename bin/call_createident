#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_createident

Creates an identity transformation file in the style of FreeSurfer (lta/dat), ITK (mat/txt). Depen-
ding on the extension specified in the output name the correct format will be inserted. If you want
an FSL-matrix, use the '-f'/'--fsl' flag

Usage:
  call_createident <-f> <fname> <moving image>

Arguments:
  -s <sub>        Subject ID as used in FreeSurfer directory for FreeSurfer transformation file

Options:
  -h|--help       print this help text
  -f|--fsl        Make FSL-type identity matrix (kind of redundant as you can use the file shipped 
                  with FSL in \$FSLDIR/src/flirt/flirtsch/ident.mat)

Positional:
  <fname>         Output name of transformation file
  <image>         If you specified a FreeSurfer file, we can insert the voxel dimensions in the
                  transformation file, though this does not seem to be mandatory: 
                  see https://surfer.nmr.mgh.harvard.edu/fswiki/RegisterDat


Example:
  call_createident sub-001_from-anat_to-9slice_desc-genaff.mat (ITK)
  call_createident sub-001_from-anat_to-9slice_desc-genaff.txt (ITK)
  call_createident sub-001_from-anat_to-9slice_desc-genaff.lta moving.nii.gz (FreeSurfer)
  call_createident sub-001_from-anat_to-9slice_desc-genaff.dat moving.nii.gz (FreeSurfer)

Notes:
  Can be used in combination with call_antsapplytransforms, by registering a full FOV to a par-
  tial FOV like the 9-slice/1-slice images. You can do the following:

  call_antsapplytransforms <ref> <mov> <out> <aff>
  call_antsapplytransforms 9slice.nii.gz anat_ses-1.nii.gz layers-in-9slice.nii.gz this_affine.txt

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -le 1 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
FSL=0
while getopts :-:hfs: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in                  
        fsl)
          FSL=1
          ;;
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    f)  FSL=1
          ;;
  esac
done

#-----------------------------------------------------------------------------
# read args
fname=${@:$OPTIND:1}
image=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${fname}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find input file \"${BOLD_GREEN}${fname}${RESET}\""
  exit 1
else
  fname="$(readlink -f "${fname}")"
fi

# get extension to derive file type
ext="$(fetch_extension "${fname}")"

# remove existing
rm -r "${fname}" 2>/dev/null

#-----------------------------------------------------------------------------
# FSL
if [[ ${FSL} -eq 1 ]]; then

  (
  echo "1 0 0 0"
  echo "0 1 0 0"
  echo "0 0 1 0"
  echo "0 0 0 1"
  ) >> "${fname}"

else
  #-----------------------------------------------------------------------------
  # ITK | MatrixOffsetTransformBase_double_3_3
  if [[ ${ext} == "mat" ]]; then

    (
    echo "#Insight Transform File V1.0"
    echo "#Transform 0"
    echo "Transform: MatrixOffsetTransformBase_double_3_3"
    echo "Parameters: 1 0 0 0 1 0 0 0 1 0 0 0"
    echo "FixedParameters: 0 0 0"
    ) >> "${fname/.mat/.txt}"

    cmd=(
      ConvertTransformFile
      3
      "${fname/.mat/.txt}"
      "${fname}"
      --convertToAffineType
    )

    eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "ConvertTransformFile"
      exit 1
    fi  
    rm -r "${fname/.mat/.txt}" 2>/dev/null

  #-----------------------------------------------------------------------------
  # ITK | MatrixOffsetTransformBase_double_3_3
  elif [[ ${ext} == "txt" ]]; then

    (
    echo "#Insight Transform File V1.0"
    echo "#Transform 0"
    echo "Transform: MatrixOffsetTransformBase_double_3_3"
    echo "Parameters: 1 0 0 0 1 0 0 0 1 0 0 0"
    echo "FixedParameters: 0 0 0"
    ) >> "${fname}"

  #-----------------------------------------------------------------------------
  # FreeSurfer
  elif [[ "${ext}" == "dat" ]]; then

    if [[ -z ${sub} ]]; then
      echo "ERROR: this option requires the subject ID"
      Usage
      exit 1
    fi

    if [[ -z "${image}" ]]; then
      in_plane=1
      between_slice=1
    else
      in_plane=$(fslval "${image}" pixdim2)
      between_slice=$(fslval "${image}" pixdim3)
    fi
    
    # from https://surfer.nmr.mgh.harvard.edu/fswiki/RegisterDat
    # 1. Subject - name of subject as found in $SUBJECTS_DIR/subject (not always necessary) 
    # 2. In-plane voxel resolution in mm -- ignored 
    # 3. Between-plane voxel resolution in mm -- ignored 
    # 4. Intensity - used by tkregister2
    # The footer line should always be "round".

    (
    echo "${sub}"
    echo "${in_plane}"
    echo "${between_slice}"
    echo "0.150000"
    echo "1 0 0 0"
    echo "0 1 0 0"
    echo "0 0 1 0"
    echo "0 0 0 1"
    echo "round"
    ) >> "${fname}"

  #-----------------------------------------------------------------------------
  # FreeSurfer
  elif [[ ${ext} == "lta" ]]; then
    echo "ERROR: to-be implemented.. Choose .dat and use lta_convert"
  else
    echo "Invalid extention \"${ext}\" for output file"
    Usage
    exit 1
  fi
fi
