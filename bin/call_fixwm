#!/usr/bin/env python

import os
import sys
import numpy as np
import nibabel as nb
from nilearn import image
from lazyfmri import utils
opj = os.path.join


def resample_and_convert_to_mgh(
    src,
    trg,
    **kwargs
    ):

    """
    Resample the input image to match the target image and convert to MGH format
    (used by FreeSurfer).

    Parameters:
        src (str): Path to source image to resample
        trg (str): Path to target image
        kwargs (dict): Additional nilearn resample options (e.g., interpolation)

    Returns:
        nibabel.freesurfer.MGHImage: Resampled image in MGH format
    """

    kwargs = utils.update_kwargs(
        kwargs,
        "interpolation",
        "nearest"
    )

    # resample to FreeSurfer
    res  = image.resample_to_img(
        src,
        trg, 
        **kwargs
    )
    
    # read into MGH
    res_mgh = nb.freesurfer.MGHImage(
        res.get_fdata().astype(np.float32),
        affine=res.affine
    )

    return res_mgh

@utils.vatlidate_cli_inputs(required_keys=["subject", "wmseg"])
def main(subject=None, wmseg=None, cortex=None):
    """
---------------------------------------------------------------------------------------------------
call_fixwm

The white-matter segmentation from FreeSurfer is not always optimal. With this script, we inject the
segmentation from CAT12 into FreeSurfer, which tends to be much more accurate, especially around 
challenging regions like the insula. 

Instead of feeding the CAT12 segmentation to the full pial-editing pipeline (e.g., via 
`call_gdhinject`), this script limits itself to updating wm.mgz directly. This approach avoids 
typical issues such as unwanted extension of the segmentation into the cerebellum.

Inputs:
  <subject>       Subject ID as used in the FreeSurfer SUBJECTS_DIR
  <WM seg>        Path to white-matter segmentation from CAT12 or equivalent
  <cortex seg>    Optional path to cortex mask (e.g., from Nighres CRUISE or Spinoza pipeline);
                  used to exclude cerebellum. If not given, script will attempt to auto-detect 
                  a mask file containing 'cruise_mask' in the manual_masks directory

Outputs:
  wm.mgz          Updated FreeSurfer white matter segmentation including external edits
                  (injected with label=110, cleaned up with largest connected component)

Usage:
  call_fixwm <subject> <cat12_wmseg.nii.gz> [<cortex_mask.nii.gz>]

Examples:
  call_fixwm sub-001 p2WMseg.nii.gz cruise_mask.nii.gz
  call_fixwm sub-002 /path/to/wm_seg.nii.gz    # cortex mask will be auto-detected

Notes:
  - SUBJECTS_DIR must be set correctly in your environment
  - This script overwrites wm.mgz directly (a backup is not created automatically)
  - The script attempts to constrain edits to regions within the cortex mask (if available)

---------------------------------------------------------------------------------------------------
    """

    subject = None
    wmseg   = None
    cortex  = None

    if len(argv) < 2:
        print(main.__doc__)
        sys.exit()

    subject, wmseg = argv[:2]
    cortex = argv[2] if len(argv) > 2 else None
    
    # define FreeSurfer path
    fsdir = opj(os.environ.get("SUBJECTS_DIR"), subject)
    if not os.path.exists(fsdir):
        raise ValueError(f"Could not find {subject} in SUBJECTS_DIR. Is it set correctly?")
    
    # find WM
    fswm = opj(fsdir, 'mri', 'wm.mgz')
    if not os.path.exist(fswm):
        raise FileNotFoundError(f"Could not find {fswm}-file. Did FreeSurfer run properly?")

    # define CRUISE file
    if cortex is None:
        cortex = utils.get_file_from_substring(
            "cruise_mask", 
            opj(
                os.environ.get("DIR_DATA_DERIV"),
                "manual_masks",
                subject,
                "ses-1"
            )
        )

    # Resample CAT12/nighres segmentations to match FreeSurfer's white matter image
    catwm = resample_and_convert_to_mgh(
        wmseg,
        fswm
    )

    cortex = resample_and_convert_to_mgh(
        cortex,
        fswm
    )

    # Create manual white matter mask within cortex
    manual_mask = image.math_img(
        '(a * b) > 0',
        a=catwm,
        b=cortex
    )

    # Combine FreeSurfer and manual white matter masks
    fs_wm_combined = image.math_img(
        '(a + b) > 0',
        a=fswm,
        b=manual_mask
    )

    # Convert to binary mask with label 110
    fs_wm_labeled = image.math_img('a * 110', a=fs_wm_combined)

    # Keep only the largest connected component
    largest = image.largest_connected_component_img(fs_wm_labeled)
    largest = nb.MGHImage(
        largest.get_data(),
        fs_wm_labeled.affine,
        fs_wm_labeled.header
    )

    # Apply the largest component mask
    image.math_img(
        'a * b',
        a=fs_wm_labeled,
        b=largest
    ).to_filename(opj(fsdir, 'mri', 'wm.mgz'))

if __name__ == "__main__":

    # Defaults
    context = {
        "subject": None,
        "wmseg": None,
        "cortex": None
    }

    # Parse args
    argv = sys.argv[1:]
    if len(argv) < 2:
        print(main.__doc__)
        sys.exit()

    # Unpack mandatory arguments
    context["subject"] = argv[0]
    context["wmseg"]   = argv[1]

    # Optional 3rd arg
    if len(argv) > 2:
        context["cortex"] = argv[2]

    # Run main with unpacked context
    main(**context)
