#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fslapplytransforms

Wrapper for FSL FLIRT's linear transformation application via the \`-applyxfm\` option.

Usage:
  call_fslapplytransforms <ref> <moving> <output> <matrix> [--inverse] [extra FLIRT options]

Arguments:
  <ref>           Reference image (fixed)
  <moving>        Moving image to be transformed
  <output>        Output image filename
  <matrix>        Transformation matrix (.mat) in FLIRT format

Options:
  --inverse       Invert the transformation matrix before applying it
  Additional FLIRT arguments can be provided after required arguments.

Examples:
  call_fslapplytransforms ref.nii.gz mov.nii.gz out.nii.gz affine.mat
  call_fslapplytransforms ref.nii.gz mov.nii.gz out.nii.gz affine.mat --inverse -interp spline

Notes:
  - Matrix must be in FSL (.mat) format
  - For FreeSurfer .lta or ITK/HDF5 formats, convert before use
  - Inversion is handled with FLIRT's \`-applyxfm -init <mat> -inverse\` logic
  
---------------------------------------------------------------------------------------------------

USAGE

}

#-----------------------------------------------------------------------------
# read args
if [[ $# -lt 4 ]]; then
  Usage && exit 0
fi

ref="${1}"
moving="${2}"
output="${3}"
matrix="${4}"

#-----------------------------------------------------------------------------
# check inputs
if [[ ! -f "${ref}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find REF image \"${BOLD_GREEN}${ref}${RESET}\""
  exit 1
else
  ref=$(readlink -f "${ref}")
fi

if [[ ! -f "${moving}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find MOVING image \"${BOLD_GREEN}${moving}${RESET}\""
  exit 1
else
  moving=$(readlink -f "${moving}")
fi

if [[ ! -f "${matrix}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Could not find MATRIX file \"${BOLD_GREEN}${matrix}${RESET}\""
  exit 1
else
  matrix=$(readlink -f "${matrix}")
fi

if [[ -z "${output}" ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" input "Please specify output file"
  exit 1
fi

#-----------------------------------------------------------------------------
# extra args
shift 4

invert_flag=0
extra_args=()

# Parse remaining args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --inverse)
      invert_flag=1
      ;;
    *)
      extra_args+=("$1")
      ;;
  esac
  shift
done

#-----------------------------------------------------------------------------
# Build command
cmd=(
  flirt 
  -in "${moving}" \
  -ref "${ref}" \
  -out "${output}" \
  -init "${matrix}" \
  -applyxfm
)

if [[ $invert_flag -eq 1 ]]; then
  cmd+=("-inverse")
fi

cmd+=("${extra_args[@]}")

#-----------------------------------------------------------------------------
# Execute
print_cmd "${cmd[@]}" && eval "${cmd[@]}"

if [[ $? -ne 0 ]]; then
  echo
  print_line -
  print_error_msg "$(basename "$0")" "flirt"
  exit 1
fi

echo -e "Transform applied: ${BOLD_GREEN}${output}${RESET}"
