#!/usr/bin/env python

try:
    from nighres.surface import probability_to_levelset
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import os
import sys
import getopt
from lazyfmri import utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utilst utilsrt utils
opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

@utils.validate_cli_inputs(required_keys=["probability"])
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_nighresproblevel

Creates a levelset surface representations from a probabilistic map or a mask. The levelset 
indicates each voxel's distance to the closest boundary. It takes negative values inside and 
positive values outside of the object.

Mandatory (required input):
  -p|--probability    File representing the probability image

Optional (flags with defaults):
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'region'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")

Options (extra):
  -h|--help       print this help text

Outputs:
  result (niimg): Levelset representation of surface (-p2l_surf)

Example:
  call_nighresproblevel \
    -p sub-001_ses-1_acq-MP2RAGE_desc-l2p_proba.nii.gz \
    -o $PWD \
    -n sub-001_desc

---------------------------------------------------------------------------------------------------
    """

    probability = context.get("probability")
    output_dir = context.get("output_dir", opj(os.getcwd(), 'region'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")

    #-----------------------------------------------------------------------------
    # Run function
    probability_to_levelset(
        probability,
        save_data=True,
        output_dir=output_dir,
        file_name=output_base
    )

    #-----------------------------------------------------------------------------
    # Rename to BIDS-friendly filename
    fn_old = opj(output_dir, output_base + "_p2l-surf.nii.gz")
    fn_new = opj(output_dir, output_base + "-p2l_surf.nii.gz")

    if os.path.exists(fn_old):
        print(f"Renaming: {os.path.basename(fn_old)} â†’ {gb}{os.path.basename(fn_new)}{end}")
        os.rename(fn_old, fn_new)

    print("Done")

if __name__ == "__main__":

    probability = None
    output_dir = opj(os.getcwd(), 'region')
    output_base = "subject_acq-MP2RAGE_desc"

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hp:o:n:",
            ["help", "probability=", "outputdir=", "name="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__, flush=True)
        print("ERROR while handling arguments.. Did you specify an 'illegal' argument..?", flush=True)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-p", "--probability"):
            probability = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg

    main(context={
        "probability": probability,
        "output_dir": output_dir,
        "output_base": output_base
    })
