#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_spmmask

Creates an initial brain mask based on the second inversion magnitude image. This can guide the re-
moval of noise using call_rmbackground, which enhances the result from CAT12. Uses spmBrainMask and 
myGRE_BrainMask, which should be located in the data-folder.

Args:
 -s <SPM_PATH>  path to SPM; should contain CAT12 in toolbox directory
 -l <LOG_PATH>	path to working directory, defaults to DIR_LOGS
 --clean        remove intermediate files
 <input image>  input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                not like *.nii.gz files.
 <output image>	name of output image, including directory

Usage:
  call_spmmask inv2.nii.gz mask_inv2.nii.gz
  call_spmmask --clean inv2.nii.gz mask_inv2.nii.gz
  
---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
CLEAN_UP=0
while getopts :-:l:s: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        clean)
          CLEAN_UP=1
          ;;        
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    l)  LOG=${OPTARG}
            ;;
    s)  SPM=${OPTARG}
            ;;
  esac
done

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Define default LOG-path
if [[ -z ${LOG} ]]; then
  if [[ -z ${DIR_LOGS} ]]; then
    LOG_DIR=${PWD}
  else
    LOG_DIR=${DIR_LOGS}
  fi
else
  LOG_DIR=${LOG}
fi

if [[ ! -d ${LOG_DIR} ]]; then
  mkdir -p ${LOG_DIR}
fi

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z ${SPM} ]]; then
  if [[ -z ${SPM_PATH} ]]; then
    echo "ERROR: SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
    exit 1
  else
    SPM_PATH=${SPM_PATH}
  fi
else
  SPM_PATH=${SPM}
fi

#-----------------------------------------------------------------------------
# Get extension from input file
ext=$(fetch_extension ${INPUT})
if [[ ${ext} == "gz" ]]; then
  in_file=$(dirname ${INPUT})/$(basename ${INPUT} .gz)
  gunzip -c ${INPUT} > ${in_file}
else
  in_file=${INPUT}
fi

# if file specified is in current directory, add entire path
in_file=$(fetch_filepath ${in_file})
out_file=${OUTPUT}

out_ext=$(fetch_extension ${out_file})
if [[ ${out_ext} == "gz" ]]; then
  is_niigz=1
  tmp_out=$(dirname ${out_file})/$(basename ${out_file} .gz)
else
  is_niigz=0
  tmp_out=${out_file}
fi

#-----------------------------------------------------------------------------
# Create new script
new_script=$(dirname ${in_file})/spm_mask.m
if [[ -f ${new_script} ]]; then
  rm -r ${new_script}
fi

if [[ ! -d $(dirname ${out_file}) ]]; then
  mkdir -p $(dirname ${out_file})
fi

# generate the m-script
make_mask_script ${SPM_PATH} ${in_file} ${tmp_out} ${new_script}
  
# call_matlab = in call_bashhelper
call_matlab ${new_script}

# check if output exists
if [[ ! -f ${tmp_out} ]]; then
  echo "ERROR: mask was not created; guessing matlab exited with non-zero status"
  exit 1
fi

# Convert SPM's .nii-files to .nii.gz if the input file was nii.gz
if [[ ${is_niigz} -eq 1 ]]; then
  gzip -f ${tmp_out} 2>/dev/null
  rm ${in_file} 2>/dev/null
fi

# cp geom
if [[ -f ${out_file} ]]; then
  call_copyheader ${INPUT} ${out_file}
else
  echo "ERROR: gzip did not create \"${out_file}\""
  exit 1
fi

# clean up files
if [[ ${CLEAN_UP} -eq 1 ]]; then
  rm -r $(dirname ${in_file})/c*$(basename ${in_file}) 2>/dev/null
  rm -r $(dirname ${in_file})/*seg8* 2>/dev/null
fi
