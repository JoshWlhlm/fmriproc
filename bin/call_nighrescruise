#!/usr/bin/env python

try:
    from nighres.cortex import cruise_cortex_extraction
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import sys, getopt
import os
from lazyfmri import utils
rb = utils.color.RED+utils.color.BOLD
gb = utils.color.GREEN+utils.color.BOLD
end = rb = utils.color.END

suff = {
    'cerebrum':'cr',
    'left_cerebrum':'lcr',
    'right_cerebrum':'rcr',
    'cerebellum':'cb',
    'cerebellum_brainstem':'cbs',
    'subcortex':'sub',
    'tissues(anat)':'an',
    'tissues(func)':'fn'
}

def main(argv):

    r"""
---------------------------------------------------------------------------------------------------
call_nighrescruise

Segments the cortex from a whole brain segmented data set with the CRUISE method (includes customized
partial voluming corrections and the Anatomically-Consistent Enhancement (ACE) of sulcal fundi).
Note that the main input images are generated by the nighres module

Args:
    -m|--mask       white matter mask from "extract regions"
    -w|--wm         white matter probabilities from "extract regions"
    -g|--gm         gray matter probabilities from "extract regions"
    -c|--csf        csf probabilities from "extract regions"
    -o|--outputdir  output directory (default is opj(os.getcwd(), 'cruise'))
    -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
    -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                    put generated by 'call_nighresextractregions', and should have the following
                    suffixes:

                    ```
                    pattern_map = {
                        "init_image": f"xmask_{lbl}-wm",
                        "wm_image": f"xproba_{lbl}-wm",
                        "gm_image": f"xproba_{lbl}-gm",
                        "csf_image": f"xproba_{lbl}-csf"
                    }
                    ```

                    where 'lbl' is a value accessed with '-r|--roi <value>' (default = 'cerebrum') in:

                    ```
                    suff = {
                        'cerebrum':'cr',
                        'left_cerebrum':'lcr',
                        'right_cerebrum':'rcr',
                        'cerebellum':'cb',
                        'cerebellum_brainstem':'cbs',
                        'subcortex':'sub',
                        'tissues(anat)':'an',
                        'tissues(func)':'fn'
                    }
                    ```

                    For instance, the output of 'call_nighresextractregions' with 'cerebrum' will
                    have the 'cr-' label:

                    ```
                    project_path/derivatives/nighres/sub-01/ses-1/region
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xlvl_cr-csf.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xlvl_cr-gm.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xlvl_cr-wm.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xmask_cr-csf.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xmask_cr-gm.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xmask_cr-wm.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xproba_cr-csf.nii.gz
                    ├── sub-01_ses-1_acq-MP2RAGE_desc-xproba_cr-gm.nii.gz
                    └── sub-01_ses-1_acq-MP2RAGE_desc-xproba_cr-wm.nii.gz
                    ```

    -x|--kwargs     Extra arguments that will be directly passed to 'cruise_cortex_extraction' (see
                    docs-link below for details). The format should be as follows: different para-
                    meters comma-separated, and parameter-value pair separated by '='):
                    
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                    E.g.,:
                    "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                    This input will be parsed to a dictionary via 'lazyfmri.utils.parse_kwargs_to_dict()'
                    The kwargs specified in this flag take precedent over the default kwargs:

                    ```
                    defaults = {
                        "data_weight": 0.9,
                        "save_data": True,
                        "normalize_probabilities": False,
                        "output_dir": "directory specified with -o|--outputdir",
                        "file_name": "basename specified with -n|--name"
                    }
                    ```
Outputs:
    (taken from https://nighres.readthedocs.io/en/latest/cortex/cruise_cortex_extraction.html)
    Dictionary collecting outputs under the following keys (suffix of output files in brackets)

    cortex (niimg):     Hard segmentation of the cortex with labels background=0, gm=1, and wm=2 
                        (_cruise_cortex)
    gwb (niimg):        Gray-White matter Boundary (GWB) level set function (_cruise_gwb)
    cgb (niimg):        CSF-Gray matter Boundary (CGB) level set function (_cruise_cgb)
    avg (niimg):        Central level set function, obtained as geometric average of GWB and CGB 
                        (not the middle depth of the cortex, use volumetric_layering if you want
                        accurate depth measures) (_cruise-avg)
    thickness (niimg):  Simple cortical thickness estimate: distance to the GWB and CGB surfaces,
                        in mm (_cruise-thick)
    pwm (niimg):        Optimized WM probability, including partial volume and distant values cor-
                        rection (_cruise-pwm)
    pgm (niimg):        Optimized GM probability, including CSF sulcal ridges correction (_cruise_pgm)
    pcsf (niimg):       Optimized CSF probability, including sulcal ridges and vessel/dura correction
                        (_cruise-pwm)

Example:
    call_nighrescruise \
        -m sub-001_ses-1_acq-MP2RAGE_desc-mask_cr-wm.nii.gz \
        -w sub-001_ses-1_acq-MP2RAGE_desc-proba_cr-wm.nii.gz \
        -g sub-001_ses-1_acq-MP2RAGE_desc-proba_cr-gm.nii.gz \
        -c sub-001_ses-1_acq-MP2RAGE_desc-proba_cr-csf.nii.gz \
        -o /path/to/subject/cruise/sub-001/ses-1/cruise \
        -n sub-001_acq-MP2RAGE_desc

    call_nighrescruise \
        -i /path/to/skullstripped/sub-01/ses-1
        -o /path/to/subject/cruise/sub-01/ses-1/cruise \
        -n sub-01_acq-MP2RAGE_desc

    # specify outputs through kwargs; passed directly to cruise_cortex_extraction
    call_nighrescruise \
        -i /path/to/skullstripped/sub-01/ses-1
        -x output_base="sub-01_desc",output_dir="/some/other/directory",max_iterations=250

---------------------------------------------------------------------------------------------------
    """

    wm_mask = None
    wm = None
    gm = None
    csf = None
    roi = "cerebrum"
    output_dir = opj(os.getcwd(), 'cruise')
    output_base = "subject_acq-MP2RAGE_desc"
    kwargs = {}

    try:
        opts = getopt.getopt(argv,"hm:w:g:c:o:n:i:r:x:",["help", "mask=", "wm=", "gm=", "csf=", "outputdir=", "name=", "inputdir=", "roi=", "kwargs="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-m", "--mask"):
            wm_mask = arg
        elif opt in ("-w", "--wm"):
            wm = arg
        elif opt in ("-g", "--gm"):
            gm = arg
        elif opt in ("-c", "--csf"):
            csf = arg
        elif opt in ("-r", "--roi"):
            roi = arg            
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-x", "--kwargs"):
            kwargs = utils.parse_kwargs_to_dict(arg)

    # Either they must give >= required_args, or a valid input_dir must be provided
    required_args = 4
    if (
        len(argv) < required_args and
        (not isinstance(input_dir, str) or not os.path.isdir(input_dir))
    ):
        print("\nERROR: Missing or invalid arguments.")
        
        if len(argv) < required_args:
            print(" - Not enough command-line arguments specified.")
        if not isinstance(input_dir, str):
            print(" - Input directory was not provided or is not a string.")
        elif not os.path.isdir(input_dir):
            print(f" - Input directory '{input_dir}' does not exist.")
        
        print(main.__doc__)
        sys.exit(1)

    #---------------------------------------------------------------------------------------------------
    # Collect files depending on whether we got an input directory or not
    print("Loading files..")
    input_kws = {}
    if input_dir is not None:
        # we got passed an input_dir, fetch files from directory
        print(f"Loading files from {gb}{input_dir}{end}..")
        
        if isinstance(roi, str):
            if roi not in list(suff.keys()):
                raise ValueError(f"Specified roi must exist in {list(suff.keys)}, not '{roi}'")
            
        lbl = suff[roi]
        pattern_map = {
            "init_image": f"xmask_{lbl}-wm",
            "wm_image": f"xproba_{lbl}-wm",
            "gm_image": f"xproba_{lbl}-gm",
            "csf_image": f"xproba_{lbl}-csf"
        }

        for key, pattern in pattern_map.items():
            in_file = utils.get_file_from_substring(pattern, input_dir)
            if isinstance(in_file, str):
                input_kws[key] = in_file
            elif isinstance(in_file, list):
                raise ValueError(f"Found multiple instances of '{val}' for '{key}'-image: {in_file}")
            else:
                raise FileNotFoundError(f"Could not find '{key}'-file with '{val}'  in '{input_dir}'")

            input_kws[key] = val
    else:
        print("Loading manually specified files..")
        for key, val in zip(
            ["init_image", "wm_image", "gm_image", "csf_image"],
            [wm_mask, wm, gm, csf]
        ):
            input_kws[key] = val

    #---------------------------------------------------------------------------------------------------
    # Check that input files exist
    missing_files = [desc for desc, path in input_kws.items() if not path or not os.path.isfile(path)]
    if missing_files:
        print("ERROR: The following required input files are missing or invalid:")
        for f in missing_files:
            print(f"  - {rb}{f}{end}")
        sys.exit(1)

    [print(f" {key}: {gb}{val}{end}") for key, val in input_kws.items()]
    
    #---------------------------------------------------------------------------------------------------
    # update kwargs with defaults
    defaults = {
        "data_weight": 0.9,
        "save_data": True,
        "normalize_probabilities": False,
        "file_name": output_base,
        "output_dir": output_dir
    }

    for key, val in defaults.items():
        kwargs = utils.update_kwargs(
            kwargs,
            key,
            val
        )

    # combine input & kwargs
    combined_kwargs = {**input_kws, **kwargs}

    #---------------------------------------------------------------------------------------------------
    # run CRUISE
    cruise_cortex_extraction(**combined_kwargs)

if __name__ == "__main__":
    main(sys.argv[1:])
