#!/usr/bin/env python

try:
    from nighres.cortex import cruise_cortex_extraction
except Exception:
    raise ImportError(f"Could not import 'nighres'.. Please install")

import os
import sys
import getopt
from lazyfmri import utils
opj = os.path.join
gb = f"{utils.color.GREEN}{utils.color.BOLD}"
end = utils.color.END

suff = {
    'cerebrum':'cr',
    'left_cerebrum':'lcr',
    'right_cerebrum':'rcr',
    'cerebellum':'cb',
    'cerebellum_brainstem':'cbs',
    'subcortex':'sub',
    'tissues(anat)':'an',
    'tissues(func)':'fn'
}

@utils.validate_cli_inputs(required_keys=["wm", "gm", "csf", "mask"], allow_input_dir=True)
def main(context):

    r"""
---------------------------------------------------------------------------------------------------
call_nighrescruise

Segments the cortex from a whole brain segmented data set with the CRUISE method (includes 
customized partial voluming corrections and the Anatomically-Consistent Enhancement (ACE) of 
sulcal fundi). Note that the main input images are generated by the nighres module.

Usage:
  call_nighrescruise [mandatory] [optional]

Mandatory (required input):
  -m|--mask       white matter mask from "extract regions"
  -w|--wm         white matter probabilities from "extract regions"
  -g|--gm         gray matter probabilities from "extract regions"
  -c|--csf        csf probabilities from "extract regions"

  OR:
  -i|--inputdir   automatically search for files in the 'region'-directory. This would be the out-
                  put generated by 'call_nighresextractregions', and should have the following
                  suffixes:

                  pattern_map = {
                    "init_image": f"xmask_{lbl}-wm",
                    "wm_image": f"xproba_{lbl}-wm",
                    "gm_image": f"xproba_{lbl}-gm",
                    "csf_image": f"xproba_{lbl}-csf"
                  }

                  where 'lbl' is a value accessed with '-r|--roi <value>' (default = 'cerebrum')

Optional (flags with defaults):
  -r|--roi        region to extract (default is "cerebrum")
  -o|--outputdir  output directory (default is opj(os.getcwd(), 'cruise'))
  -n|--name       basename for output (default is "subject_acq-MP2RAGE_desc")
  -x|--kwargs     Extra arguments that will be directly passed to 'mgdm_segmentation' (see
                  docs-link below for details). The format should be as follows: different para-
                  meters comma-separated, and parameter-value pair separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                    "-x regularization_weight=0.05,max_iterations=1000,normalize_probabilities=True"

                  This input will be parsed to a dictionary via 'lazyfmri.utils.parse_kwargs_to_dict()'
                  The kwargs specified in this flag take precedent over the default kwargs:
                  
                  defaults = {
                    "data_weight": 0.9,
                    "save_data": True,
                    "normalize_probabilities": False,
                    "output_dir":  "directory specified with -o|--outputdir",
                    "file_name": "basename specified with -n|--name"
                  }

Options (extra):
  -h|--help       print this help text

Outputs:
  Files with keys (suffixes shown):
  - cortex (-cruise_cortex), gwb (-cruise_gwb), cgb (-cruise_cgb), avg (-cruise_avg) [these
    will be the inputs for call_nighreslayering]
  - thickness (-cruise_thick), pwm (-cruise_pwm), pgm (-cruise_pgm), pcsf (-cruise_pcsf)

Example:
  call_nighrescruise \
    -i /path/to/input \
    -o /path/to/output \
    -n sub-01_acq-MP2RAGE_desc \
    -r cerebrum

Notes:
  docs: https://nighres.readthedocs.io/en/latest/cortex/cruise_cortex_extraction.html

---------------------------------------------------------------------------------------------------
    """

    wm_mask = context["mask"]
    wm = context["wm"]
    gm = context["gm"]
    csf = context["csf"]
    roi = context.get("roi", "cerebrum")
    input_dir = context.get("input_dir")
    output_dir = context.get("output_dir", opj(os.getcwd(), 'cruise'))
    output_base = context.get("output_base", "subject_acq-MP2RAGE_desc")
    kwargs = context.get("kwargs", {})

    #---------------------------------------------------------------------------------------------------
    # Read inputs to dictionary
    input_kws = {}
    if input_dir is not None:
        print(f"Loading files from {gb}{input_dir}{end}..")

        if roi not in suff:
            raise ValueError(f"Specified roi must exist in {list(suff.keys())}, not '{roi}'")

        lbl = suff[roi]
        pattern_map = {
            "init_image": f"xmask_{lbl}-wm",
            "wm_image": f"xproba_{lbl}-wm",
            "gm_image": f"xproba_{lbl}-gm",
            "csf_image": f"xproba_{lbl}-csf"
        }

        for key, pattern in pattern_map.items():
            in_file = utils.get_file_from_substring(pattern, input_dir)
            if isinstance(in_file, str):
                input_kws[key] = in_file
            elif isinstance(in_file, list):
                raise ValueError(f"Found multiple instances of '{pattern}' for '{key}'-image: {in_file}")
            else:
                raise FileNotFoundError(f"Could not find '{key}'-file with pattern '{pattern}' in '{input_dir}'")

    else:
        print("Loading manually specified files..")
        for key, val in zip(
            ["init_image", "wm_image", "gm_image", "csf_image"],
            [wm_mask, wm, gm, csf]
        ):
            input_kws[key] = val

    [print(f" {key}: {gb}{val}{end}") for key, val in input_kws.items()]

    #---------------------------------------------------------------------------------------------------
    # update kwargs with defaults
    defaults = {
        "data_weight": 0.9,
        "save_data": True,
        "normalize_probabilities": False,
        "file_name": output_base,
        "output_dir": output_dir
    }

    for key, val in defaults.items():
        kwargs = utils.update_kwargs(kwargs, key, val)

    # combine input & kwargs
    combined_kwargs = {**input_kws, **kwargs}

    #---------------------------------------------------------------------------------------------------
    # run CRUISE
    cruise_cortex_extraction(**combined_kwargs)

    utils.run_shell_wrapper('bash -c "source call_bashhelper && print_line -"')
    print()

    #---------------------------------------------------------------------------------------------------
    # Renaming output files to match BIDS-like style
    print("Rename to more BIDS'ey style")
    suffix_map = {
        "cortex": "cruise_cortex",
        "gwb": "cruise_gwb",
        "cgb": "cruise_cgb",
        "avg": "cruise_avg",
        "thickness": "cruise_thick",
        "pwm": "cruise_pwm",
        "pgm": "cruise_pgm",
        "pcsf": "cruise_pcsf"
    }

    for suffix in suffix_map.values():
        fn_old = os.path.join(output_dir, f"{output_base}_{suffix}.nii.gz")
        fn_new = os.path.join(output_dir, f"{output_base}-{suffix}.nii.gz")
        if os.path.exists(fn_old):
            print(f" {os.path.basename(fn_old)} â†’ {gb}{os.path.basename(fn_new)}{end}")
            os.rename(fn_old, fn_new)

    print("Done")

if __name__ == "__main__":
    wm_mask = None
    wm = None
    gm = None
    csf = None
    roi = "cerebrum"
    output_dir = opj(os.getcwd(), 'cruise')
    output_base = "subject_acq-MP2RAGE_desc"
    input_dir = None
    kwargs = {}

    try:
        opts = getopt.getopt(
            sys.argv[1:],
            "hm:w:g:c:o:n:i:r:x:",
            ["help", "mask=", "wm=", "gm=", "csf=", "outputdir=", "name=", "inputdir=", "roi=", "kwargs="]
        )[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-m", "--mask"):
            wm_mask = arg
        elif opt in ("-w", "--wm"):
            wm = arg
        elif opt in ("-g", "--gm"):
            gm = arg
        elif opt in ("-c", "--csf"):
            csf = arg
        elif opt in ("-r", "--roi"):
            roi = arg
        elif opt in ("-o", "--outputdir"):
            output_dir = arg
        elif opt in ("-n", "--name"):
            output_base = arg
        elif opt in ("-i", "--inputdir"):
            input_dir = arg
        elif opt in ("-x", "--kwargs"):
            kwargs = utils.parse_kwargs_to_dict(arg)

    main(context={
        "mask": wm_mask,
        "wm": wm,
        "gm": gm,
        "csf": csf,
        "roi": roi,
        "input_dir": input_dir,
        "output_dir": output_dir,
        "output_base": output_base,
        "kwargs": kwargs
    })
