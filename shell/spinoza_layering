#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_layering

Equivolumetric layering with either nighres or Wagstyl's surface_tools, as specified by the third
argument. Surface_tools is based on FreeSurfer, so make sure that has run before it. This script is
by default in overwrite mode, meaning that the files created earlier will be overwritten when re-ran.
This doesn't take too long, so it doesn't really matter and prevents the need for an overwrite switch.
To disable, you can specify a condition before running this particular script.

Usage:
  spinoza_layering [arguments] [options] <input dir> <software>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -l <nr_layers>  number of layers to estimate (defaults: nighres=10; FreeSurfer=5)
  -x <kwargs>     Additional commands to be passed to 'volumetric_layering'. Format should
                  be comma-separated flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  This allows bash commands to be translated to python commands

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional:
  <input folder>  if software == 'nighres', then we need the nighres output folder (generally 
                  DIR_DATA_DERIV/nighres). If software == 'freesurfer', then we need the \$SUB-
                  JECTS_DIR
  <software>      Possible inputs for software are:
                    - 'nighres': voxel-based layering
                    - 'surface': surface-based layering with Wagstyl's method

Example:
  spinoza_layering SUBJECTS_DIR surface
  spinoza_layering DIR_DATA_DERIV/nighres nighres

Notes:
  - The script will recognize any of the software inputs specified above, with these variations in
    capitalization.
  - The script will look for a surface_tools installation on the PATH and if it can't find it 
    there, it will look for the first match in the HOME directory. To be sure, place the script 
    either in the home directory or place it on the PATH.
  - If the script doesn't give an error before printing the starting time, it means it found the
    script.

---------------------------------------------------------------------------------------------------

USAGE
    exit 1

}

#-----------------------------------------------------------------------------
# Define possible inputs
function Options {
    cat <<EOF
Nighres: "nighres", "Nighres", "nigh", "NIGHRES" for nighres or"
Suface tools:"surface", "surface_tools", "SURFACE", "SURFACE_TOOLS", or "ST" for Wagstyl's surface tools"

EOF
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
OW=0
kwargs_flag=""
while getopts :-:hos:n:l:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        ow)
          OW=1
          ;;            
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;         
    l)  nr_layers=${OPTARG}
          ;; 
    x)  kwargs_flag="--kwargs ${OPTARG}"
          ;;          
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
SOFTWARE=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

# Normalize input (lowercase)
software_input="${SOFTWARE,,}"

#-----------------------------------------------------------------------------
# settings based on software
software=""
default_layers=""

case "${software_input}" in
  nighres | nigh)
    software="NIGHRES"
    default_layers=10
    ;;
  surface | surface_tools | st)
    software="SURFACE"
    default_layers=5
    ;;
  *)
    if [[ -n "${SOFTWARE}" ]]; then
      echo "You specified \"${SOFTWARE}\". Accepted values are:" >&2
    else
      echo "Please specify a software option." >&2
    fi
    Options >&2
    exit 1
    ;;
esac

# Set nr_layers if not already defined
if [[ -z ${nr_layers} ]]; then
  nr_layers=${default_layers}
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Equivolumetric layering using ${software^^}"

# nighres required this module
check_python_package "nighres"

if [[ ! -d ${INPUT} ]]; then
  print_directory_not_exist "WARNING" "${INPUT}" "No nighres-steps have been run yet.."
  exit 1
fi

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")

  # derive base
  if [[ -z ${ses} ]]; then
    input_dir=${INPUT}/${sub_name}
    base="${sub_name}"
  else
    nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')

    # remove this statement if you have multiple freesurfer sessions
    if [[ $(basename ${INPUT}) == *"freesurfer"* ]]; then
      input_dir=${INPUT}/${sub_name}
    else
      input_dir=${INPUT}/${sub_name}/ses-${nr}
    fi

    base="${sub_name}_ses-${nr}"
  fi

  #-----------------------------------------------------------------------------
  # Running equivolumetric layering with nighres
  if [[ ${software,,} == "nighres" ]]; then

    if [[ ! -d "${input_dir}/cruise" ]]; then
      print_directory_not_exist "${sub_name}" "${input_dir}/cruise"
      continue
    fi

    declare -a LAYER=(gwb cgb)
    declare -a INPUTS=()
    for r in ${LAYER[@]}; do
      file=$(
        find "${input_dir}/cruise" \
        -type f \
        -name "*acq-${DATA^^}*" \
        -and -name "*${r}*" \
        -and -name "*.nii.gz" \
        2>/dev/null
      )
    
      if [[ -f "${file}" ]]; then
        INPUTS+=("${file}")
      else
        print_file_not_in_dir "${sub_name}" "*${r}*" "${input_dir}/cruise"
        continue
      fi
    done

    if [[ -z "${INPUTS}" ]]; then
      echo "Did not find required inputs"
      continue
    fi

    output_root=${input_dir}/layering/${base}_acq-${DATA^^}_desc
    output=${output_root}-layering_depth.nii.gz

    if [[ ! -d $(dirname ${output_root}) ]]; then
      mkdir -p $(dirname ${output_root})
    fi

    if [[ ${OW} -eq 1 ]]; then
      rm ${output}
    fi

    if [[ ! -f ${output} ]]; then
      
      # print header
      print_subject_header ${sub_name}
      print_create_img "${output}" "N_layers=${nr_layers} (unless specified otherwise in kwargs)"

      # define cmd
      cmd=(
        call_nighreslayering
        --inner "${INPUTS[0]}"
        --outer "${INPUTS[1]}"
        --layers "${nr_layers}"
        --outputdir "$(dirname ${output_root})"
        --name "$(basename ${output_root})"
        "${kwargs_flag}"
      )

      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "call_nighreslayering"
        exit 1
      fi
    else
      print_output_exists "${sub_name}" "${output}"
    fi

  elif [[ ${software,,} == "surface" ]]; then

    print_subject_header ${sub_name}  

    #-----------------------------------------------------------------------------------------
    # Running equivolumetric layering with surface tools

    if [[ ! -d ${input_dir} ]]; then
      print_directory_not_exist "${sub_name}" "${input_dir}" "Run FreeSurfer first.."
      continue
    fi

    export SUBJECTS_DIR=${INPUT}

    # check if generate_equivolumetric_surfaces.py is on the PATH
    CMD="generate_equivolumetric_surfaces"

    # loop through hemis
    for i in "lh" "rh"; do

      # overwrite
      rm ${input_dir}/surf/${i}.equi* 2>/dev/null

      # run cmd
      echo -e "Running ${BOLD_BLUE}generate_equivolumetric_surfaces${RESET} on ${i} with ${nr_layers} layers"
      run_cmd=(
        "${CMD}"
        --smoothing  0
        ${input_dir}/surf/${i}.pial
        ${input_dir}/surf/${i}.white
        ${nr_layers}
        ${i}.equi
        --software freesurfer
        --subject_id ${sub_name}
      )
      
      # store command
      out_f=${input_dir}/scripts/${i}.equi.txt
      if [[ -f ${out_f} ]]; then  
        rm -r ${out_f}
      fi
      
      # run command
      echo ${run_cmd} >> ${input_dir}/scripts/${i}.equi.txt
      print_cmd "${run_cmd[@]}" && eval "${run_cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${CMD}"
        exit 1
      fi
    done

    echo "Stored outputs in ${SUBJECTS_DIR}/${sub_name}/surf/?h.equi*"
    echo "Warp your surface to each individual layers using:"
    echo "for hemi in \"lh\" \"rh\"; do mri_vol2surf --src func.nii.gz --out ${hemi}.equi_intensity_??.gii --hemi lh --surf <subj>/surf/lh.equi??.pial --out_type gii; done #(where ?? is the equidistance, e.g., 0.5)"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
