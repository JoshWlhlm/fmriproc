#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source "${SETUP_FILE}"
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_biassanlm

Sometimes CAT12 can be a bit of an overkill with smoothing and bias corrections. This script should
be run prior to "spinoza_brainextraction", and runs a SANLM-filter over the image as well as an bias
field correction with SPM. The subsequent "spinoza_brainextraction" should be run with the "-m brain"
flag as to turn off bias correction and denoising with CAT12. The input image is expected to reside 
in the input directory and to contain "acq-${DATA}" and end with *T1w.nii.gz. By default, the pre-
viously created mask with SPM is used to boost performance on ANTs functions (e.g., SANLM/Bias cor-
rection).

Usage:
  spinoza_biassanlm [options] <anat folder> <output folder>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -j <cpus>           number of cores to use (default is 1)
  -l <lower>          lower percentile (default = 0.01) for call_winsorize
  -u <upper>          upper percentile (default = 0.99) for call_winsorize  
  -o                  overwrite existing files
  --spm               run bias correction with SPM (default = False)
  --no_sanlm          do not run SANLM denoising (in case you don't have CAT12..)
  --no_mask           do not use SPM mask for SANLM/Bias correction with ANTs
  --n4                run bias correction with N4BiasCorrection (ANTs)
  --denoise           use SANLM algorithm implemented in ANTs (DenoiseImage), rather than
                      CAT12.
  -x <kwargs>         Additional commands to be passed to 'call_antsbias'. Format should
                      be colon-separated flags as follows: 
                        - if you specify a flag and values | <flag>=<value>
                        - if you specify a flag only | <flag>

                      combine as:
                      "-x <flag1>=<value>:<flag2>:<flag3>:<flag4>=<value>"

                      e.g.,
                      "-x -t=[0.25,0.005,250];-x=some_mask.nii.gz"

  <anat dir>          parent directory containing the sub-xxx folders for anatomies. Can be e.g., 
                      DIR_DATA_HOME or DIR_DATA_HOME/derivatives/pymp2rage
  <output>            Output directory for the denoised images (something like DIR_DATA_DERIV/denoised)

Example:
  spinoza_biassanlm DIR_DATA_DERIV/pymp2rage DIR_DATA_DERIV/denoised
  spinoza_biassanlm -s 001 -n 1 DIR_DATA_HOME DIR_DATA_DERIV/denoised
  spinoza_biassanlm -s 001 -n 1 -b DIR_DATA_HOME DIR_DATA_DERIV/denoised

  # run SANLM and Bias correction with ANTs
  spinoza_biassanlm -s 001 -n 1 -b DIR_DATA_HOME DIR_DATA_DERIV/denoised --n4 --denoise

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# Check for subject flag
OW=0
RUN_BIASCORR=0
RUN_WITH_ANTS=0
SANLM_WITH_ANTS=0
RUN_SANLM=1
n_cpu=1
use_mask=1
lower=0.01
upper=0.99
while getopts :-:bos:n:x:j:u:l: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        spm)
          RUN_BIASCORR=1
          RUN_WITH_ANTS=0
          ;;          
        no_sanlm)
          RUN_SANLM=0
          ;;         
        denoise)
          SANLM_WITH_ANTS=1
          ;;                             
        n4)
          RUN_BIASCORR=1
          RUN_WITH_ANTS=1
          ;;      
        no_mask)
          use_mask=0
          ;;                                                  
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;       
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;
    x)  kwargs=${OPTARG}
          ;;
    j)  n_cpu=${OPTARG}
          ;;
    l)  lower=${OPTARG}
          ;;
    u)  upper=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------
start_timer "Bias field correction and sanlm-filtering"

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  if [[ "${INPUT}" == "${DIR_DATA_HOME}" ]]; then
    INPUTDIR=${INPUT}/${base_path}/anat
  else
    INPUTDIR=${INPUT}/${base_path}
  fi

  if [[ ! -d ${INPUTDIR} ]]; then
    print_directory_not_exist "${INPUTDIR}"
    exit 1
  fi  

  # set outputdir to inputdir if outputdir not specified
  if [[ ! -z ${OUTPUT} ]]; then
    OUTPUTDIR=${OUTPUT}/${base_path}
  else
    OUTPUTDIR=${INPUTDIR}
  fi

  if [[ ! -d ${OUTPUTDIR} ]]; then
    mkdir -p ${OUTPUTDIR}
  fi

  spm_mask=`find "${INPUTDIR}" -type f \( -name "*acq-${DATA}*" -and -name "*spm_mask.nii.gz" \) 2>/dev/null`
  IFS=$'\n' spm_sorted=($(sort <<<"${spm_mask[*]}"))
  unset IFS 
  count=0; for ii in ${spm_sorted[@]}; do ((count++)); done
  if [[ ${count} -gt 1 ]]; then
    echo "Found more than 1 files with \"acq-${DATA}\", \"spm_mask\", and \".nii.gz\" (${count})"
    for ii in ${spm_sorted[@]}; do
      echo " ${ii}"
    done
    continue
  else
    cp ${spm_mask} ${OUTPUTDIR} 2>/dev/null
    
    if [[ ${use_mask} -eq 1 ]]; then
      # parse kwargs and append mask
      if [[ -z ${kwargs} ]]; then
        kwargs="-x=${spm_mask}"
      else
        # Check if an -x= argument contains a .nii (likely a mask)
        if ! echo "$kwargs" | grep -Eq '\-x=.*\.nii(\.gz)?'; then
          kwargs="${kwargs};-x=${spm_mask}"
        fi
      fi
    fi
  fi

  # parse into string
  if [[ ! -z ${kwargs} ]]; then
    kwargs=`echo ${kwargs} | tr ' =' ' ' | tr ':' ' '`
  fi

  input=`find "${INPUTDIR}" -maxdepth 1 -type f \( -name "*acq-${DATA}*" -and -name "*T1w.nii.gz" \) 2>/dev/null`
  if [[ ! -z ${input} ]]; then

    output=${OUTPUTDIR}/$(basename ${input})

    if [[ ${OW} -eq 1 ]]; then
      rm ${output} 2>/dev/null
    fi

    t1map=`find "${INPUTDIR}" -maxdepth 1 -type f \( -name "*acq-${DATA}*" -and -name "*T1map.nii.gz" \) 2>/dev/null`
    if [[ ! -z ${t1map} ]]; then
      # copy t1map to output for later reference
      cp ${t1map} $(dirname ${output})
    fi
    
    if [[ ! -f ${output} ]]; then

      # print header
      print_subject_header ${sub_name}
      
      if [[ ${RUN_SANLM} -eq 1 ]]; then

        output_from_sanlm=${OUTPUTDIR}/denoised.nii.gz
        if [[ ${SANLM_WITH_ANTS} -eq 1 ]]; then
          
          # set number of cores to use
          export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${n_cpu}
          echo "Running SANLM-filter with ANTs' DenoiseImage"
          sanlm_="call_antssanlm"
        else
          echo "Running SANLM-filter with CAT12"
          sanlm_="call_spmsanlm"
        fi
        
        # run
        ${sanlm_} ${input} ${output_from_sanlm} ${kwargs}

        if [[ ! -f ${output_from_sanlm} ]]; then
          echo "ERROR in $(basename ${0}): call_spmsanlm exited with non-zero status"
          exit 1
        fi

        input_for_bias=${output_from_sanlm}
      else
        echo "SANLM-filtering turned off"
        input_for_bias=${input}
      fi

      if [[ ${RUN_BIASCORR} -eq 1 ]]; then

        if [[ ${RUN_WITH_ANTS} -eq 0 ]]; then
          echo "Running bias field correction with SPM"
          call_spmbias ${input_for_bias} ${output}
        else
          # set number of cores to use
          export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${n_cpu}
          call_antsbias ${input_for_bias} ${output} ${kwargs}
        fi

        if [[ ! -f ${output} ]]; then
          echo "ERROR in $(basename ${0}): ${cmd} exited with non-zero status"
          exit 1
        fi

        if [[ ${RUN_SANLM} -eq 1 ]]; then
          rm -r ${output_from_sanlm} 2>/dev/null
        fi

      else
        mv ${output_from_sanlm} ${output}
      fi

      # truncate and 
      echo -e "Winsorizing image intensities with [${BOLD_RED}${lower}${RESET},${BOLD_RED}${upper}${RESET}] and 256 bins"
      cmd="call_winsorize -l ${lower} -u ${upper} ${output}"
      eval ${cmd}

      echo -e "Rescaling T1w to [${BOLD_RED}0${RESET},${BOLD_RED}4095${RESET}]"
      cmd="call_rescale ${output} 0 4095"
      eval ${cmd}

      # set dtype to uint16
      echo "Set dtype to UINT16"
      cmd="call_setdtype ${output}"

      echo "Done"

    else
      print_output_exists "${sub_name}" "${output}"
    fi

  else
    echo -e "${BOLD_CYAN}${sub_name}${RESET}: Did not find an input file"
    continue
  fi


done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
end_timer

# reset threads
export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
