#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_biassanlm

Sometimes CAT12 can be a bit of an overkill with smoothing and bias corrections. This script should
be run prior to "spinoza_brainextraction", and runs a SANLM-filter over the image as well as an bias
field correction with SPM. The subsequent "spinoza_brainextraction" should be run with the "-m brain"
flag as to turn off bias correction and denoising with CAT12. The input image is expected to reside 
in the input directory and to contain "acq-${DATA}" and end with *T1w.nii.gz.

Usage:
  spinoza_biassanlm [options] <anat folder> <output folder>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o|--ow             overwrite existing files
  --biascorr          run bias correction with SPM (default = False)
  --n4                 run bias correction with ANTs instead of SPM (in case SPM is unavailable)
  --dry-run            show actions without executing them (for debugging)

  <anat dir>          parent directory containing the sub-xxx folders for anatomies. Can be e.g., 
                      DIR_DATA_HOME or DIR_DATA_HOME/derivatives/pymp2rage
  <output>            Output directory for the denoised images (something like DIR_DATA_DERIV/denoised)

Example:
  spinoza_biassanlm DIR_DATA_DERIV/pymp2rage DIR_DATA_DERIV/denoised
  spinoza_biassanlm -s 001 -n 1 DIR_DATA_HOME DIR_DATA_DERIV/denoised
  spinoza_biassanlm -s 001 -n 1 --biascorr DIR_DATA_HOME DIR_DATA_DERIV/denoised

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

function error_exit {
    echo "ERROR: $1" >&2
    exit 1
}

function start_timer {
    echo
    echo "==================================================================================================="
    printf "Bias field correction and sanlm-filtering\n"
    printf "Started at $(date)\n"
    echo "==================================================================================================="
    start=$(date +%s)
}

function end_timer {
    echo
    echo "---------------------------------------------------------------------------------------------------"
    printf "Done at $(date)\n"
    end=$(date +%s)
    local duration=$((end - start))
    printf "Time spent: %02d:%02d:%02d\n" $((duration/3600)) $(((duration/60)%60)) $((duration%60))
    echo "---------------------------------------------------------------------------------------------------"
}

function run_or_echo {
    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] $*"
    else
        eval "$@"
    fi
}

# ---------------------------------------------------------------------------------------------------
# Argument parsing
# ---------------------------------------------------------------------------------------------------

OW=0
RUN_BIASCORR=0
SPM_BIAS=1
DRY_RUN=0
subjects=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -s) IFS=',' read -r -a subjects <<< "$2"; shift 2 ;;
        -n) session="$2"; shift 2 ;;
        -o|--ow) OW=1; shift ;;
        --biascorr) RUN_BIASCORR=1; shift ;;
        --n4) SPM_BIAS=0; shift ;;
        --dry-run) DRY_RUN=1; shift ;;
        -h|--help) Usage ;;
        --) shift; break ;;
        -*)
            echo "Unknown option: $1" >&2
            Usage
            ;;
        *)
            if [[ -z "$anat_dir" ]]; then
                anat_dir="$1"
            elif [[ -z "$output_dir" ]]; then
                output_dir="$1"
            else
                echo "Too many arguments!" >&2
                Usage
            fi
            shift
            ;;
    esac
done

[[ -z "$anat_dir" ]] && Usage
[[ -z "$output_dir" ]] && output_dir="$anat_dir"

# ---------------------------------------------------------------------------------------------------
# Setup subjects if not explicitly provided
# ---------------------------------------------------------------------------------------------------

if [[ ${#subjects[@]} -eq 0 ]]; then
    while IFS= read -r dir; do
        subjects+=("$(basename "$dir")")
    done < <(find "$anat_dir" -mindepth 1 -maxdepth 1 -type d)
fi

# ---------------------------------------------------------------------------------------------------
# Processing functions
# ---------------------------------------------------------------------------------------------------

function get_subj_ses_path {
    local sub=$1
    if [[ -n $session ]]; then
        echo "${anat_dir}/sub-${sub}/ses-${session}/anat"
    else
        echo "${anat_dir}/sub-${sub}/anat"
    fi
}

function process_subject {
    local sub=$1
    local inputdir
    inputdir=$(get_subj_ses_path "$sub")

    if [[ ! -d "$inputdir" ]]; then
        echo "Skipping sub-${sub}: $inputdir not found"
        return
    fi

    local output_subdir="${output_dir}/sub-${sub}"
    [[ -n $session ]] && output_subdir+="/ses-${session}"
    run_or_echo "mkdir -p '$output_subdir'"

    local input
    input=$(find "$inputdir" -name "*acq-${DATA}*T1w.nii.gz" -print -quit)
    if [[ -z "$input" ]]; then
        echo "Skipping sub-${sub}: no T1w file found"
        return
    fi

    local output="${output_subdir}/$(basename "$input")"
    if [[ $OW -eq 1 ]]; then
        run_or_echo "rm -f '$output'"
    elif [[ -f "$output" ]]; then
        echo "Skipping sub-${sub}: output already exists"
        return
    fi

    echo
    echo "**************************************** Processing sub-${sub} ***************************************"

    run_or_echo "call_spmsanlm '$input' '${output_subdir}/denoised.nii.gz'"

    if [[ $RUN_BIASCORR -eq 1 ]]; then
        if [[ $SPM_BIAS -eq 1 ]]; then
            run_or_echo "call_spmbias '${output_subdir}/denoised.nii.gz' '$output'"
        else
            run_or_echo "call_antsbias '${output_subdir}/denoised.nii.gz' '$output'"
        fi
        run_or_echo "rm -f '${output_subdir}/denoised.nii.gz'"
    else
        run_or_echo "mv '${output_subdir}/denoised.nii.gz' '$output'"
    fi

    local mask
    mask=$(find "$inputdir" -name "*acq-${DATA}*spm_mask.nii.gz" -print -quit)
    if [[ -n "$mask" ]]; then
        run_or_echo "cp '$mask' '$output_subdir/'"
    fi

    echo "Done processing sub-${sub}"
}

# ---------------------------------------------------------------------------------------------------
# Main Execution
# ---------------------------------------------------------------------------------------------------

start_timer

for sub in "${subjects[@]}"; do
    process_subject "$sub"
done

end_timer
