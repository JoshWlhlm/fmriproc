#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source "${SETUP_FILE}"
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<EOF

---------------------------------------------------------------------------------------------------
spinoza_scanner2bids

convert raw data from the scanner to nifti format. Depending on which session we're analyzing, we'll
use either call_dcm2niix.py (session 1 - which is FromScannerToBIDS.py from M. Aqil) which can deal
nicely with the anatomical and functional stuff or call_dcm2niix.sh, which is more specific for the
line scanning stuff.

Usage:
  spinoza_scanner2bids [arguments] [options] <project root> <sourcedata>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -d <depth>          search depth for dcm2niix
  -q <queue>          submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -v <n_vols>         number of volumes to cut from the beginning of the timeseries (default = None)
                      For instance, you have acquired the actual data from dummy scans rather than
                      discard them. Will discard the first X volumes from both the FUNC and FMAP, un-
                      less '--skip-fmap' is specified, in which case the FMAPs are left alone.
  -p <pattern>        pattern for file-name reconstruction (default = %n_%p, representing Patient-
                      Name & Protocol Name). You can change this, but then I don't bear any respon-
                      sibilities over the consequences in later scripts.. This option is only avai-
                      lable for 'dcm2niix' (DCM-files), not 'parrec2nii' (PAR/REC-files).
  -a <suffixes>       use suffixes to store other anatomical files in the BIDS folder. This over-
                      writes the SEARCH_ANATOMICALS-variable in the setup-file. For instance, if 
                      you have qMRI-data that did not come from MP2RAGEME, you can specify:
                      "-a T2star,QSM,T1map". Input must be comma-separated without spaces. *.nii.gz
                      will be added to the search. 'acq' and 'run' tags are derived from the file-
                      name.

Options:
  -o|--ow             Overwrite existing output
  --full              Overwrite existing output + created nifti folder
  --lines             flag to tell we're dealing with a line-scanning session. By default 'regular',
                      which means standard whole-brain acquisitions.
  --inv               add individual inversion files from anatomies in 'anat' folder
  --take-avg-tr       Derive RepetitionTime by averaging the time differences between all slices.
                      Default behavior is to take the difference between the first and second volume.
                      Only works for PAR/REC-files!
  --ap|--pa|--lr|--rl Specifies the phase-encoding direction for the BOLD run. The phase-encoding 
                      for the FMAP will be automatically inverted. This flag can be specified to be
                      a bit more flexible than using the PE_DIR_BOLD-variable in the setup file
  --no-lpi            do not reorient files to LPI. If you want to use NORDIC or use fMRIprep's out-
                      puts on more raw data, I'd advise you to reorient to LPI and to NOT use this 
                      flag. This flag is mainly here because it can take some time with big files
                      which slows down debugging.
  --sge               submit individual subjects to cluster as call_parrec2nii can take a while..
  --phys              run only physiology conversion
  --skip-tr           do not overwrite the TR in the header during call_bids. Generally not recom-
                      mended, but exists for debugging purposes.
  --skip-fmap         do not trim the time series from FMAPs. By default, it is assumed that all your
                      functional files have dummy-saving turned on.

Positional:
  <project root>      directory to output BIDSified data to
  <sourcedata>        directory containing to be converted data

Example:
  spinoza_scanner2bids /path/to/project_root /path/to/your/project/sourcedata     # regular
  spinoza_scanner2bids -n 1/path/to/project_root /path/to/your/project/sourcedata # regular|ses-1
  spinoza_scanner2bids (shows this help text)                                     # help
  spinoza_scanner2bids --lines -n 2 DIR_DATA_HOME DIR_DATA_SOURCE                 # lines|ses-2

Notes:
  Assumes the following data structure:
  PROJECT
  └── sourcedata
      └── sub-001
          └── ses-1
              ├── task
              └── DICOMs/PARRECs
              
  Converts to:
  PROJECT
  └── sub-001
      └── ses-1
          ├── anat
          ├── func
          ├── fmap
          └── phase

---------------------------------------------------------------------------------------------------------

EOF
    exit 1
}

#---------------------------------------------------------------------------------------------------------
# Deal with arguments

# Check for subject & session flags
OW=""
FULL_OW=0
SES_FLAG=""
SES_TYPE="regular"
ADD_INV=""
ORIENT_FLAG=""
PROT_FLAG=""
PE_FLAG=""
run_local=1
DEBUG_MODE=0
PHYS_FLAG=""
SEARCH_DEPTH=0
TR_FLAG=""
MRI_SYSTEM_FLAG=""
SKIP_TR_FLAG=""
CUT_VOLS=""
TRIM_FMAP=""
SGE_QUEUE=${SGE_QUEUE_SHORT}
pattern_flag=""
search_flag=""
while getopts :-:os:n:r:q:d:t:v:p:a: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        lines)
          SES_FLAG="--lines"
          SES_TYPE="lines"
          ;;
        inv)
          ADD_INV="--inv"
          ;;
        take-avg-tr)
          PROT_FLAG="--take-avg-tr"
          ;;         
        ap)
          PE_FLAG="--ap"
          ;;          
        pa)
          PE_FLAG="--pa"
          ;;         
        lr)
          PE_FLAG="--lr"
          ;;         
        rl)
          PE_FLAG="--rl"
          ;;        
        no-lpi)
          ORIENT_FLAG="--no-lpi"
          ;;       
        ow)
          OW="--ow"
          ;;  
        phys)
          PHYS_FLAG="--phys"
          SES_TYPE="lines"
          ;;           
        full)
          FULL_OW=1
          ;;  
        skip-fmap)
          TRIM_FMAP="--skip-fmap"
          ;;           
        sge)
          run_local=0
          if [[ ! -d ${DIR_LOGS} ]]; then
            mkdir -p ${DIR_LOGS} 2>/dev/null
          fi
          ;;     
        debug)
          DEBUG_MODE=1
          ;;       
        skip-tr)
          SKIP_TR="--skip-tr"
          ;;                       
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}, did you mean \"--lines\"?"
            exit 1
          fi
          ;;  
      esac;;    
    s)  sub=${OPTARG}
          ;;
    d)  SEARCH_DEPTH=${OPTARG}
          ;;          
    n)  ses=${OPTARG}
          ;;     
    o)  OW="--ow"
          ;;    
    r)  RUNS="-r ${OPTARG}"                                 
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;
    t)  TR_FLAG="-t ${OPTARG}"
          ;;        
    v)  CUT_VOLS="-v ${OPTARG}"
          ;;
    p)  pattern_flag="-p ${OPTARG}"
          ;;   
    a)  search_flag="-a ${OPTARG}"
          ;;                                                
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

PROJECT_ROOT=${@:$OPTIND:1}
SOURCEDATA=${@:$OPTIND+1:1}

[[ -z "$PROJECT_ROOT" || -z "$SOURCEDATA" ]] && Usage

# If no subjects specified, process all found in sourcedata
if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------
start_timer "Convert raw data to NIFTI using dcm2niix/parrec2nii"

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")

  if [[ ! -z ${ses} ]]; then
    nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
    msg="${BOLD_CYAN}${sub_name}${RESET} ses-${BOLD_RED}${ses}${RESET}: already processed"
  else
    base_path=${sub_name}
    base=${sub_name}
    msg="${BOLD_CYAN}${sub_name}${RESET}: already processed"
  fi  

  input_dir=${SOURCEDATA}/${base_path}
  output_dir=${input_dir}/nifti
  bids_dir=${PROJECT_ROOT}/${base_path}

  # full overwrite
  [[ $FULL_OW -eq 1 ]] && rm -rf "${output_dir}" "${bids_dir}"
  
  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    exit 1
  fi

  # check if input directory exists
  if [[ ! -d "${bids_dir}/anat" || ! -d "${bids_dir}/func" || -n "${OW}" || ${DEBUG_MODE} -eq 1 || -n "${PHYS_FLAG}" ]]; then

    if [[ ${SES_TYPE} == "lines" ]]; then
      intro_txt="Exotic session (e.g., line-scanning); using call_dcm2niix"
    else
      intro_txt="Regular session, but with call_parrec2nii fix for big PAR/REC files"
    fi

    # decide the job type
    job="$(decide_job_type "call_bids" "${base}_desc-dcm2bids" "${run_local}" "${DIR_LOGS}" "1" "${SGE_QUEUE}")"

    if [[ ${DEBUG_MODE} -eq 1 ]]; then
      echo " OW          = ${OW}"
      echo " FULL_OW     = ${FULL_OW}"
      echo " SES_FLAG    = ${SES_FLAG}"
      echo " ADD_INV     = ${ADD_INV}"
      echo " ORIENT_FLAG = ${ORIENT_FLAG}"
      echo " PROT_FLAG   = ${PROT_FLAG}"
      echo " PE_FLAG     = ${PE_FLAG}"
      echo " RUNS FLAG   = ${RUNS}"
      echo " PHYS FLAG   = ${PHYS_FLAG}"
      echo " TR FLAG     = ${TR_FLAG}"
      echo " VOLS FLAG   = ${CUT_VOLS}"
      echo " TRIM FMAP   = ${TRIM_FMAP}"
      echo " PATTERN     = ${pattern_flag}"
      echo " SEARCH ANAT = ${search_flag}"
    fi

    cmd=(
      "${job}"
      "${SES_FLAG}"
      "${ADD_INV}"
      "${ORIENT_FLAG}"
      "${PROT_FLAG}"
      "${PE_FLAG}"
      "${OW}"
      "${PHYS_FLAG}"
      "${TR_FLAG}"
      "${SKIP_TR}"
      "${CUT_VOLS}"
      "${TRIM_FMAP}"
      "${search_flag}"
      -i "${input_dir}"
      -o "${output_dir}"
      -b "${bids_dir}"
      -n "${base}"
      -d "${SEARCH_DEPTH}"
      "${RUNS}"
      "${pattern_flag}"
    )

    # echo command if running locally
    if [[ ${SGE_FLAG} -eq 0 ]]; then
      echo
      print_cmd "${cmd[@]}"
      echo
    fi

    eval "${cmd[@]}"

    if [[ $? -ne 0 ]]; then
      print_error_msg "$(basename ${0})" "call_bids"
      exit 1
    fi
      
  else
    echo -e "${msg}; use \"master -m 02a --ow\" (re-runs bidsification) or \"master -m 02a --full\" (also re-runs conversion) to overwrite"
  fi

done

#---------------------------------------------------------------------------------------------------------
# make dataset_description file if it doesn't exist. User enters a line for the description

#---------------------------------------------------------------------------------------------------------
# Dataset description
if [[ ! -f "${PROJECT_ROOT}/dataset_description.json" ]]; then
  cd "$PROJECT_ROOT"
  echo "Enter project name for dataset_description.json: "
  read -r DESCRIPTION

  echo "Enter author/owner of the project: "
  read -r OWNER
  cat > dataset_description.json <<EOF
{
    "Name": "${DESCRIPTION}",
    "BIDSVersion": "1.2.2",
    "Authors": ["${OWNER}"]
}
EOF
  cd - > /dev/null
fi

#---------------------------------------------------------------------------------------------------------
end_timer
