#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# Load setup and helper functions
call_loadsetup
source "${SETUP_FILE}"
source call_bashhelper  # Loads start_timer and end_timer

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<EOF

---------------------------------------------------------------------------------------------------
spinoza_scanner2bids

Convert raw data from the scanner to nifti format. Depending on the session, the script either uses
`call_dcm2niix.py` (for session 1 - which is FromScannerToBIDS.py from M. Aqil) or `call_dcm2niix.sh`
for line scanning sessions.

Usage:
  spinoza_scanner2bids [options] <project root> <sourcedata>

Arguments:
  -s <subject>        Subject ID (e.g., 01). Can also be comma-separated: 01,02,05
  -n <session>        Session ID (e.g., 1, 2, or none)
  -d <depth>          Search depth for dcm2niix
  -q <queue>          Submit jobs to a specific queue (default: SGE_QUEUE_LONG)
  -o|--ow             Overwrite existing output
  --full              Full overwrite (nifti and BIDS folders)
  --lines             Flag for line-scanning sessions
  --inv                Add individual inversion files to anat folder
  --take-avg-tr       Average all TRs from par file instead of taking the first
  --ap|--pa|--lr|--rl  Phase-encoding direction (overrides PE_DIR_BOLD in setup file)
  --no_lpi             Skip reorienting to LPI (not recommended, for debugging only)
  --sge                Submit subjects to cluster (via qsub)
  --phys               Convert physiology only
  --skip_tr            Do not overwrite TR in header (for debugging)

Examples:
  spinoza_scanner2bids /path/to/project_root /path/to/sourcedata
  spinoza_scanner2bids -n 1 /path/to/project_root /path/to/sourcedata
  spinoza_scanner2bids --lines -n 2 /path/to/project_root /path/to/sourcedata

Assumed structure:
  PROJECT_ROOT
  └── sourcedata
      └── sub-001
          └── ses-1
              └── DICOMs/PARRECs

---------------------------------------------------------------------------------------------------

EOF
    exit 1
}

#---------------------------------------------------------------------------------------------------------
# Argument parsing
OW=""
FULL_OW=0
SES_TYPE="regular"
ADD_INV=""
ORIENT_FLAG=""
PROT_FLAG=""
PE_FLAG=""
SGE_FLAG=0
DEBUG_MODE=0
PHYS_FLAG=""
SKIP_TR=""
MRI_SYSTEM_FLAG=""
SEARCH_DEPTH=0
TR_FLAG=""
subjects=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -s) IFS=',' read -r -a subjects <<< "$2"; shift 2 ;;
        -n) session="$2"; shift 2 ;;
        -d) SEARCH_DEPTH="$2"; shift 2 ;;
        -q) SGE_QUEUE="$2"; shift 2 ;;
        -o|--ow) OW="--ow"; shift ;;
        --full) FULL_OW=1; shift ;;
        --lines) SES_TYPE="lines"; SES_FLAG="--lines"; shift ;;
        --inv) ADD_INV="--inv"; shift ;;
        --take-avg-tr) PROT_FLAG="--take-avg-tr"; shift ;;
        --ap|--pa|--lr|--rl) PE_FLAG="--${1#--}"; shift ;;
        --no_lpi) ORIENT_FLAG="--no_lpi"; shift ;;
        --sge) SGE_FLAG=1; shift ;;
        --phys) PHYS_FLAG="--phys"; SES_TYPE="lines"; shift ;;
        --skip_tr) SKIP_TR="--skip_tr"; shift ;;
        --philips|--siemens|--ge) MRI_SYSTEM_FLAG="$1"; shift ;;
        --debug) DEBUG_MODE=1; shift ;;
        -h|--help) Usage ;;
        --) shift; break ;;
        *) 
            if [[ -z "$PROJECT_ROOT" ]]; then
                PROJECT_ROOT="$1"
            elif [[ -z "$SOURCEDATA" ]]; then
                SOURCEDATA="$1"
            else
                Usage
            fi
            shift
            ;;
    esac
done

[[ -z "$PROJECT_ROOT" || -z "$SOURCEDATA" ]] && Usage

# If no subjects specified, process all found in sourcedata
if [[ ${#subjects[@]} -eq 0 ]]; then
    while IFS= read -r subdir; do
        subjects+=("$(basename "$subdir")")
    done < <(find "$SOURCEDATA" -mindepth 1 -maxdepth 1 -type d)
fi

#---------------------------------------------------------------------------------------------------------
# Main processing loop
#---------------------------------------------------------------------------------------------------------
start_timer "Convert raw data to NIFTI using dcm2niix/parrec2nii"

for sub in "${subjects[@]}"; do
    sub_name="${SUBJECT_PREFIX}${sub}"

    if [[ -n "$session" ]]; then
        base_path="sub-${sub}/ses-${session}"
        base="sub-${sub}_ses-${session}"
    else
        base_path="sub-${sub}"
        base="sub-${sub}"
    fi

    input_dir="${SOURCEDATA}/${base_path}"
    output_dir="${input_dir}/nifti"
    bids_dir="${PROJECT_ROOT}/${base_path}"

    [[ $FULL_OW -eq 1 ]] && rm -rf "$output_dir" "$bids_dir"

    if [[ ! -d "$input_dir" ]]; then
        echo "Missing $input_dir, skipping $sub"
        continue
    fi

    if [[ ! -d "$bids_dir/anat" || ! -d "$bids_dir/func" || -n "$OW" || $DEBUG_MODE -eq 1 || -n "$PHYS_FLAG" ]]; then
        intro_txt="Processing ${sub_name}: "
        [[ "$SES_TYPE" == "lines" ]] && intro_txt+="Exotic (line-scanning)" || intro_txt+="Regular session"
        echo "$intro_txt"

        if [[ $SGE_FLAG -eq 1 ]]; then
            QUEUE="${SGE_QUEUE:-$SGE_QUEUE_LONG}"
            job="qsub -q $QUEUE -wd $DIR_LOGS -pe smp 1 -N ${base}_desc-dcm2bids"
        else
            job="bash"
        fi

        cmd="$job $(which call_bids) $SES_FLAG $ADD_INV $ORIENT_FLAG $PROT_FLAG $PE_FLAG $OW $PHYS_FLAG $TR_FLAG $MRI_SYSTEM_FLAG $SKIP_TR -i $input_dir -o $output_dir -b $bids_dir -n $base -d $SEARCH_DEPTH $RUNS"

        [[ $DEBUG_MODE -eq 1 ]] && echo "Running: $cmd"

        eval "$cmd"
    else
        echo "${sub_name}: already processed (use --ow or --full to force re-run)"
    fi
done

#---------------------------------------------------------------------------------------------------------
# Dataset description
if [[ ! -f "${PROJECT_ROOT}/dataset_description.json" ]]; then
    cd "$PROJECT_ROOT"
    echo "Enter project name for dataset_description.json: "
    read -r DESCRIPTION
    cat > dataset_description.json <<EOF
{
    "Name": "$DESCRIPTION",
    "BIDSVersion": "1.2.2",
    "Authors": ["G.J. Heij"]
}
EOF
    cd - > /dev/null
fi

#---------------------------------------------------------------------------------------------------------
end_timer
