#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<EOF

---------------------------------------------------------------------------------------------------
spinoza_scanner2bids

Convert raw data from the scanner to nifti format using 'call_dcm2niix'. This script can handle 
both PAR/RECs and DCM input. DCM files will be converted using 'dcm2niix', whereas PAR/RECs will be
converted using 'parrec2nii' (wrapper in 'call_parrec2nii'). Complete json sidecars will be produ-
ced and populated with relevant information for fMRIPrep, including:
  - SliceTiming (if BOLD files are 2D); see also 'call_slicetiming'. Important factors for this
    function are:
      - number of slices (read from PAR/DCM-file)
      - Multiband factor (either read from PAR-file or from \$MB_FACTOR-variable)
      - Assumes ascending slice ordering
  - PhaseEncodingDirection:
    - Read from the \$PE_DIR_BOLD-variable (priority)
    - Specified for BOLD through flags (--ap|--pa|--lr|--rl), reversed for FMAP
    - Either read from PAR (but is ambiguous) or DCM (via 'CSA')
    - Defaults to AP for BOLD, reversed for FMAP
  - RepetitionTime:
    - For DCMs:
        1.  Parse TR directly from the filename if present (TR2.9, TR=2.9, TR_2p9, _TR2p9_).
            This is the most reliable for modern Siemens 3D EPI.
        2.  For 3D acquisitions, trust RepetitionTime (0018,0080) from DICOM directly.
        3.  For 2D Mosaic acquisitions, calculate TR = NumSlices × SliceMeasurementDuration.
            This works for Siemens 2D-EPI (especially in fMRI).
        4.  For 2D multi-band sequences, apply multi-band correction (TR / MultiBandFactor).
    - For PAR/RECs:
        We can read the 'dtime' column and extra unique values between slices/volumes. This works
        well for 3D acquisitions.
    - Both:
        Specified through the '-t <tr' flag.

    The RepetitionTime-key from the json-file is used as reference. The TR in the header will be 
    updated to this value if a mismatch is detected.
  - IntendedFor/B0FieldIdentifier): the script can deal and set the IntendedFor-key appropriately 
    in the following scenarios:
      - 1 FMAP per BOLD [best/most stable]
      - 1 FMAP for every 2 BOLD [most likely case]
      - 1 FMAP for all BOLDs [iffy]

    Generally, it is best to have an FMAP per BOLD, in which case the filenaming will be matched,
    assuming the BOLD file ends with '_bold.nii.gz' and the FMAP with '_epi.nii.gz'. In a final
    attempt, the folder with converted nifti-files is scraped to search for "*_dir-*_epi.nii.gz"-
    files, which are then linked to BOLD files if possible.

    TIP: check 'call_replace'/'call_dcm' how to update PAR/DCM files so that this is set correctly.
    File are converted using %n_%p pattern (see -p flag), so you can update these fields in the
    PAR/DCM-files to help the BIDS-ification process (see also link in 'Notes').

By default, all files will be converted to have the RAS+ (or LPI) coordinate system. This system
is used by fMRIPrep and makes the output from that software compatible with 'older' files before
fMRIPrep. This is especially handy if you want to combine multiple segmentations to boost surfa-
ce reconstruction. If you do not want this, use '--no-lpi'.

Usage:
  spinoza_scanner2bids [arguments] [options] <project root> <sourcedata>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -d <depth>      search depth for dcm2niix
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -v <n_vols>     number of volumes to cut from the beginning of the timeseries (default = None)
                  For instance, you have acquired the actual data from dummy scans rather than
                  discard them. Will discard the first X volumes from both the FUNC and FMAP, un-
                  less '--skip-fmap' is specified, in which case the FMAPs are left alone.
  -p <pattern>    pattern for file-name reconstruction (default = %n_%p, representing Patient-
                  Name & Protocol Name). You can change this, but then I don't bear any respon-
                  sibilities over the consequences in later scripts.. This option is only avai-
                  lable for 'dcm2niix' (DCM-files), not 'parrec2nii' (PAR/REC-files).
  -a <suffixes>   use suffixes to store other anatomical files in the BIDS folder. This over-
                  writes the \$SEARCH_ANATOMICALS-variable in the setup-file. For instance, if 
                  you have qMRI-data that did not come from MP2RAGEME, you can specify:
                  "-a T2star,QSM,T1map". Input must be comma-separated without spaces. *.nii.gz
                  will be added to the search. 'acq' and 'run' tags are derived from the file-
                  name.

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --full          Overwrite existing output + created nifti folder
  --lines         flag to tell we're dealing with a line-scanning session. By default 'regular',
                  which means standard whole-brain acquisitions.
  --inv           add individual inversion files from anatomies in 'anat' folder
  --take-avg-tr   Derive RepetitionTime by averaging the time differences between all slices.
                  Default behavior is to take the difference between the first and second volume.
                  Only works for PAR/REC-files!
  --ap            set the phase-encoding of the BOLD to AP (FMAP=PA)
  --pa            set the phase-encoding of the BOLD to PA (FMAP=AP)
  --lr            set the phase-encoding of the BOLD to LR (FMAP=RL)
  --rl            set the phase-encoding of the BOLD to RL (FMAP=LR)
  --no-lpi        do not reorient files to LPI. If you want to use NORDIC or use fMRIprep's out-
                  puts on more raw data, I'd advise you to reorient to LPI and to NOT use this 
                  flag. This flag is mainly here because it can take some time with big files
                  which slows down debugging.
  --sge           submit individual subjects to cluster as call_parrec2nii can take a while..
  --phys          run only physiology conversion
  --skip-tr       do not overwrite the TR in the header during call_bids. Generally not recom-
                  mended, but exists for debugging purposes.
  --skip-fmap     do not trim the time series from FMAPs. By default, it is assumed that all your
                  functional files have dummy-saving turned on.

Positional:
  <project root>  directory to output BIDSified data to
  <sourcedata>    directory containing to be converted data

Example:
  # regular
  spinoza_scanner2bids \$DIR_DATA_HOME \$DIR_DATA_HOME/sourcedata

  # regular whole-brain session
  spinoza_scanner2bids -s 01 \$DIR_DATA_HOME \$DIR_DATA_HOME/sourcedata

  # line-scanning session
  spinoza_scanner2bids --lines -n 2 \$DIR_DATA_HOME \$DIR_DATA_HOME/sourcedata

  # mixed with MP2RAGE (assumes BOLD files have 'acq-3DEPI' tag to unmix BOLD files)
  spinoza_scanner2bids --lines --inv -n 2 \$DIR_DATA_HOME \$DIR_DATA_HOME/sourcedata

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01
  
  # fix TR
  master -m $(get_module_nr $(basename ${0})) -s 01 -t 1.32

  # fix PhaseEncodingDirection
  master -m $(get_module_nr $(basename ${0})) -s 01 --ap

  # cut volumes from BOLD, but not FMAP
  master -m $(get_module_nr $(basename ${0})) -s 01 -v 4 --skip-fmap

  # skip reorientation to LPI
  master -m $(get_module_nr $(basename ${0})) -s 01 --no-lpi

  # mixed line-scanning session
  master -m $(get_module_nr $(basename ${0})) -s 01 --lines --inv

  # run specific runs
  master -m $(get_module_nr $(basename ${0})) -s 01 -r 1,2,4

Notes:
  Assumes the following data structure:
  PROJECT
  └── sourcedata
      └── sub-001
          └── ses-1
              ├── task
              └── DICOMs/PARRECs
              
  Converts to:
  PROJECT
  └── sub-001
      └── ses-1
          ├── anat
          ├── func
          ├── fmap
          └── phase

  see https://fmriproc.readthedocs.io/en/latest/pipeline_steps.html for more tips and tricks regar-
  ding filenaming

---------------------------------------------------------------------------------------------------

EOF

}

#-----------------------------------------------------------------------------
# Deal with arguments

# Check for subject & session flags
OW=""
FULL_OW=0
SES_FLAG=""
SES_TYPE="regular"
ADD_INV=""
ORIENT_FLAG=""
PROT_FLAG=""
PE_FLAG=""
run_local=1
DEBUG_MODE=0
PHYS_FLAG=""
SEARCH_DEPTH=0
TR_FLAG=""
MRI_SYSTEM_FLAG=""
SKIP_TR_FLAG=""
CUT_VOLS=""
TRIM_FMAP=""
SGE_QUEUE=${SGE_QUEUE_SHORT}
pattern_flag=""
search_flag=""
while getopts :-:hos:n:r:q:d:t:v:p:a: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        lines)
          SES_FLAG="--lines"
          SES_TYPE="lines"
          ;;
        inv)
          ADD_INV="--inv"
          ;;
        take-avg-tr)
          PROT_FLAG="--take-avg-tr"
          ;;         
        ap)
          PE_FLAG="--ap"
          ;;          
        pa)
          PE_FLAG="--pa"
          ;;         
        lr)
          PE_FLAG="--lr"
          ;;         
        rl)
          PE_FLAG="--rl"
          ;;        
        no-lpi)
          ORIENT_FLAG="--no-lpi"
          ;;       
        ow)
          OW="--ow"
          ;;  
        phys)
          PHYS_FLAG="--phys"
          SES_TYPE="lines"
          ;;           
        full)
          FULL_OW=1
          ;;  
        skip-fmap)
          TRIM_FMAP="--skip-fmap"
          ;;           
        sge)
          run_local=0
          if [[ ! -d ${DIR_LOGS} ]]; then
            mkdir -p ${DIR_LOGS} 2>/dev/null
          fi
          ;;     
        debug)
          DEBUG_MODE=1
          ;;       
        skip-tr)
          SKIP_TR="--skip-tr"
          ;;                       
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;   
    s)  sub=${OPTARG}
          ;;
    d)  SEARCH_DEPTH=${OPTARG}
          ;;          
    n)  ses=${OPTARG}
          ;;     
    o)  OW="--ow"
          ;;    
    r)  RUNS="-r ${OPTARG}"                                 
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;
    t)  TR_FLAG="-t ${OPTARG}"
          ;;        
    v)  CUT_VOLS="-v ${OPTARG}"
          ;;
    p)  pattern_flag="-p ${OPTARG}"
          ;;   
    a)  search_flag="-a ${OPTARG}"
          ;;                                                
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

PROJECT_ROOT=${@:$OPTIND:1}
SOURCEDATA=${@:$OPTIND+1:1}

[[ -z "$PROJECT_ROOT" || -z "$SOURCEDATA" ]] && Usage

# If no subjects specified, process all found in sourcedata
if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Convert raw data to NIFTI using dcm2niix/parrec2nii"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")

  if [[ ! -z ${ses} ]]; then
    nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
    msg="${BOLD_CYAN}${sub_name}${RESET} ses-${BOLD_RED}${ses}${RESET}: already processed"
  else
    base_path=${sub_name}
    base=${sub_name}
    msg="${BOLD_CYAN}${sub_name}${RESET}: already processed"
  fi  

  #-----------------------------------------------------------------------------
  # input/output
  input_dir="${SOURCEDATA}/${base_path}"
  output_dir="${input_dir}/nifti"
  bids_dir="${PROJECT_ROOT}/${base_path}"

  #-----------------------------------------------------------------------------
  # full overwrite
  [[ $FULL_OW -eq 1 ]] && rm -rf "${output_dir}" "${bids_dir}"
  
  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    exit 1
  fi

  #-----------------------------------------------------------------------------
  # check if input directory exists
  if [[ ! -d "${bids_dir}/anat" || ! -d "${bids_dir}/func" || -n "${OW}" || ${DEBUG_MODE} -eq 1 || -n "${PHYS_FLAG}" ]]; then

    if [[ ${SES_TYPE} == "lines" ]]; then
      intro_txt="Exotic session (e.g., line-scanning); using call_dcm2niix"
    else
      intro_txt="Regular session, but with call_parrec2nii fix for big PAR/REC files"
    fi

    #-----------------------------------------------------------------------------
    # decide the job type
    job="$(
      decide_job_type \
      "call_bids" \
      "${base}_desc-dcm2bids" \
      "${run_local}" \
      "${DIR_LOGS}" \
      "1" \
      "${SGE_QUEUE}"
    )"

    #-----------------------------------------------------------------------------
    # debug mode
    if [[ ${DEBUG_MODE} -eq 1 ]]; then
      echo " OW          = ${OW}"
      echo " FULL_OW     = ${FULL_OW}"
      echo " SES_FLAG    = ${SES_FLAG}"
      echo " ADD_INV     = ${ADD_INV}"
      echo " ORIENT_FLAG = ${ORIENT_FLAG}"
      echo " PROT_FLAG   = ${PROT_FLAG}"
      echo " PE_FLAG     = ${PE_FLAG}"
      echo " RUNS FLAG   = ${RUNS}"
      echo " PHYS FLAG   = ${PHYS_FLAG}"
      echo " TR FLAG     = ${TR_FLAG}"
      echo " VOLS FLAG   = ${CUT_VOLS}"
      echo " TRIM FMAP   = ${TRIM_FMAP}"
      echo " PATTERN     = ${pattern_flag}"
      echo " SEARCH ANAT = ${search_flag}"
    fi

    #-----------------------------------------------------------------------------
    # cmd
    cmd=(
      "${job}"
      "${SES_FLAG}"
      "${ADD_INV}"
      "${ORIENT_FLAG}"
      "${PROT_FLAG}"
      "${PE_FLAG}"
      "${OW}"
      "${PHYS_FLAG}"
      "${TR_FLAG}"
      "${SKIP_TR}"
      "${CUT_VOLS}"
      "${TRIM_FMAP}"
      "${search_flag}"
      -i "${input_dir}"
      -o "${output_dir}"
      -b "${bids_dir}"
      -n "${base}"
      -d "${SEARCH_DEPTH}"
      "${RUNS}"
      "${pattern_flag}"
    )

    # print and run
    if [[ ${SGE_FLAG} -eq 0 ]]; then
      echo
      print_cmd "${cmd[@]}"
      echo
    fi

    eval "${cmd[@]}"

    if [[ $? -ne 0 ]]; then
      print_error_msg "$(basename ${0})" "call_bids"
      exit 1
    fi
      
  else
    echo -e "${msg}; use \"master -m 02a --ow\" (re-runs bidsification) or \"master -m 02a --full\" (also re-runs conversion) to overwrite"
  fi

done

#-----------------------------------------------------------------------------
# Dataset description
if [[ ! -f "${PROJECT_ROOT}/dataset_description.json" ]]; then
  cd "$PROJECT_ROOT"
  echo "Enter project name for dataset_description.json: "
  read -r DESCRIPTION

  echo "Enter author/owner of the project: "
  read -r OWNER
  cat > dataset_description.json <<EOF
{
    "Name": "${DESCRIPTION}",
    "BIDSVersion": "1.2.2",
    "Authors": ["${OWNER}"]
}
EOF
  cd - > /dev/null
fi

#-----------------------------------------------------------------------------
end_timer
