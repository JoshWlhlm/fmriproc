#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source "${SETUP_FILE}"
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_line2surface

This script contains the registration cascade from single slice/line > multi-slice (9 slice) > low
resolution MP2RAGE from session 2 > high resolution MP2RAGE from session 1 > FreeSurfer anatomy.
In spinoza_lineplanning, we have created a matrix mapping the low resolution anatomy to the high
resolution anatomy from session 1. Because the single- and multislice images are basically in the
same space (header-wise) as the low resolution anatomical scan, we can just apply this matrix to the
single- and multi-slice. We then have everything in the space of the high resolution anatomy from
session 1.

Now we need a matrix mapping the high resolution anatomical scan from session 1 with the FreeSurfer
anatomy. For this, we can use FreeSurfer's bbregister, which registers an input image to orig.mgz.
We can transform both matrices to FSL-format, so we can create a composite transformation matrix
that we can apply to everything from session 2 with flirt. Because we need all these transformed
files for pycortex, we will try to store all the files in the pycortex directory, but you can speci-
fy this yourself (default is the pycortex directory).

Easiest thing to do is run the "segmentation.ipynb" notebook to warp all segmentations to session 
1, then everything - HOP - to FreeSurfer and Pycortex space using the matrix created with spinoza_
lineplanning (this matrix you should definitely have..).

Usage:
  spinoza_line2surface -s <subject number> -y <anat session 2> -o <outputdir> -i <input dir>

Arguments:
  -s <sub number>         number of subject's FreeSurfer directory
  -y <anat ses 2>         anatomical image from session 2 as outputted by spinoza_lineplanning
  -o <output directory>   default is bids_root/derivatives/pycortex (easiest to set this to default
                          other make it the same as Pycortex' filestore) [<sub> will be appended]
  -i <directory to warp>  input directory that we need to warp to the surface; I'm assuming a struc-
                          ture like "<input dir>/<sub>/ses-2"

Example:
  spinoza_line2surface -s ${SUBJECT_PREFIX}001 -y anat_session2 -d /output/directory/whatev

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -le 1 ]]; then
  Usage >&2
  exit 1
fi

while getopts hs:y:o:i: arg
do
  case ${arg} in
    s)  SUB=${OPTARG}
          ;;
    y)  ANAT2=${OPTARG}
          ;;
    o)  OUTPUTDIR=${OPTARG}
          ;;
    i)  INPUTDIR=${OPTARG}
          ;;
  esac
done

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------
start_timer "Register nominal line back to surface"

# nighres required this module
check_python_package "cxutils"

#-----------------------------------------------------------------------------
# check if FreeSurfer folder exists
if [[ ! -d ${FS}/${SUB} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Directory ${BOLD_GREEN}${FS}/${SUB}${RESET} does not exist"
  exit 1
fi

# print header
print_subject_header ${SUB}

# set output directory
if [[ ! -z ${OUTPUTDIR} ]]; then
  outputdir=${OUTPUTDIR}
else
  # defaulting to pycortex directory
  outputdir=${DIR_DATA_DERIV}/pycortex
fi

# make sure filestore is set to outputdir
fstore=$(call_ctxfilestore show_fs)
if [[ "${outputdir}" != "${fstore}" ]]; then
  echo "Updating Pycortex's filestore with outputdir"
  call_ctxfilestore update ${outputdir}
fi

if [[ ! -d ${outputdir}/${SUB} ]]; then
  echo "Import subject from FreeSurfer"
  call_ctximport -s ${SUB}
fi

#-----------------------------------------------------------------------------
# Step 1; converting from-ses1_to-ses-2 to FSL-format

echo
echo "[STEP 1]: warping session 2 to FreeSurfer"

if [[ -z ${ANAT2} ]]; then
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Specify session relevant reference for line-scanning session"
  exit 1
fi

moving=${ANAT2}
if [[ ! -d ${outputdir}/${SUB}/warped ]]; then
  mkdir -p ${outputdir}/${SUB}/warped
fi

# Fetch matrix
ses=$(get_id ${moving} "ses")
tmp_genaff=$(find ${outputdir}/${SUB}/transforms -type f \( -name "*from-fs*" -and -name "*to-ses${ses}*" -and -name "*genaff*" -and -name "*.mat" \) 2>/dev/null)
if [[ ! -z ${tmp_genaff} ]]; then
  from_fs_to_ses2=${tmp_genaff}
else
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Could not find FreeSurfer to ses-${ses} matrix in ${BOLD_GREEN}${outputdir}/${SUB}/transforms${RESET}. Use ${BOLD_BLUE}call_fs_to_ses2${RESET}"
  exit 1
fi

# Fetch moving files
ff=$(find ${INPUTDIR} -type f -name "*.nii.gz" 2>/dev/null)
if [[ -z ${ff} ]]; then
  print_file_not_in_dir "${SUB}" "*.nii.gz" "${INPUTDIR}"
  exit 1
fi

# Create FreeSurfer reference
fs_ref=${FS}/${SUB}/mri/orig.nii.gz
if [[ ! -f ${fs_ref} ]]; then
  echo -e "Converting ${BOLD_RED}orig.mgz${RESET} to ${BOLD_RED}orig.nii.gz${RESET} to use as FS-reference"
  call_mriconvert $(dirname ${fs_ref})/$(basename ${fs_ref} .nii.gz).mgz ${fs_ref} 2>/dev/null

  if [[ $? != 0 ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "call_mriconvert"
    exit 1
  fi

else
  echo -e "FreeSurfer reference: ${BOLD_GREEN}$(basename ${fs_ref})${RESET}"
fi

for f in ${ff[@]}; do

  # assumes a filename ${SUBJECT_PREFIX}xxx_ses-1_acq-MP2RAGE...*.nii.gz and will insert 'space-' after MP2RAGE
  transform_fs=${outputdir}/${SUB}/warped/$(basename ${f} | cut -d'_' -f-3)_space-fs_$(basename ${f} | cut -d"_" -f4-)
  if [[ ! -f ${transform_fs} ]]; then

    print_create_img "${transform_fs}"
    if [[ ${f} == *"layers"* ]]; then
      interp="gen"
    elif [[ ${f} == *"cortex"* ]]; then
      interp="mul"
    else
      interp="nn"
    fi
    cmd=(
      call_antsapplytransforms
      -i 1 
      --${interp}
      "${fs_ref}"
      "${f}"
      "${transform_fs}"
      "${from_fs_to_ses2}"
    )
    print_cmd "${cmd[@]}" && eval "${cmd[@]}"

    if [[ $? != 0 ]]; then
      print_error_msg "$(basename ${0})" "call_antsapplytransforms"
      exit 1
    fi

  else
    print_output_exists "${SUB}" "${transform_fs}"
  fi

done
echo "Done"

#-----------------------------------------------------------------------------
# Step 2; warp all files in FS-space to pycortex space (corrects for pycortex induced offset)
echo
echo "[STEP 2]: map warped FreeSurfer files to Pycortex"
qq=$(find ${outputdir}/${SUB}/warped -type f -name "*space-fs*" -and -name "*.nii.gz" 2>/dev/null)
for f in ${qq[@]}; do

  # use linescanning.utils.replace_string to replace 'space-fs' with 'space-ctx'
  transform_ctx=$(echo ${f} | sed 's,space-fs,space-ctx,')
  if [[ ! -f ${transform_ctx} ]]; then

    print_create_img "${transform_ctx}"
    cmd="call_ctxsurfmove ${SUB} ${f} ${transform_ctx}"
    print_cmd "${cmd}" && eval "${cmd}"

    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "call_ctxsurfmove"
      exit 1
    fi

  else
    print_output_exists "${SUB}" "${transform_ctx}"
  fi

done
echo "Done"

#-----------------------------------------------------------------------------
# Step 3; create the warp that pycortex needs for the viewer
echo
echo "[STEP 3]: create the warp that pycortex needs for the viewer"

if [[ ! -d "${outputdir}/${SUB}/transforms/fs2ctx" ]]; then
  ref=$(find ${outputdir}/${SUB}/warped -type f -name "*space-ctx*" -and -name "*.nii.gz" -print -quit 2>/dev/null)
  if [[ ! -z "${ref}" ]]; then
    cmd=(
      call_ctxtransform
      -s "${SUB}"
      -c "${outputdir}"
      -i "${ref}"
      -w fs2ctx
    )
    print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  fi
fi

echo "Wrote transform to ${outputdir}/${SUB}/transforms/fs2ctx"
echo "Use cortex.Volume(<filename>, subject=\"${SUB}\", xfmname=\"fs2ctx\", cmap=<cmap>)"
echo
echo "Done"

# outro
end_timer
