#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_profiling

Sample the profile values of a particular image using call_nighresprofsamp. Here, we provide the
boundaries-image from nighres.layering module and have the program sample values from a particular
dataset (e.g., T1map) across depth. The first argument specifies where the nighres output is, used
for both the layering and profile sampling. The second argument is the main directory where we will
find the file the we want to sample. The last argument specifies a tag to look for the to-be-sampled
file (e.g., T1map)

Usage:
  spinoza_profiling [arguments] [options] <nighres input> <input folder> <extension for to-be-sampled file>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -i <image>      directly specify an image to sample the profile from. This assumes that the
                  image is in the same space as the specified input subjects. Generally, this is
                  not the case, as each subject has a slightly different space. However, in some
                  scenarios, I can see how this could be useful. E.g., with images in MNI space
                  (although I discourage layerifaction in MNI-space) or you only have 1 subject.

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional:
  <nighres>       parent directory containing the output files of Nighres
                    - \$DIR_DATA_DERIV/nighres/<subject>/<session>/layering/*boundaries*

                      # logic to find boundaries file (nighres_dir is compiled from input folder,
                      # subject ID and session ID)
                      boundaries=\$(
                        find "\${nighres_dir}/layering" \\
                        -type f \\
                        -name "*acq-\${DATA^^}*" \\
                        -and -name "*boundaries.nii.gz"
                      )
  <sample loc.>   directory where the to-be-sampled lives:
                    - If you want to sample T1-values that are reconstructed by the scanner, this 
                      is \$DIR_DATA_HOME (output from 'spinoza_scanner2bids' [module $(get_module_nr spinoza_scanner2bids)]).
                    - If this is data from pymp2rage (output from 'spinoza_scanner2bids' [module 
                      $(get_module_nr spinoza_qmrimaps)]), this is \$DIR_DATA_DERIV/pymp2rage
  <suffix>        suffix to use to look for to-be-sampled dataset (e.g., T1map)

Example:
  spinoza_profiling \$DIR_DATA_DERIV/nighres \$DIR_DATA_HOME T1map
  spinoza_profiling -s 01 -n 2 \$DIR_DATA_DERIV/nighres \$DIR_DATA_DERIV/pymp2rage T1map

Call with master:
  # vanilla (defaults to 'T2starmap')
  master -m $(get_module_nr $(basename ${0}))

  # use -x flag to change suffix
  master -m $(get_module_nr $(basename ${0})) -x T1map

  # directly specify image
  master -m $(get_module_nr $(basename ${0})) -i some_image_space-MNI152NLin6Asym_T1map.nii.gz

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
OW=0
tobesampled=""
while getopts :-:hos:n:i: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        ow)
          OW=1
          ;;            
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;; 
    i)  tobesampled="${OPTARG}"
          ;;                    
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
TOBESAMPLED=${@:$OPTIND+1:1}
TAG=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Profile sampling with Nighres"

# nighres required this module
check_python_package "nighres"

if [[ ! -d ${INPUT} ]]; then
  print_directory_not_exist "WARNING" "${INPUT}" "No nighres-steps have been run yet.."
  continue
fi

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  nighres_dir="${INPUT}/${base_path}"
  sampled_dir="${TOBESAMPLED}/${base_path}"

  #-----------------------------------------------------------------------------
  # Running MASSP with Nighres

  sampled_data="${nighres_dir}/profiling/${base}_acq-${DATA^^}_desc-profile_${TAG}.nii.gz"
  if [[ ! -f "${sampled_data}" ]]; then

    # print header
    print_subject_header ${sub_name}
    print_create_img "${sampled_data}"
    
    #-----------------------------------------------------------------------------
    # find boundaries file
    boundaries=$(
      find "${nighres_dir}/layering" \
      -type f \
      -name "*acq-${DATA^^}*" \
      -and -name "*boundaries.nii.gz" \
      2>/dev/null
    )

    if [[ -z "${boundaries}" ]]; then
      print_file_not_in_dir "${sub_name}" "boundaries" "${nighres_dir}/layering" "Create it with spinoza_layering ($(master -l layering))"
      continue
    fi

    #-----------------------------------------------------------------------------
    # file to sample from
    if [[ ! -z "${tobesampled}" ]]; then
      if [[ ! -f "${tobesampled}" ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "input" "Specified to-be-sampled file ${BOLD_GREEN}${tobesampled}${RESET} does not exist.."
        exit 1
      fi
    else
      tobesampled=$(
        find "${sampled_dir}" \
        -maxdepth 2 \
        -type f \
        -name "*${TAG}*" \
        2>/dev/null
      )

      if [[ -z ${tobesampled} ]]; then
        print_file_not_in_dir "${sub_name}" "sampling [\"*${TAG}\"]" "${sampled_dir}"
        continue
      fi
    fi

    #-----------------------------------------------------------------------------
    # compile command
    cmd=(
      call_nighresprofsamp
      --layerimg "${boundaries}"
      --samplefrom "${tobesampled}"
      --outputdir "${nighres_dir}/profiling"
      --name "${base}_acq-${DATA}_desc-profile_${TAG}"
    )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "call_nighresprofsamp"
      exit 1
    fi

  else
    print_output_exists "${sub_name}" "${sampled_data}"
  fi

done

#-----------------------------------------------------------------------------
# outro
end_timer
