#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_cortexrecon

cortex reconstruction using nighres. Calls on call_nighrescruise; see that file for more 
information on the required inputs. This script is by default in overwrite mode, meaning that the 
files created earlier will be overwritten when re-ran. To disable, run this module as master -m 
<module> -o n

Usage:
  spinoza_cortexrecon [arguments] [options] <project root dir> <prob seg dir> <region>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  <prob seg>      directory containing probabilities of tissue segmentation. By default it will 
                  use the MDGM output, but you can specify your own. E.g., in the case of GdH-
                  pipeline
  -x <kwargs>     Additional commands to be passed to 'cruise_cortex_extraction'. Format should
                  be comma-separated flags as follows: 
                  - if you specify a flag and values | <flag>=<value>
                  - if you specify a flag only | <flag>
                  
                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  This allows bash commands to be translated to python commands
Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional       
  <project>       output folder for nighres
  <region>        region you wish to reconstruct. Should be same as spinoza_extractregions:
                    > left_cerebrum
                    > right_cerebrum
                    > cerebrum
                    > cerebellum
                    > cerebellum_brainstem
                    > subcortex
                    > tissues(anat)
                    > tissues(func)
                    > brain_mask

Example:
  spinoza_cortexrecon \${DIR_DATA_DERIV}/manual_masks \${DIR_DATA_DERIV}/nighres cerebrum
  spinoza_cortexrecon \\
    -s 001 \\
    -n 1 \\
    \${DIR_DATA_DERIV}/nighres \${DIR_DATA_DERIV}/nighres cerebellum

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

  # run with nighres' segmentations rather than combined segmentations
  master -m $(get_module_nr $(basename ${0})) -s 01 -r subcortex -l nighres

  # specify ROI
  master -m $(get_module_nr $(basename ${0})) -s 01 -r subcortex

  # pass kwargs
  master -m $(get_module_nr $(basename ${0})) -s 01 -x max_iterations=100,wm_dropoff_dist=0.5

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
OW=0
kwargs_flag=""
while getopts :-:hos:n:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        ow)
          OW=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;; 
    x)  kwargs_flag="--kwargs ${OPTARG}"
          ;; 
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
REGION=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Cortex reconstruction using CRUISE from Nighres"

# nighres required this module
check_python_package "nighres"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  sub_id=$(get_subject_id "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  input_dir="${INPUT}/${base_path}"
  output_dir="${OUTPUT}/${base_path}"

  #-----------------------------------------------------------------------------
  # Running region extraction with nighres
  if [[ ${input_dir} == *"nighres"* ]]; then
    # we're dealing with a nighres input, which means we need to add an additional 'region'
    p="${input_dir}/region"
    declare -a EXRTACT=(
      "xmask_cr-wm"
      "xproba_cr-wm"
      "xproba_cr-gm"
      "xproba_cr-csf"
    )
  else
    p="${input_dir}"
    declare -a EXRTACT=(
      "inside"
      "wm"
      "gm"
      "csf"
    )
  fi

  # check if input folder exists
  if [[ ! -d ${p} ]]; then
    print_directory_not_exist "${sub_name}" "${p}"
    continue
  fi

  #-----------------------------------------------------------------------------
  # fetch the input based on input folder
  declare -a INPUTS=()
  for r in ${EXRTACT[@]}; do
    file=$(
      find -L "${p}" \
      -type f \
      -name "*acq-${DATA_UPR}*" \
      -and -iname "*-${r}*" \
      -and -not -name "*manual*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )

    if [[ -f "${file}" ]]; then
      INPUTS+=("${file}")
    else
      print_file_not_in_dir "${sub_name}" "${r}" "${p}"
      continue 2
    fi
  done

  if [[ -z "${INPUTS}" ]]; then
    echo -e "${BOLD_CYAN}${sub_name}${RESET}: Did not find required inputs"
    continue
  fi

  #-----------------------------------------------------------------------------
  # set outputs
  output_root="${output_dir}/cruise/${base}_acq-${DATA_UPR}_desc"
  output="${output_root}-cruise_cortex.nii.gz"

  if [[ ! -d "${output_dir}/cruise" ]]; then
    mkdir -p "${output_dir}/cruise"
  fi

  # OVERWRITE ALL CREATED FILES; SHOULD BE DEFAULT AND CAN BE DISABLE BY SPECIFYING MASTER -M <MODULE> -O N
  if [[ ${OW} -eq 1 ]]; then
    if [[ -d "${output_dir}/cruise" ]]; then
      INTRO="Overwrite mode: deleting files with \"${base}_acq-${DATA_UPR}_desc\""
      rm -r ${output_dir}/cruise/${base}_acq-${DATA_UPR}_desc* 2>/dev/null
    fi
  else
    INTRO="Overwrite mode disabled"
  fi
  
  #-----------------------------------------------------------------------------
  # start
  if [[ ! -f "${output}" ]]; then

    # print header
    print_subject_header ${sub_name}
    echo "${INTRO}"

    if [[ ! -f "${output_root}_cruise_cortex.nii.gz" ]]; then

      #-----------------------------------------------------------------------------
      # weighted combination
      if [[ ${COMBINE_SEGMENTATIONS} == "weighted" ]]; then
        # run regular cruise
        print_create_img "${output}"
        cmd=(
          call_nighrescruise
          --mask "${INPUTS[0]}"
          --wm "${INPUTS[1]}"
          --gm "${INPUTS[2]}"
          --csf "${INPUTS[3]}"
          --outputdir "$(dirname ${output_root})"
          --name "$(basename ${output_root})"
          "${kwargs_flag}"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_nighrescruise"
          exit 1
        fi

        #-----------------------------------------------------------------------------
        # create binary mask from CRUISE segmentation
        cruise_mask="${p}/${base}_acq-${DATA_UPR}_desc-cruise_mask.nii.gz"
        echo
        print_line -
        print_create_img "${cruise_mask}"
        cmd=(
          fslmaths
          "${output_root}-cruise_cortex.nii.gz"
          -bin
          "${cruise_mask}"
        )
        
        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "fslmaths"
          exit 1
        fi
      
      #-----------------------------------------------------------------------------
      # hard segmentations
      elif [[ ${COMBINE_SEGMENTATIONS} == "hard" ]]; then

        #-----------------------------------------------------------------------------
        # define output names
        cgb="${output_root}-cruise_cgb.nii.gz"
        gwb="${output_root}-cruise_gwb.nii.gz"

        #-----------------------------------------------------------------------------
        # create WM/GM levelset from probability
        ct=1
        for f in "${cgb}" "${gwb}"; do

          print_create_img "${f}"
          cmd=(
            call_nighresproblevel
            --probability "${INPUTS[ct]}"
            --outputdir "$(dirname ${output_root})"
            --name "$(basename ${output_root})"
          )

          # print and run
          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ ! -f "${output_root}-p2l_surf.nii.gz" || $? -ne 0 ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" "call_nighresproblevel" "${BOLD_GREEN}${f}${RESET} not created"
            exit 1
          else
            mv "${output_root}-p2l_surf.nii.gz" "${f}" 2>/dev/null
          fi

          # update counter
          ((ct++))
        done

        #-----------------------------------------------------------------------------
        # copy cruise image from manual_masks to cruise directory
        file=$(
          find -L "${p}" \
          -type f \
          -name "*acq-${DATA_UPR}*" \
          -and -name "*cruise_cortex.nii.gz" \
          2>/dev/null
        )

        if [[ -f "${file}" ]]; then
          cp "${file}" "${output}" 2>/dev/null
        fi
      else
        echo
        print_line -
        print_error_msg "$(basename ${0})" "call_nighresproblevel" "Unknown method \"${COMBINE_SEGMENTATIONS}\". Specify \"weighted\" or \"hard\" as COMBINE_SEGMENTATIONS in \"${BOLD_GREEN}${CONFIG_FILE}${RESET}\""
        exit 1
      fi 
    else
      print_output_exists "${sub_name}" "${output_root}_cruise_cortex.nii.gz"
    fi
  else
    print_output_exists "${sub_name}" "${output}"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
