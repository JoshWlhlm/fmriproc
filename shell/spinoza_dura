#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_dura

estimate the location of the skull and dura using nighres. You are to specify the path to the input
T1w-images (e.g., pymp2rage), the input INV2 image (e.g., the bias field corrected INV2 in the ANTs
folder, the nighres output folder, and the folder to store the masks.

Usage:
  spinoza_dura [arguments] [options] <anat folder> <INV2 folder> <nighres output> <mask output>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or n)

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional:
  <anat dir>      folder containing the T1w-file
  <inv2 dir>      folder containing the INV2-image
  <nighres out>   output folder for Nighres
  <mask output>   output folder for masks

Example:
  spinoza_dura \${DIR_DATA_HOME} \${DIR_DATA_DERIV}/nighres \${DIR_DATA_DERIV}/manual_masks
  spinoza_dura \\
    -s 001 \\
    -n 1 \\
    \${DIR_DATA_HOME} \${DIR_DATA_DERIV}/nighres \${DIR_DATA_DERIV}/manual_masks

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
OW=0
while getopts :-:hos:n: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        ow)
          OW=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=${OPTARG}
          ;; 
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage && exit 0
fi

T1W=${@:$OPTIND:1}
INV2=${@:$OPTIND+1:1}
OUTPUT=${@:$OPTIND+2:1}
MASKS=${@:$OPTIND+3:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${T1W}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Skull and dura estimation with Nighres"

# nighres required this module
check_python_package "nighres"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  sub_id=$(get_subject_id "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  #-----------------------------------------------------------------------------
  # set paths
  mask_dir="${MASKS}/${base_path}"
  input_dir="${T1W}/${base_path}"
  inv2_dir="${INV2}/${base_path}"
  outdir_dura="${OUTPUT}/${base_path}/dura"
  outdir_skull="${OUTPUT}/${base_path}/skullstrip"

  for dir in "${input_dir}" "${inv2_dir}"; do
    if [ ! -d "${dir}" ]; then
      print_directory_not_exist "${sub_name}" "${dir}"
      continue
    fi
  done
  
  #-----------------------------------------------------------------------------
  # get INV2-image
  if [[ ${DATA} == "MP2RAGEME" ]]; then
    inv2=$(
      find "${inv2_dir}" \
      -type f \
      -name "${sub_name}*" \
      -and -name "*echo-1*" \
      -and -name "*inv-2*" \
      -and -name "*acq-${DATA_UPR}_*" \
      -and -name "*part-mag*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )
    search_for=${DATA_UPR}
  else
    # take the MP2RAGE INV-2 if DATA == AVERAGE
    if [[ ${DATA} == "AVERAGE" ]]; then
      inv2=$(
        find "${inv2_dir}" \
        -type f \
        -name "${sub_name}*" \
        -and -not -name "*echo-*" \
        -and -name "*inv-2*" \
        -and -name "*acq-MP2RAGE_*" \
        -and -name "*part-mag*" \
        -and -name "*.nii.gz" \
        2>/dev/null
      )
    else
      inv2=$(
        find "${inv2_dir}" \
        -type f \
        -name "${sub_name}*" \
        -and -not -name "*echo-*" \
        -and -name "*inv-2*" \
        -and -name "*acq-${DATA_UPR}_*" \
        -and -name "*part-mag*" \
        -and -name "*.nii.gz" \
        2>/dev/null
      )
    fi
    search_for="MP2RAGE"
  fi

  #-----------------------------------------------------------------------------
  # Look for t1w/t1map
  t1w=$(
    find "${input_dir}" \
    -type f \
    -name "${sub_name}*" \
    -and -name "*acq-${DATA_UPR}*" \
    -and -name "*T1w.nii.gz" \
    2>/dev/null
  )

  t1map=$(
    find "${input_dir}" \
    -type f \
    -name "*acq-${DATA_UPR}*" \
    -and -name "*T1map.nii.gz" \
    2>/dev/null
  )

  #-----------------------------------------------------------------------------
  # Set outputs
  output_root="${base}_acq-${DATA_UPR}_desc"
  output_dura="${outdir_dura}/${output_root}-dura_proba.nii.gz"
  output_mask="${MASKS}/${base_path}/${output_root}-dura_orig.nii.gz"

  # check if we should overwrite
  if [[ ${OW} -eq 1 ]]; then
    rm ${output_mask} 2>/dev/null
  fi

  if [[ ! -f "${output_mask}" ]]; then

    # print header
    print_subject_header ${sub_name}

    inv2_mask=$(
      find "${mask_dir}" \
      -type f \
      -name "*${DATA_UPR}*" \
      -and -name "*spm_mask.nii.gz" \
      2>/dev/null
    )
    
    #-----------------------------------------------------------------------------
    # check if INV2 exists
    if [[ -z "${inv2}" ]]; then
      echo -e "${BOLD_CYAN}${sub_name}${RESET}: Missing INV2-image. Check ${inv2_dir} for:"
      echo " \"${sub_name}\""
      echo " \"echo-1\" (if DATA==MP2RAGEME)"
      echo " \"inv-2\""
      echo " \"${search_for}\""
      echo " \"part-mag\""
      continue
    fi

    # and T1w..
    if [[ -z "${t1w}" ]]; then
      print_file_not_in_dir "${sub_name}" "*T1w.nii.gz" "${input_dir}"
      continue
    fi

    # and T1map..
    if [[ -z "${t1map}" ]]; then
      print_file_not_in_dir "${sub_name}" "*T1map.nii.gz" "${input_dir}"
      continue
    fi

    # and brain mask..
    if [[ -z "${inv2_mask}" ]]; then
      print_file_not_in_dir "${sub_name}" "*spm_mask.nii.gz" "${mask_dir}"
      continue
    fi

    #-----------------------------------------------------------------------------
    # create output directory
    if [[ ! -d "${outdir_dura}" ]]; then
      mkdir -p "${outdir_dura}"
    fi

    print_create_img "${output_mask}"

    #-----------------------------------------------------------------------------
    # check if we should overwrite
    if [[ ${OW} -eq 1 ]]; then
      rm "${output_dura}" 2>/dev/null
    fi

    #-----------------------------------------------------------------------------
    # make dura with nighres
    if [[ ! -f "${output_dura}" ]]; then

      out_prob="${outdir_dura}/${output_root}-dura_proba.nii.gz"
      if [[ ! -f "${out_prob}" ]]; then
        echo "Running nighres to estimate the dura"
        echo -e " -inv2: ${BOLD_GREEN}${inv2}${RESET}"
        echo -e " -mask: ${BOLD_GREEN}${inv2_mask}${RESET}"
        echo -e " -out:  ${BOLD_GREEN}${out_prob}${RESET}"

        cmd=(
          call_nighresdura
          --inv2 "${inv2}"
          --mask "${inv2_mask}"
          --outputdir "${outdir_dura}"
          --name "${output_root}"
        )
        
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ -f ${out_prob} ]]; then
          mv "${out_prob}" "${output_dura}"
        else
          if [[ $? -ne 0 ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" "call_nighresdura"
            exit 1
          fi
        fi
      else
        echo "Found nighres output. Renaming it"
        mv "${out_prob}" "${output_dura}"
      fi
    fi

    #-----------------------------------------------------------------------------
    # post-processing
    if [[ -f "${output_dura}" ]]; then

      # thresholding/binarizing
      echo "Thresholding and binarizing $(basename ${output_dura})"
      cmd=(
        fslmaths
        "${output_dura}"
        -thr 0.8
        -bin
        "${output_mask}"
      )

      # print and run
      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${cmd[0]}"
        exit 1
      fi

      # copy header
      cmd=(
        call_copyheader
        "${inv2_mask}"
        "${output_mask}"
      )

      # print and run
      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${cmd[0]}"
        exit 1
      fi
    else
      print_file_not_exist "${sub_name}" "${output_dura}"
    fi
  else
    print_output_exists "${sub_name}" "${output_mask}"
  fi

  #-----------------------------------------------------------------------------
  # skullstripping

  # check if we should overwrite
	output_skullstrip="${outdir_skull}/${output_root}-strip_mask.nii.gz"
  if [[ ${OW} -eq 1 ]]; then
    rm "${output_skullstrip}" 2>/dev/null
  fi

  #-----------------------------------------------------------------------------
  # run call_nighresskullstrip
  if [[ ! -f "${output_skullstrip}" ]]; then

    echo
    print_create_img "${output_skullstrip}"

    if [[ ! -d "${outdir_skull}" ]]; then
      mkdir -p "${outdir_skull}"
    fi

    #-----------------------------------------------------------------------------
    # run
    output_skullnighres="${outdir_skull}/${output_root}-strip_mask.nii.gz"
    if [[ ! -f "${output_skullnighres}" ]]; then
      echo "Running nighres to perform skullstripping"
      cmd=(
        call_nighresskullstrip
        --inv2 "${inv2}"
        --t1w "${t1w}"
        --t1map "${t1map}"
        --outputdir "${outdir_skull}"
        --name "${output_root}"
      )

      # print and run
      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "call_nighresskullstrip"
        exit 1
      fi
    fi
  else
    print_output_exists "${sub_name}" "${output_skullstrip}"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
