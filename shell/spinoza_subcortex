#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source "${SETUP_FILE}"
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_subcortex

Subcortex segmentation using Nighres' MASSP-algorithm. Calls on call_nighresmassp; see that file
for more information on the required inputs.

Usage:
  spinoza_subcortex [options] <project root dir> <prob seg dir> <region> <overwrite>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -j <cpus>           number of cores to use (default is 1)
  -q <queue>          submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -o|--ow             overwrite existing files
  --sge               submit job to cluster

  <anat folder>       folder containing the files required for MASSP. Files should end with:
                        -"*_R1.nii.gz"   > 1/T1map file
                        -"*_R2s.nii.gz"  > 1/T2* file
                        -"*_QSM.nii.gz"  > QSM file
  <output>            output folder (<subject>/[<ses->] will be appended!)

Example:
  spinoza_subcortex DIR_DATA_HOME DIR_DATA_DERIV/nighres
  spinoza_subcortex -s 001 -n 1 DIR_DATA_HOME DIR_DATA_DERIV/nighres

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  echo NOT ENOUGH ARGUMENTS SPECIFIED
  Usage >&2
  exit 1
fi

n_cpus=1
run_local=1

# Check for subject & session flags
while getopts s:n:j:q argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        sge)
          run_local=0
          ;;                                                                  
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac;;    
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;    
    j)  n_cpus=${OPTARG}
          ;;                     
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
SKULL=${@:$OPTIND+1:1}
OUTPUT=${@:$OPTIND+2:1}

if [[ ! -z ${SGE_QUEUE} ]]; then
  QUEUE=${SGE_QUEUE}
else
  QUEUE=${SGE_QUEUE_LONG}
fi

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
#intro
start_timer "Subcortex Parcellation with MASSP from Nighres"

# nighres required this module
check_python_package "nighres"

if [[ ! -d ${INPUT} ]]; then
  print_directory_not_exist "WARNING" "${INPUT}" "No nighres-steps have been run yet.."
  continue
fi

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  input_dir=${INPUT}/${base_path}
  skull_dir=${SKULL}/${base_path}
  output_dir=${OUTPUT}/${base_path}/massp

  for dir in "${input_dir}" "${skull_dir}"; do
    if [ ! -d ${dir} ]; then
      print_directory_not_exist "${sub_name}" "${dir}"
      continue
    fi
  done

  #----------------------------------------------------------------------------------------------------------------------------------------------------------
  # Running MASSP with Nighres

  massp=${output_dir}/${base}_acq-${DATA^^}_desc-massp_label.nii.gz

  if [[ ! -f ${massp} ]]; then

    # print header
    print_subject_header ${sub_name}

    #-----------------------------------------------------------------------------
    # Check if we can mask inputs
    mask=$(find ${DIR_DATA_DERIV}/manual_masks/${base_path} -type f \( -name "*acq-${DATA^^}*" -and -name "*brainmask.nii.gz" \) 2>/dev/null)
    declare -a INPUTS=()

    echo "Should we mask inputs?"
    for i in "R1" "R2s" "QSM"; do
      fn=$(find ${input_dir} -type f \( -name "*${i}.nii.gz" \) 2>/dev/null)

      j=0; for k in ${fn[@]}; do ((j++)); done; if [[ ${j} -ne 1 ]]; then echo -e "${BOLD_CYAN}${sub_name}${RESET}: Found more than 1 file for ${r}"; continue 2; fi

      if [[ -z ${fn} ]]; then
        print_file_not_in_dir "${sub_name}" "*${i}.nii.gz" "${input_dir}"
        continue
      else
        # check if we can mask inputs; otherwise continue as usual
        if [[ ! -z ${mask} ]]; then
          printf " applying mask to ${i}-image; "
          out=${skull_dir}/$(basename ${fn} "_${i}.nii.gz")_desc-skullstrip_${i}.nii.gz
          fslmaths ${fn} -mas ${mask} ${out}
          use_dir=${skull_dir}
          printf "[$(fslstats ${out} -R)]\n"
        else
          use_dir=${input_dir}
        fi
      fi
    done
    echo "Done"
    print_create_img "${massp}"

    if [[ ${run_local} -eq 1 ]]; then
      call_=$(which call_nighresmassp)
      submit=$(generate_submission_command ${SGE_QUEUE_LONG} ${n_cpus} ${base}_acq-${DATA^^}_desc-massp ${DIR_LOGS})
      job="${submit} ${call_}"
    else
      job="call_nighresmassp"
    fi

    ${job} \
      -s ${sub_id} \
      -n ${nr} \
      -i ${use_dir} \
      -o ${output_dir} \
      -b ${base}_acq-${DATA^^}_desc

    if [[ $? != 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "call_nighresmassp"
      exit 1
    fi
  else
    print_output_exists "${sub_name}" "${massp}"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
