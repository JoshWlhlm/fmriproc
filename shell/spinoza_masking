#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_masking

Mask out the dura and skull from the T1-image to reduce noise. It follow Gilles' masking procedure,
by setting the contents of dura ('outside') and other masks ('inside') to zero. The idea is to run
this, run fMRIprep, check segmentations, manually edit it as "\<subject>_ses-1_acq-
MP2RAGE_desc-manualwmseg" or something alike. These 'manualseg' will be taken as 'inside' to boost 
areas that were not counted as brain.

Usage:
  spinoza_masking [arguments] [options] <anat dir> <output dir> <mask dir> <skullstrip dir> 

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -l <lower>      lower percentile (default = 0.01) for call_winsorize
  -u <upper>      upper percentile (default = 0.95) for call_winsorize. NOTE this is more ex-
                  treme than the default for call_winsorize.

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --no-manual     do not do any further manual editing; just combine all masks and apply

Positional:
  <anat dir>      parent directory containing the sub-xxx folders for anatomies
  <output skull>  output folder for masked T1w-image (with skull)
  <mask dir>      folder containing a bunch of masks from previous modules. Should contains files 
                  ending on;
                    -dura:   \"*dura_dil.nii.gz\", \"*cat_dura.nii.gz\", or \"*dura_orig.nii.gz\"
                    -brain:  \"*cat_mask.nii.gz\" or \"*gdh_mask.nii.gz\" 
                    -inv2:   \"*spm_mask.nii.gz\"
                    -sinus:  \"*sinus\"
  <skullstr.>     output folder for brain-extracted output (generally the input for Nighres)

Example:
  spinoza_masking \\
    \$DIR_DATA_DERIV/pymp2rage \\
    \$DIR_DATA_DERIV/masked_mp2rage \\
    \$DIR_DATA_DERIV/manual_masks \\
    \$DIR_DATA_DERIV/skullstripped

  spinoza_masking \\
    -s 01 \\
    -n 1 \\
    \$DIR_DATA_DERIV/pymp2rage \\
    \$DIR_DATA_DERIV/masked_mp2rage \\
    \$DIR_DATA_DERIV/manual_masks \\
    \$DIR_DATA_DERIV/skullstripped

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

  # skip ITK-snap
  master -m $(get_module_nr $(basename ${0})) -s 01 --no-manual

  # specify lower/upper bound for call_winsorize
  master -m $(get_module_nr $(basename ${0})) -s 01 --no-manual -l 0.05 -u 0.95

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
OW=0
man_flag=""
lower=0.01
upper=0.95
while getopts :-:hos:n:l:u: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        no-manual)
          man_flag="--no-manual"
          ;;         
        ow)
          OW=1
          ;;                                                                                                  
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;
    l)  lower=${OPTARG}
          ;;
    u)  upper=${OPTARG}
          ;;          
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
MASKS=${@:$OPTIND+2:1}
SKULL=${@:$OPTIND+3:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Make out garbage (sagittal sinus/tentorium)"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  
  # set ses and session flag
  if [[ ! -z ${ses} ]]; then
    nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
    ses_flag="--ses ${nr}"
  else
    base_path=${sub_name}
    base=${sub_name}
    ses_flag=""
  fi

  #-----------------------------------------------------------------------------
  # set paths
  input_dir="${INPUT}/${base_path}"
  output_dir="${OUTPUT}/${base_path}/anat"
  mask_dir="${MASKS}/${base_path}"
  skull_dir="${SKULL}/${base_path}"

  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  else

    #-----------------------------------------------------------------------------
    # find bunch of files
    search_for_mask="cat_dura"

    # T1w file
    t1w_fn=$(
      find "${input_dir}" \
      -type f \
      -name "${sub_name}*" \
      -and -name "*acq-${DATA^^}*" \
      -and -name "*T1w.nii.gz" \
      2>/dev/null
    )

    # T1map file
    t1m_fn=$(
      find "${input_dir}" \
      -type f \
      -name "*acq-${DATA^^}*" \
      -and -name "*T1map.nii.gz" \
      2>/dev/null
    )

    # masked anat
    masked_anat=$(
      find "${output_dir}" \
      -maxdepth 1 \
      -type f \
      -name "*${DATA^^}*" \
      -and -name "*masked_T1w.nii.gz" \
      2>/dev/null
    )

    # mask
    brain_mask=$(
      find "${mask_dir}" \
      -type f \
      -name "*${DATA^^}*" \
      -and -name "*${search_for_mask}*" \
      2>/dev/null
    )

    # overwrite mode
    if [[ ${OW} -eq 1 ]]; then
      rm -r "${output_dir}/"*acq-${DATA^^}* 2>/dev/null
      rm -r "${masked_anat}" 2>/dev/null
    fi

    #-----------------------------------------------------------------------------
    # masking procedure
    if [[ -f "${masked_anat}" ]]; then
      print_output_exists "${sub_name}" "${masked_anat}"
    else
      if [[ ! -f "${masked_anat}" ]]; then
        if [[ ! -f ${t1w_fn} ]]; then
          print_file_not_in_dir "${sub_name}" "${sub_name}*, *acq-${DATA^^}*, *T1w.nii.gz" "${input_dir}"
          continue
        fi
        
        # print header
        print_subject_header ${sub_name}

        #-----------------------------------------------------------------------------
        # if we cannot do masking, then just copy the input image as "masked" image
        if [[ ! -z "${brain_mask}" ]]; then
          cmd=(
            call_gdhmasking
            "${man_flag}"
            "${ses_flag}"
            --sub "${sub_name}"
            --t1 "${t1w_fn}"
          )

          # echo command
          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ $? -ne 0 ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" "call_gdhmasking"
            exit 1
          fi

          #-----------------------------------------------------------------------------
          # post-processing if file exists

          # masked anat
          masked_anat=$(
            find "${output_dir}" \
            -maxdepth 1 \
            -type f \
            -name "*${DATA^^}*" \
            -and -name "*masked_T1w.nii.gz" \
            2>/dev/null
          )
          
          # check if file was created..
          if [[ ! -z "${masked_anat}" ]]; then
            echo
            print_line -
            # truncate image intensities
            echo "Running post-processing to fix intensities and datatype"
            cmd=(
              call_wsd
              -l ${lower}
              -u ${upper}
              "${masked_anat}"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "call_wsd"
              exit 1
            fi
          fi
        else
          echo "Could not find \"${search_for_mask}\" mask; copying input image to ${output_dir}"
          if [[ ! -d "${output_dir}" ]]; then
            mkdir -p "${output_dir}"
          fi
          cp -r "${t1w_fn}" "${output_dir}" 2>/dev/null
          continue 3
        fi
      else
        print_output_exists "${sub_name}" "${masked_anat}"
      fi
    fi

    #-----------------------------------------------------------------------------
    # skullstripping procedure
    bet_t1w="${skull_dir}/${base}_acq-${DATA^^}_desc-skullstrip_T1w.nii.gz"
    bet_t1m="${skull_dir}/${base}_acq-${DATA^^}_desc-skullstrip_T1map.nii.gz"

    # check if we should overwrite
    if [[ ${OW} -eq 1 ]]; then
      rm -r "${bet_t1m}" "${bet_t1w}" 2>/dev/null
    fi

    if [[ ! -f "${bet_t1w}" ]] || [[ ! -f "${bet_t1m}" ]]; then

      if [[ ! -d "${skull_dir}" ]]; then
        mkdir -p "${skull_dir}"
      fi

      #-----------------------------------------------------------------------------
      # find bunch of files

      # masked_anat
      masked_anat=$(
        find "${output_dir}" \
        -type f \
        -name "*${DATA^^}*" \
        -and -name "*masked_T1w.nii.gz" \
        2>/dev/null
      )

      # spm_mask
      mask_img=$(
        find "${mask_dir}" \
        -type f \
        -name "*acq-${DATA^^}_*" \
        -and -name "*spm_mask.nii.gz" \
        2>/dev/null
      )

      # t1 map
      t1map=$(
        find "${input_dir}" \
        -type f \
        -and -name "*acq-${DATA^^}_*" \
        -name "*T1map.nii.gz" \
        2>/dev/null
      )

      # check if stuff exists
      if [[ ! -z "${mask_img}" ]]; then
        echo
        print_line -
        echo "Skullstripping files for mgdm-input"
        inputs=("T1w" "T1map")
        ct=1
        for f in "${masked_anat}" "${t1map}"; do
          if [[ ! -z "${f}" ]]; then
            # echo " apply mask to masked T1-weighted image"
            cmd=(
              fslmaths
              "${f}"
              -mas "${mask_img}"
              "${skull_dir}/${base}_acq-${DATA^^}_desc-skullstrip_${inputs[${ct}]}.nii.gz"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "fslmaths" "Making failed for ${BOLD_RED}${inputs[$ct]}${RESET}"
              exit 1
            fi

            ((ct++))
          fi
        done
      else
        print_file_not_in_dir "${sub_name}" "*acq-${DATA^^}*, *spm_mask.nii.gz" "${mask_dir}"
      fi
      echo "Done"
    fi
  fi
done

#-----------------------------------------------------------------------------
# the dataset_description file is required by fMRIprep, so create a symlink to 
# masked_<> directory to be able to input this directory as project root for
# fMRIprep
if [[ -f "${DIR_DATA_HOME}/dataset_description.json" ]]; then
  if [[ ! -f "${OUTPUT}/dataset_description.json" ]]; then
    ln -s "${DIR_DATA_HOME}/dataset_description.json" "${OUTPUT}/dataset_description.json" 2>/dev/null

    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      echo "WARNING: could not create symlink for dataset_description; this might result in problems with fMRIprep!"
    fi
  fi
fi

#-----------------------------------------------------------------------------
# outro
end_timer
