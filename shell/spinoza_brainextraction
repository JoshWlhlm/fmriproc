#!/bin/bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_brainextraction

wrapper for brain extraction with ANTs, FSL, or CAT12 If you use ANTs, specify a prefix; if you 
use FSL, specify an output name. Not case sensitive (i.e., you can use ANTs/ants or FSL/fsl). 
Assumes that if you select FSL, we brain extract the INV2 image and if we select ANTs/CAT12, we 
brain extract the mp2rage T1w with bias field correction. If you want to brain extract something 
else, either use call_fslbet, call_antsbet, or call_cat12. It performs N4 biasfield correction 
internally. Make sure you added the location of antsBrainExtraction.sh to your path e.g., in your 
~/.bash_profile : \"export PATH=PATH:/directory/with/antsBrainExtraction.sh\"

Usage:
  spinoza_brainextraction [arguments] [options] <input dir> <skullstrip output> <mask output> 
  <ants/FSL/cat12>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or n)
  -l <lower>      lower percentile (default = 0.01) for call_winsorize
  -u <upper>      upper percentile (default = 0.99) for call_winsorize

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --full          do full processing with CAT12 including iterative SANLM filtering and bias 
                  correction. Default is just tissue segmentation. 
  --fs            use rawavg.mgz from FreeSurfer; overwrites the specified input
                  directory 
  --fprep         use desc-preproc_T1w from fMRIprep. The input is linked the '-n' flag

Positional:
  <input>         directory for inputs
  <skullstrip>    directory for skull-stripped outputs
  <mask>          directory for masks
  <software>      which software to use: ants|FSL|CAT12

Example:
  spinoza_brainextraction dir/to/t1w dir/to/skullstrip /dir/to/masks ants
  spinoza_brainextraction -o dir/to/pymp2rage dir/to/cat12 /dir/to/masks cat12
  spinoza_brainextraction -s 01,02 -n 2 dir/to/inv2 dir/to/skullstrip /dir/to/masks inv2

---------------------------------------------------------------------------------------------------

USAGE

}

# function to rename FSL output
rename_fsl_output() {
  local input="${1}"
  local fsl_name="${2}"
  local new_name="${3}"

  if [[ -f "${fsl_name}" ]]; then
    mv "${fsl_name}" "${new_name}" 2>/dev/null
    cmd=(
      call_copyheader
      "${input}"
      "${new_name}"
    )

    print_cmd "${cmd}" && eval "${cmd}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -  
      print_error_msg "$(basename ${0})" "call_copyheader" "Failed for target image ${BOLD_GREEN}${new_name}${RESET}"
      exit 1
    fi
  fi
}

# Check for subject & session flags
OW=0
mode=""
use_fs=0
use_fprep=0
lower=0.01
upper=0.99
while getopts :-:hos:n:m:u:l: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        full)
          mode="--full"
          ;;
        fs)
          use_fs=1
          ;;          
        fprep)
          use_fprep=1
          ;;           
        ow)
          OW=1
          ;;            
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;; 
    o)  OW=1
          ;;
    l)  lower=${OPTARG}
          ;;
    u)  upper=${OPTARG}
          ;;               
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
SKULL=${@:$OPTIND+2:1}
SOFTWARE=${@:$OPTIND+3:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ ${SOFTWARE,,} != "ants" ]] && [[ ${SOFTWARE,,} != "fsl" ]] && [[ ${SOFTWARE,,} != "cat12" ]]; then
  echo "  Software = \"${SOFTWARE}\". Please use ants, fsl, cat12. Exiting script"
  exit 1
fi

#-----------------------------------------------------------------------------
# Intro
start_timer "New brain extraction using \"${SOFTWARE^^}\""

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  sub_id=$(get_subject_id "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  INPUTDIR=${INPUT}/${base_path}
  BET=${OUTPUT}/${base_path}
  MASKS=${SKULL}/${base_path}

  # check if input directory exists
  if [[ ${use_fprep} -eq 0 && ${use_fs} -eq 0 ]]; then
    if [[ ! -d ${INPUTDIR} ]]; then
      if [[ ${use_fs} -eq 0 ]]; then
        print_directory_not_exist "${sub_name}" "${INPUTDIR}"
        exit 1
      fi
    fi
  fi
  
  if [ ! -d ${MASKS} ]; then
    mkdir -p ${MASKS}
  fi

  inv2_mask=$(
    find -L "${INPUTDIR}" \
    -type f \
    -name "*brain_mask.nii.gz" \
    2>/dev/null
  )
  if [[ ! -z ${inv2_mask} ]]; then
    cp ${inv2_mask} ${MASKS}/${base}_acq-${DATA^^}_desc-spm_mask.nii.gz 2>/dev/null
  fi

  # Decide input/output/command based on the third argument flag (FSL/ANTs)
  if [[ ${SOFTWARE,,} == "ants" ]]; then

    input=$(
      find -L "${INPUTDIR}" \
      -type f \
      -name "*T1w*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )
    if [[ -f ${input} ]]; then

      declare -a OUT=(brain mask)
      final_brain=${BET}/${base}_acq-${DATA^^}_desc-ants_brain_T1w.nii.gz
      final_mask=${MASKS}/${base}_acq-${DATA^^}_desc-ants_mask.nii.gz

      # extract base
      base=${final_brain%_brain_T1w.nii.gz}
      ants_brain="${base}_BrainExtractionBrain.nii.gz"
      ants_mask="${base}_BrainExtractionMask.nii.gz"

      if [[ ! -f "${final_brain}" ]]; then

        # print header
        print_subject_header ${sub_name}
        
        echo "ANTs was selected, using following parameters:"
        echo -e " -input     = ${BOLD_GREEN}$(basename ${input})${RESET}"
        echo -e " -prefix    = ${base}_"

        cmd=(
          call_antsbet
          "${input}"
          "${base}_"
        )

        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -  
          print_error_msg "$(basename ${0})" "call_antsbet"
          exit 1
        fi

        if [[ -f "${ants_brain}" ]]; then
          if [[ ! -f "${final_brain}" ]]; then
            mv "${ants_brain}" "${final_brain}" 2>/dev/null
          else
            print_output_exists "${sub_name}" "${ants_brain}"
          fi
        else
          echo "Could not find ANTs output in $(dirname ${ants_brain})"
        fi

        if [[ -f ${ants_mask} ]]; then
          if [[ ! -f ${final_mask} ]]; then
            mv ${ants_mask} ${final_mask}
          else
            echo "$(basename ${final_mask}) already present"
          fi
        else
          echo
          print_line -  
          print_error_msg "$(basename ${0})" "antsBrainExtraction.sh" "Could not find ANTs output in ${BOLD_GREEN}$(dirname ${ants_mask})${RESET}"
          exit 1
        fi

        # Delete affine file if present
        if [ -f $(dirname ${final_brain})/*.mat ]; then
          rm -r $(dirname ${final_brain})/*.mat
        fi

        # Orient the output according to fixed image
        echo "copying header info from $(basename ${input}) image"
        cmd=(
          call_copyheader
          "${input}"
          "${final_brain}"
        )

        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -  
          print_error_msg "$(basename ${0})" "call_antsbet"
          exit 1
        fi
      else
        print_output_exists "${sub_name}" "${final_brain}" "Skipping brain extraction"
      fi
    else
      print_directory_not_exist "${sub_name}" "${INPUTDIR}"
      continue
    fi

  elif [[ ${SOFTWARE,,} == "fsl" ]]; then

    # fetch input
    input=$(
      find -L "${INPUTDIR}" \
      -type f \
      -name "*inv-2*" \
      -and -name "*${DATA^^}*" \
      2>/dev/null
    )

    # define outputs
    output_root=${BET}/${base}_acq-${DATA^^}_inv-2_desc-bet
    output_brain=${output_root}_brain.nii.gz
    output_mask=${MASKS}/$(basename ${output_brain} _brain.nii.gz)_mask.nii.gz
    output_skull=${MASKS}/$(basename ${output_brain} _brain.nii.gz)_skull.nii.gz
    output_outside=${MASKS}/$(basename ${output_brain} _brain.nii.gz)_outside.nii.gz

    if [[ ! -f "${output_mask}" ]]; then

      if [[ ! -z "${input}" ]]; then

        # print header
        print_subject_header ${sub_name}

        # create directories
        for d in "${BET}" "${MASKS}"; do
          if [[ ! -d "${d}" ]]; then
            mkdir -p "${d}"
          fi
        done

        echo "FSL was selected, using following parameters:"
        echo -e " -input     = ${BOLD_GREEN}$(basename ${input})${RESET}"
        echo -e " -output    = ${BOLD_GREEN}$(basename ${output_root})${RESET}"

        # Don't generate segmented output, only mask (as per specification of "n" as 3rd argument in ./call_fslbet.sh)
        cmd=(
          call_fslbet
          "${input}"
          "${output_root}"
          "y"
        )

        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -  
          print_error_msg "$(basename ${0})" "call_fslbet"
          exit 1
        fi

        # rename output
        rename_fsl_output "${input}" "${output_root}.nii.gz" "${output_brain}"
        rename_fsl_output "${input}" "${output_root}_mask.nii.gz" "${output_mask}"
        rename_fsl_output "${input}" "${output_root}_skull_mask.nii.gz" "${output_skull}"
        rename_fsl_output "${input}" "${output_root}_skull_mask.nii.gz" "${output_skull}"

        # inverse mask of head
        if [[ -f ${output_root}_outskin_mask.nii.gz ]]; then
          cmd=(
            fslmaths
            "${output_root}_outskin_mask.nii.gz"
            -binv
            "${output_outside}"
          )

          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ $? -ne 0 ]]; then
            echo
            print_line -  
            print_error_msg "$(basename ${0})" "fslmaths"
            exit 1
          fi

          cmd=(
            call_copyheader 
            "${input}"
            "${output_outside}"
          )

          print_cmd "${cmd}" && eval "${cmd}"
          if [[ $? -ne 0 ]]; then
            echo
            print_line -  
            print_error_msg "$(basename ${0})" "call_copyheader" "Failed for target image ${BOLD_GREEN}${output_outside}${RESET}"
            exit 1
          fi
        fi

        # clean up directory
        echo "Cleaning up directory"
        find "$(dirname "${output_brain}")" \
          -type f \
          \( -name '*skull*' -o -name '*outskin*' -o -name '*mesh*' \) \
          ! -name '*brain*' \
          -exec rm -f {} +
        echo "Done"
      else
        if [[ -z ${input} ]]; then
          print_file_not_in_dir "${sub_name}" "*acq-${DATA^^}*, *inv-2*" "${INPUTDIR}"
        fi
      fi
    else
      if [[ -f ${output_mask} ]]; then
        print_output_exists "${sub_name}" "${output_mask}"
      fi
    fi
  elif [[ ${SOFTWARE,,} == "cat12" ]]; then

    # define outputs
    brainmask="${MASKS}/${base}_acq-${DATA^^}_desc-cat_mask.nii.gz"
    spm="${MASKS}/${base}_acq-${DATA^^}_desc-spm_mask.nii.gz"
    corrected_t1w="${BET}/${base}_acq-${DATA^^}_T1w.nii.gz"
    duramask="${MASKS}/${base}_acq-${DATA^^}_desc-cat_dura.nii.gz"

    # overwrite mode
    if [[ ${OW} -eq 1 ]]; then
      if [[ -f "${brainmask}" ]]; then
        rm -r "${brainmask}"
      fi

      if [[ -d $(dirname "${corrected_t1w}") ]]; then
        rm -r $(dirname "${corrected_t1w}")
      fi
    fi
    
    # start loop
    if [[ ! -f "${corrected_t1w}" ]]; then

      # print header
      print_subject_header ${sub_name}

      # create BIDS-compatible output directory
      if [[ ! -d $(dirname "${corrected_t1w}") ]]; then
        mkdir -p $(dirname "${corrected_t1w}")
      fi

      # decide on input; convert FreeSurfer file if necessary
      rename_base=0
      if [[ ${use_fs} -eq 1 ]]; then
        in_dir="${SUBJECTS_DIR}/${sub_name}/mri"
        if [[ ! -d "${in_dir}" ]]; then
          echo
          print_line -  
          print_error_msg "$(basename ${0})" "FreeSurfer" "Directory ${BOLD_GREEN}${in_dir}${RESET} does not exist"
          exit 1
        fi

        echo -e "Using ${BOLD_RED}FreeSurfer${RESET} input"
        fs_anat="${in_dir}/rawavg.mgz"
        fs_nii="${in_dir}/rawavg.nii.gz"
        rename_base=1
        if [[ ! -f ${fs_nii} ]]; then
          if [[ -f ${fs_anat} ]]; then
            cmd=(
              call_mriconvert
              "${fs_anat}"
            )

            print_cmd "${cmd}" && eval "${cmd}"
            if [[ $? -ne 0 || ! -f "${fs_nii}" ]]; then
              print_error_msg "$(basename ${0})" "call_mriconvert"
              exit 1
            else
              input="${fs_nii}"
            fi              
          fi
        else
          print_directory_not_exist "${sub_name}" "${fs_anat}"
          exit 1
        fi
      elif [[ ${use_fprep} -eq 1 ]]; then
        # use fMRIPrep anatomy
        echo -e "Using ${BOLD_RED}fMRIprep${RESET} input"
        in_dir="${DIR_DATA_DERIV}/fmriprep/${base_path}/anat"
        if [[ ! -d ${in_dir} ]]; then
          print_directory_not_exist "${sub_name}" "${in_dir}" "Run fMRIPrep first.."
          exit 1
        fi

        # find input
        input=$(
          find -L "${in_dir}" \
          -type f \
          -name "${base}*" \
          -and -name "*_desc-preproc_T1w.nii.gz" \
          -and -not -name "*space*" \
          2>/dev/null
        )
        rename_base=1
      else
        # use T1w from specified input folder
        input=$(
          find -L "${INPUTDIR}" \
          -type f \
          -name "*T1w*" \
          -and -name "*${DATA^^}*" \
          -and -name "*.nii.gz" \
          2>/dev/null
        )
      fi
    
      if [[ ! -z ${input} ]]; then

        # find spm mask
        mask_img=$(
          find -L "${INPUTDIR}" \
          -type f \
          -name "mask*" \
          -print \
          -quit \
          2>/dev/null
        )

        if [[ -z "${mask_img}" ]]; then

          # create directories
          for d in "${BET}" "${MASKS}"; do
            if [[ ! -d "${d}" ]]; then
              mkdir -p "${d}"
            fi
          done

          # run CAT12
          if [[ ! -f "${brainmask}" ]]; then
            cmd=(
              call_cat12
              "${mode}"
              -s "${SPM_PATH}"
              "${input}"
              "${BET}"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "call_cat12"
              exit 1
            fi

            # rename might fail on MacOS!
            if [[ ${rename_base} -eq 1 ]]; then 
              cmd="rename $(basename ${input} .nii.gz) ${base}_acq-${DATA^^}_T1w ${BET}/*"
              ${cmd} 2>dev/null
            fi

            # copy mask to manual_mask folder
            mask_img=$(
              find -L "${BET}" \
              -type f \
              -name "mask*" \
              -print \
              -quit \
              2>/dev/null
            )
            
            if [[ ! -z "${mask_img}" ]]; then
              cp "${mask_img}" "${brainmask}" 2>/dev/null
            fi
          
          else
            echo "${BOLD_GREEN}$(basename ${brainmask})${RESET} already exists. Skipping CAT12"
          fi
        else
          echo "Found existing output"
        fi

        # this gets T1-weighted and T1map in one directory for spinoza_masking
        t1map=$(
          find -L "${INPUTDIR}" \
          -type f \
          -name "*T1map*" \
          -and -name "*${DATA^^}*" \
          -and -name "*.nii.gz" \
          2>/dev/null
        )

        if [[ ! -z "${t1map}" ]]; then
          echo "Copying T1map needed for spinoza_segmentmgdm"
          cp "${t1map}" "${BET}" 2>/dev/null
        else
          echo "WARNING: could not copy T1map to output directory; this might result in problems with MGDM"
        fi

        # if mode == FULL; clip and rescale m-image if needed:
        biascorr=$(
          find -L "${BET}" \
          -type f \
          -name "m${sub_name}*" \
          2>/dev/null
        )
        if [[ ! -z ${biascorr} ]]; then

          # Apply mask to T1w/T1map for MDGM input
          mask_img=$(
            find -L "${BET}" \
            -type f \
            -name "mask*" \
            -print \
            -quit \
            2>/dev/null
          )
          if [[ ! -z ${mask_img} ]]; then
            cp "${mask_img}" "${brainmask}"
          fi

          # CAT12 can introduce background stuff; mask that out with SPM-mask
          spm_mask=$(
            find -L "$(dirname ${input})" \
            -type f \
            -name "*spm_mask*" \
            -and -name "*.nii.gz" \
            -print \
            -quit \
            2>/dev/null
          )
          if [[ ! -z "${spm_mask}" ]]; then
            echo "Getting rid of CAT12-induced background with SPM-mask"

            cmd=(
              call_rmbackground
              -t "${biascorr}"
              -m "${spm_mask}"
              -i "${input}"
              -o "${corrected_t1w}"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              echo
              print_line -
              print_error_msg "$(basename ${0})" "call_rmbackground"
              exit 1
            fi

            echo "Running post-processing to fix intensities and datatype"
            cmd=(
              call_wsd
              -l "${lower}"
              -u "${upper}"
              "${corrected_t1w}"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ ! -f "${corrected_t1w}" || $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "call_wsd"
              exit 1
            fi

            if [[ ! -d $(dirname ${spm}) ]]; then
              mkdir -p $(dirname ${spm})
            fi
            cp ${spm_mask} ${spm} 2>/dev/null
          fi
        else
          echo -e "Could not find m*-image; running ${BOLD_BLUE}call_wsd${RESET} on ${BOLD_GREEN}${input}${RESET}"
          cmd=(
            call_wsd
            -l "${lower}"
            -u "${upper}"
            "${input}"
            "${BET}/$(basename ${input})"
          )

          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ ! -f "${corrected_t1w}" || $? -ne 0 ]]; then
            print_error_msg "$(basename ${0})" "call_wsd"
            exit 1
          fi
        fi
      else
        if [[ -z ${input} ]]; then
          print_file_not_in_dir "${sub_name}" "*acq-${DATA^^}*, *T1w.nii.gz" "${INPUTDIR}"
          exit 1
        fi
      fi
    else
      print_output_exists "${sub_name}" "${corrected_t1w}" "Skipping CAT12. Use \"--ow\" to overwrite CAT12/*cat_mask.nii.gz"
    fi

    # still copy SPM-mask even if heavy CAT12-processing was turned off
    spm_mask=$(
      find -L ${INPUTDIR} \
      -type f \
      -name "*spm_mask*" \
      -and -name "*.nii.gz" \
      2>/dev/null
    )

    IFS=$'\n' spm_sorted=($(sort <<<"${spm_mask[*]}"))
    unset IFS 
    count=0; for ii in ${spm_sorted[@]}; do ((count++)); done
    if [[ ${count} -gt 1 ]]; then
      echo "Found more than 1 files with \"spm_mask\" and \".nii.gz\" (${count})"
      for ii in ${spm_sorted[@]}; do
        echo " ${ii}"
      done
      continue
    fi

    if [[ ! -z ${spm_mask} ]]; then
      cp "${spm_mask}" "${spm}" 2>/dev/null
    fi

    # the difference mask between the CAT12-mask and SPM-mask is already a pretty good dura mask.
    if [[ -f "${spm}" && -f "${brainmask}" ]]; then
      cmd=(
        fslmaths
        "${spm}"
        -sub "${brainmask}"
        -thr 0
        "${duramask}"
      )

      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "fslmaths"
        exit 1
      fi      
      echo -e "Created ${BOLD_GREEN}${duramask}${RESET}"
    fi

    # If we do not have INV2 images, we did not run spinoza_qmrimaps. So, we dont have a cat_dura 
    # mask. 
    # If we do have a mni_sinus mask (from T2; spinoza_sinusfrommni), we can copy that one as 
    # cat_dura so spinoza_masking won't crash
    sinus_out="${MASKS}/${base}_acq-${DATA^^}_desc-mni_sinus.nii.gz"
    if [[ ! -f "${duramask}" ]]; then
      if [[ -f "${sinus_out}" ]]; then
        cp "${sinus_out}" "${duramask}" 2>/dev/null
      fi
    fi
  else
    echo "No valid argument was specified. Please use ANTs/ants or FSL/fsl. Exiting script"
    exit 1
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
