#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source ${SETUP_FILE}
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------------
spinoza_averagesanatomies

This script takes the MP2RAGE and MEMP2RAGE-derived T1-weighted images to calculate the average. This re-
sults in an image that takes advantage of the better WM/GM contrast of the MP2RAGE and the QSM-properties
of the MEMP2RAGE sequence. This will only happen if you have two elements in the ACQ variable of the setup 
script and if the DATA-variable is set to "AVERAGE"

Usage:
  spinoza_averagesanatomies [options] <anat folder> <output folder>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  <anat directory>    directory containing the files to be registered
  <output>            path to directory where registration file/outputs should be stored

Example:
  spinoza_averagesanatomies DIR_DATA_DERIV DIR_DATA_DERIV
  spinoza_averagesanatomies -s 001 -n 1 DIR_DATA_DERIV DIR_DATA_DERIV

---------------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
while getopts s:n: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
#intro
start_timer "Averaging `for ii in ${ACQ[@]}; do echo $ii; done` images"

#-----------------------------------------------------------------------------
# Run it

for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # check if input directory was pymp2rage or not
  if [[ ${INPUT} != *"pymp2rage"* ]]; then
    input_dir=${INPUT}/${base_path}/anat
  else
    input_dir=${INPUT}/${base_path}
  fi
  
  output_dir=${OUTPUT}/${base_path}

  if [ ! -d ${input_dir} ]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi

  #-------------------------------------------------------------------------------------------------
  # calculate the averages of UNI T1, INV1, and INV2
  print_subject_header ${sub_name}

  if [[ ! -d ${output_dir} ]]; then
    mkdir -p ${output_dir}
  fi

  if [[ ${DATA^^} != "AVERAGE" ]]; then
    echo "${DATA^^} != \"AVERAGE\".. Check spinoza_setup first.."
    exit 1
  fi

  declare -a OUTPUTS=(T1w T1map)
  declare -a MAX=("4095" "5050")

  for i in ${OUTPUTS[@]}; do

    out=${output_dir}/${base}_acq-${DATA}_${i}.nii.gz
    if [[ ! -f ${out} ]]; then

      # look for warped files
      in_files=(`find "${input_dir}" -type f \( -name "*space-*" -and -name "*${i}.nii.gz" \) | sort 2>/dev/null`)
      if [[ ! -z ${in_files} ]]; then
        # MP2RAGE+MP2RAGEME if number of "space-" files is 1
        if [[ ${#in_files[@]} -eq 1 ]]; then
          in_1=`find "${input_dir}" -type f \( -name "*acq-${ACQ[0]^^}_*" -and -name "*${i}.nii.gz" \) 2>/dev/null`
          in_2=`find "${input_dir}" -type f \( -name "*space-${ACQ[0]^^}*" -and -name "*acq-${ACQ[1]^^}_*" -and -name "*${i}.nii.gz" \) 2>/dev/null`
          cmd="call_calculatemean ${in_1} ${in_2} ${out}"
        else
          # Multiple MP(2)RAGE(S) if number of "space-" files >1
          ref=$(find "${input_dir}" -type f \( -name "*acq-${ACQ[0]^^}_*" -and -name "*run-1*" -and -name "*${i}.nii.gz" \) | sort 2>/dev/null)
          cmd="call_calculatemean ${ref} ${in_files[@]} ${out}"
        fi
        
        eval $cmd
      else
        echo "ERROR in $(basename ${0}): could not find files with \"*acq-${ACQ[0]^^}_*\", \"*space-*\", and \"*${i}.nii.gz\" in ${BOLD_GREEN}${input_dir}${RESET}"
        exit 1
      fi

      if [[ ! -f ${out} ]]; then
        echo "ERROR in $(basename ${0}): \"${out}\" not created.."
        exit 1
      fi
      
      # check if registration induced NANs
      NAN=`fslstats ${out} -R | awk '{print $1}'`
      if [[ ${NAN} == "-nan" ]]; then
        echo "Found NaNs, replacing these values with zeroes"
        fslmaths ${out} -nan ${out}
      fi

      # check if registration induced NANs
      ZERO=`fslstats ${out} -R | awk '{print $1}'`
      if [[ ${ZERO} != "0" ]]; then

        if [[ ${i} == "T1w" ]]; then
          max=${MAX[0]}
        elif [[ ${i} == "T1map" ]]; then
          max=${MAX[1]}
        fi

        echo "Rescaling ${i}-image to [0, ${max}] with ImageMath"
        call_rescale ${out} 0 ${max}

      fi
    else
      print_output_exists "${sub_name}" "${out}"
    fi
  done

  # check if we can copy SPM mask from MP2RAGE
  spm_mask=`find ${input_dir} -type f \( -name "*acq-${ACQ[0]^^}_*" -and -name "*desc-spm_mask.nii.gz" \) 2>/dev/null`
  if [ ! -z ${spm_mask} ]; then
  
    # sort so we can verify there's only 1 file
    IFS=$'\n' spm_imgs=($(sort <<<"${spm_mask[*]}"))
    unset IFS

    # take first image regardless..
    spm=${spm_imgs[0]}

    # rename
    echo -e "Creating ${BOLD_GREEN}${base}_acq-${DATA}_desc-spm-mask.nii.gz${RESET}"
    cp ${spm} ${output_dir}/${base}_acq-${DATA}_desc-spm_mask.nii.gz 2>/dev/null
  fi

  t2_newspace=`find ${input_dir} -type f \( -name "*acq-3DTSE*" -and -name "*space*" \) 2>/dev/null`
  if [ ! -z ${t2_newspace} ]; then
    cp ${t2_newspace} ${output_dir}/${base}_acq-${DATA}_T2w.nii.gz 2>/dev/null
  fi  

done

#-----------------------------------------------------------------------------
# outro
end_timer
