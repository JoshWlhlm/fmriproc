#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source ${SETUP_FILE}
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------------
spinoza_averagesanatomies

This script takes the MP2RAGE and MEMP2RAGE-derived T1-weighted images to calculate the average. This re-
sults in an image that takes advantage of the better WM/GM contrast of the MP2RAGE and the QSM-properties
of the MEMP2RAGE sequence. This will only happen if you have two elements in the ACQ variable of the setup 
script and if the DATA-variable is set to "AVERAGE"

Usage:
  spinoza_averagesanatomies [arguments] [options] <anat folder> <output folder>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional:
  <input>         directory containing the files to be registered; generally the output from pymp2rage
                  (see 'spinoza_qmrimaps')
  <output>        path to directory where registration file/outputs should be stored

Example:
  spinoza_averagesanatomies DIR_DATA_DERIV DIR_DATA_DERIV
  spinoza_averagesanatomies -s 001 -n 1 DIR_DATA_DERIV DIR_DATA_DERIV

---------------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
while getopts :-:hs:n: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        ow)
          OW=1
          ;;  
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
#intro
start_timer "Averaging $(for ii in ${ACQ[@]}; do echo $ii; done) images"

#-----------------------------------------------------------------------------
# Run it

for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # check if input directory was pymp2rage or not
  if [[ "$(basename ${INPUT})" != "pymp2rage" ]]; then
    input_dir="${INPUT}/${base_path}/anat"
  else
    input_dir="${INPUT}/${base_path}"
  fi
  
  # set output directory
  output_dir="${OUTPUT}/${base_path}"
  if [ ! -d "${input_dir}" ]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi

  #-------------------------------------------------------------------------------------------------
  # calculate the averages of UNI T1, INV1, and INV2
  print_subject_header ${sub_name}

  if [[ ! -d ${output_dir} ]]; then
    mkdir -p ${output_dir}
  fi

  if [[ ${DATA^^} != "AVERAGE" ]]; then
    echo "${DATA^^} != \"AVERAGE\".. Check spinoza_setup first.."
    exit 1
  fi

  declare -a OUTPUTS=(T1w T1map)
  declare -a MAX=("4095" "5050")

  for i in ${OUTPUTS[@]}; do

    out=${output_dir}/${base}_acq-${DATA}_${i}.nii.gz
    if [[ ! -f ${out} ]]; then

      # look for warped files
      in_files=(
        $(
          find "${input_dir}" \
          -type f \
          -name "*space-*" \
          -and -name "*${i}.nii.gz" \ | 
          sort \
          2>/dev/null
        )
      )

      if [[ ! -z ${in_files} ]]; then
        # MP2RAGE+MP2RAGEME if number of "space-" files is 1
        if [[ ${#in_files[@]} -eq 1 ]]; then

          # reference image (MP2RAGE)
          in_1=$(
            find "${input_dir}" \
            -type f \
            -name "*acq-${ACQ[0]^^}_*" \
            -and -name "*${i}.nii.gz" \
            2>/dev/null
          )

          # warped file (MP2RAGEME)
          in_2=$(
            find "${input_dir}" \
            -type f \
            -name "*space-${ACQ[0]^^}*" \
            -and -name "*acq-${ACQ[1]^^}_*" \
            -and -name "*${i}.nii.gz" \
            2>/dev/null
          )

          # check if reference exists
          if [[ ! -f "${in_1}" ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" find "Could not find reference file with \"*acq-${ACQ[0]^^}_*\" and \"*${i}.nii.gz\" in ${BOLD_GREEN}${input_dir}${RESET}"
            exit 1
          fi 

          # check if warped exists
          if [[ ! -f "${in_2}" ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" find "Could not find warped file with \"*space-${ACQ[0]^^}*\", \"*acq-${ACQ[0]^^}_*\", and \"*${i}.nii.gz\" in ${BOLD_GREEN}${input_dir}${RESET}"
            exit 1
          fi 
          
          cmd=(
            call_calculatemean
            "${in_1}"
            "${in_2}"
            "${out}"
          )
        else
          # Multiple MP(2)RAGE(S) if number of "space-" files >1
          ref=$(
            find "${input_dir}" \
            -type f \
            -name "*acq-${ACQ[0]^^}_*" \
            -and -name "*run-1*" \
            -and -name "*${i}.nii.gz" | \
            sort \
            2>/dev/null
          )

          if [[ -z ${ref} ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" find "Could not find reference file with \"*acq-${ACQ[0]^^}_*\", \"*run-1*\", and \"*${i}.nii.gz\" in ${BOLD_GREEN}${input_dir}${RESET}"
            exit 1
          fi
       
          cmd=(
            call_calculatemean
            "${ref}"
            "${in_files[@]}"
            "${out}"
          )
        fi
        
        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 || ! -f ${out} ]]; then
          print_error_msg "$(basename ${0})" "call_calculatemean"
          exit 1
        fi

      else
        print_file_not_in_dir "${sub_name}" "*acq-${ACQ[0]^^}_*, *space-*, and *${i}.nii.gz" "${input_dir}"
        exit 1
      fi
      
      # check if registration induced NANs
      NAN=$(fslstats ${out} -R | awk '{print $1}')
      if [[ ${NAN} == "-nan" ]]; then
        echo "Found NaNs, replacing these values with zeroes"
        fslmaths ${out} -nan ${out}
      fi

      # check if registration induced NANs
      ZERO=$(fslstats ${out} -R | awk '{print $1}')
      if [[ ${ZERO} != "0" ]]; then

        if [[ ${i} == "T1w" ]]; then
          max=${MAX[0]}
        elif [[ ${i} == "T1map" ]]; then
          max=${MAX[1]}
        fi

        echo "Rescaling ${i}-image to [0, ${max}] with ImageMath"
        cmd=(
          call_rescale
          ${out}
          0
          ${max}
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" lta_convert
          exit 1
        fi
      fi
    else
      print_output_exists "${sub_name}" "${out}"
    fi
  done

  # check if we can copy SPM mask from MP2RAGE
  spm_mask=$(
    find "${input_dir}" \
    -type f \
    -name "*acq-${ACQ[0]^^}_*" \
    -and -name "*desc-spm_mask.nii.gz" \
    2>/dev/null
  )
  if [[ ! -z "${spm_mask}" ]]; then
  
    # sort so we can verify there's only 1 file
    IFS=$'\n' spm_imgs=($(sort <<<"${spm_mask[*]}"))
    unset IFS

    # take first image regardless..
    spm=${spm_imgs[0]}

    # rename
    final_spm="${output_dir}/${base}_acq-${DATA}_desc-spm_mask.nii.gz"
    cp "${spm}" "${final_spm}" 2>/dev/null
  fi

  # look for T2w/FLAIR
  for i in "T2w" "FLAIR"; do
    new_space=$(
      find "${input_dir}" \
      -type f \
      -name "*space*" \
      -and -name "*${i}.nii.gz" \
      2>/dev/null
    )

    out_name="${output_dir}/${base}_acq-${DATA}_${i}.nii.gz"
    if [[ -f "${new_space}" ]]; then
      cp "${new_space}" "${out_name}" 2>/dev/null
    fi
  done
done

#-----------------------------------------------------------------------------
# outro
end_timer
