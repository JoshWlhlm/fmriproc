#!/usr/bin/env bash
#$ -cwd
#$ -j Y
#$ -V
#$ -pe smp 1
#
# https://askubuntu.com/questions/39309/how-do-i-find-the-version-of-bash-i-am-running
if [ -z `echo ${BASH}` ]; then
  echo "Make sure \"bash\" >v4.0 is installed"
  exit 1
else
  if ((BASH_VERSINFO[0] < 4)); then 
    echo "Sorry, you need at least bash-4.0 to run this script." >&2
    exit 1
  fi
fi
job="bash"

# source helper functions
source ${SETUP_FILE}
source call_bashhelper

# Allocate input arguments to variables
#
HELP=0
HEMI_FLAG=""              # spinoza_lineplanning
IDENT_FLAG=""             # spinoza_lineplanning
DEBUG=""                  # spinoza_linerecon
NORDIC=""                 # spinoza_linerecon
OW=""                     # multiple (overwrite mode)
verb_flag=""              # multiple (turn on verboses)
aparc_flag=""             # spinoza_bestvertex
FREEVIEW=""               # spinoza_bestvertex
VERT=""                   # spinoza_bestvertex
SRF_FLAG=""               # spinoza_bestvertex
SRF_FILE=""               # spinoza_bestvertex
GALLERY_FLAG=""           # spinoza_bestvertex
MAN_EPI=""                # spinoza_bestvertex
EPI_FILE=""               # spinoza_bestvertex
LS_SES=""                 # spinoza_bestvertex
skip_prf_info=""          # spinoza_bestvertex
SELECTION_FLAG=""         # spinoza_bestvertex
OPEN_WITH_FLAG=""         # spinoza_bestvertex
PROC=""                   # spinoza_brainextraction
FS_FLAG=""                # spinoza_brainextraction
pre_flag=""               # spinoza_denoising
post_flag=""              # spinoza_denoising
pyb_flag=""               # spinoza_denoising
raw_flag=""               # spinoza_denoising
SGE=""                    # spinoza_denoising/spinoza_nordic/spinoza_linerecon/spinoza_registration
cmd_flag=""               # spinoza_registration
COMB_ONLY=""              # spinoza_extractregions
CLIP=""                   # spinoza_fitprfs
CLIP_FLAG=""              # spinoza_fitprfs
TASK_ID=""                # spinoza_fitprfs
MODEL=""                  # spinoza_fitprfs
GRID=""                   # spinoza_fitprfs
MULTIPLE_DESIGNS=""       # spinoza_fitprfs
FIT_HRF=""                # spinoza_fitprfs
psc_flag=""               # spinoza_fitprfs
zscore_flag=""            # spinoza_fitprfs
raw_flag=""               # spinoza_fitprfs
use_constr=""             # spinoza_fitprfs
fit_flag=""               # spinoza_fitprfs
fprep_input=0             # spinoza_fitprfs
lbl_flag=""               # spinoza_fitprfs
save_grid=""              # spinoza_fitprfs
bouds_flag=""             # spinoza_fitprfs
merge_flag=""             # spinoza_fitprfs
jobs_flag=""              # spinoza_fitprfs
MODEL_FLAG="--gauss"      # spinoza_fitprfs
REFIT_FLAG=""             # spinoza_fitprfs
PIXEL_FLAG=""             # spinoza_fitprfs
BOLD_FLAG=""              # spinoza_fitprfs
FOLDS_FLAG=""             # spinoza_fitprfs
SKIP_FLAG=""              # spinoza_fitprfs
TRANS_FLAG=""             # spinoza_fitprfs
FIX_FLAG=""               # spinoza_fitprfs
highres_flag=""           # spinoza_freesurfer
XOPTS_=""                 # spinoza_freesurfer
expert_flag=""            # spinoza_freesurfer
TSNR_FLAG=""              # spinoza_nordic
mag_flag=""               # spinoza_nordic
RUNS=""                   # spinoza_nordic
use_bbr=""                # spinoza_fmriprep
WARP_ONLY=""              # spinoza_fmriprep
REMOVE_WF=""              # spinoza_fmriprep
kwargs_file=""            # spinoza_fmriprep
boldref_flag=""           # spinoza_fmriprep
clean_flag=""             # spinoza_fmriprep
fetch_fsl_flag=""         # spinoza_fmriprep
fetch_func_flag=""        # spinoza_fmriprep
mask_flag=""              # spinoza_fmriprep
fetch_anat_flag=""        # spinoza_fmriprep
DOCKER_FLAG=""            # spinoza_fmriprep
WORK_FLAG=""              # spinoza_fmriprep
CRASH_FLAG=""             # spinoza_fmriprep
run_local=""              # spinoza_fmriprep/spinoza_fitprfs
LAYER_FLAG=""             # spinoza_layering
NR_LAYERS=""              # spinoza_layering
GDH_FLAG=""               # spinoza_mgdm
MAN_FLAG=""               # spinoza_masking
REG_TYPE=""               # spinoza_registration
FSL_FLAG=""               # spinoza_registration
DRAW_SAG=""               # spinzoa_sagittalsinus
SES_TYPE=""               # spinoza_scanner2bids
ADD_INV=""                # spinoza_scanner2bids
pe_dir_flag=""            # spinoza_scanner2bids
reorient_flag=""          # spinoza_scanner2bids
FULL_OW=""                # spinoza_scanner2bids
SEARCH_DEPTH=""           # spinoza_scanner2bids
TR_FLAG=""                # spinoza_scanner2bids
MRI_SYSTEM_FLAG=""        # spinoza_scanner2bids
SKIP_TR=""                # spinoza_scanner2bids
UPs=""                    # spinoza_qmrimaps
BIAS_FLAG=""              # spinoza_biassanlm
SANLM_FLAG=""             # spinoza_biassanlm
BG_FLAG=""                # spinoza_qmrimaps
PARS_FILE=""              # spinoza_qmrimaps
PROT_FLAG=""              # spinoza_scanner2bids
FS_stage="all"            # spinoza_freesurfer
FORCE_FLAG=""             # spinoza_freesurfer
START_STAGE=""            # spinoza_freesurfer
use_t2_flag=""            # spinoza_freesurfer
space_flag=""             # spinoza_denoising
mod_flag=""               # spinoza_mriqc
fd_flag=""                # spinoza_mriqc
t_specified=0             # keep track when t-flag is specified or --func is used (alias for -t func)
ANAT_DEPTH=""             # all anatomical steps

# use long options in bash:
# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
declare -a array
# opts_file="${REPO_DIR}/misc/options.txt"
opts_file="${REPO_DIR}/misc/options.txt"
while IFS= read -r line || [[ -n "$line" ]]; do
    array+=("$line")
done < "$opts_file"

# sort options array
IFS=$'\n' opts=($(sort <<<"${array[*]}"))
unset IFS

while getopts ":-:om:f:s:h:n:t:l:v:p:x:u:r:e:i:c:k:j:q:a:d:w:" arg; do
  case ${arg} in
    -)
      case "${OPTARG}" in
        abc)
          MODEL_FLAG="--abc"
          ;;
        abd)
          MODEL_FLAG="--abd"
          ;;
        affine)
          REG_TYPE="--affine"
          ;;
        anat)
          space_flag="--anat"
          ;;
        anat_only)
          mod_flag="--anat_only"
          ;;        
        ap)
          pe_dir_flag="--ap"
          ;;
        aparc)
          aparc_flag="--aparc"
          ;;
        bgfs)
          use_constr="--bgfs"
          ;;
        bold)
          BOLD_FLAG="--bold"
          ;;
        clean)
          clean_flag="--clean"
          ;;
        cmd)
          cmd_flag="--cmd"
          ;;
        comb_only)
          COMB_ONLY="-c"
          ;;
        ctx)
          OPEN_WITH_FLAG="--ctx"
          ;;
        css)
          MODEL_FLAG="--css"
          ;;
        dcm_fix)
          echo "This functionality is now default and therefore the flag is deprecated"
          exit 1
          ;;
        debug)
          DEBUG="--debug"
          ;;
        dog)
          MODEL_FLAG="--dog"
          ;;
        docker)
          DOCKER_FLAG="--docker"
          ;;
        fd)
          fd_flag="--fd"
          ;;
        fetch_anat)
          fetch_anat_flag="--fetch_anat"
          ;;
        fetch_fsl)
          fetch_fsl_flag="--fetch_fsl"
          ;;
        fetch_func)
          fetch_func_flag="--fetch_func"
          ;;
        fix_hrf)
          FIX_FLAG="--fix_hrf"
          ;;
        fmriprep)
          fprep_input=1
          ;;
        fprep)
          fprep_input=1
          ;;
        freeview)
          DRAW_SAG="fv"
          ;;
        full)
          FULL_OW="--full"
          PROC="--full"
          ;;
        fsl)
          DRAW_SAG="fsl"
          ;;
        fs)
          FS_FLAG="--fs"
          ;;
        fsaverage)
          space_flag="--fsaverage"
          ;;
        fsnative)
          space_flag="--fsnative"
          ;;
        force_exec)
          FORCE_FLAG="--force_exec"
          ;;
        func)
          TYPE="func"
          space_flag="--func"
          ;;
        func_only)
          mod_flag="--func_only"
          ;;
        gallery)
          GALLERY_FLAG="--gallery"
          ;;
        gauss)
          MODEL_FLAG="--gauss"
          ;;
        ge)
          MRI_SYSTEM_FLAG="--ge"
          ;;
        gdh)
          GDH_FLAG="--gdh"
          ;;
        grid)
          GRID="--grid"
          ;;
        help)
          HELP=1
          ;;
        ident)
          IDENT_FLAG="--identity"
          ;;
        identity)
          IDENT_FLAG="--identity"
          ;;
        inv)
          ADD_INV="--inv"
          ;;
        itk)
          DRAW_SAG="itk"
          ;;
        lh)
          HEMI_FLAG="--lh"
          ;;
        lines)
          SES_TYPE="--lines"
          ;;
        local)
          run_local="--local"
          ;;
        mag)
          mag_flag="--mag"
          ;;
        manual)
          SELECTION_FLAG="--manual"
          ;;
        mask)
          mask_flag="--masks"
          ;;
        masks)
          mask_flag="--masks"
          ;;
        merge_ses)
          merge_flag="--merge_ses"
          ;;
        mni_2009)
          space_flag="--mni_2009"
          ;;
        mni_fsl)
          space_flag="--mni_fsl"
          ;;
        multi_design)
          MULTIPLE_DESIGNS="--multi_design"
          ;;
        nelder)
          use_constr="--nelder"
          ;;
        n4)
          BIAS_FLAG="--n4"
          ;;          
        no_bbr)
          use_bbr="--no_bbr"
          ;;
        no_bounds)
          bounds_flag="--no_bounds"
          ;;
        no_boldref)
          boldref_flag="--no_boldref"
          ;;
        no_clip)
          CLIP="--no_clip"
          ;;
        no_epi)
          MAN_EPI="--no_epi"
          ;;
        no_fit)
          fit_flag="--no_fit"
          ;;
        no_freeview)
          FREEVIEW="--no_freeview"
          ;;
        no_highres)
          highres_flag="--no_highres"
          ;;
        no_hrf)
          FIT_HRF="--no_hrf"
          ;;
        no_lpi)
          reorient_flag="--no_lpi"
          ;;
        no_manual)
          MAN_FLAG="--no_manual"
          ;;
        no_nordic)
          NORDIC="--no_nordic"
          ;;
        no_raw)
          raw_flag="--no_raw"
          ;;
        no_sanlm)
          SANLM_FLAG="--no_sanlm"
          ;;          
        no_srf)
          SRF_FLAG="--no_srf"
          ;;
        no_t2)
          use_t2_flag="--no_t2"
          ;;
        no_tsnr)
          TSNR_FLAG="--no_tsnr"
          ;;
        norm)
          MODEL_FLAG="--norm"
          ;;
        ofsl)
          FSL_FLAG="--ofsl"
          ;;
        ow)
          OW="-o"
          ;;
        pa)
          pe_dir_flag="--pa"
          ;;
        lr)
          pe_dir_flag="--lr"
          ;;
        rl)
          pe_dir_flag="--rl"
          ;;
        philips)
          MRI_SYSTEM_FLAG="--philips"
          ;;          
        psc)
          psc_flag="--psc"
          ;;
        phys)
          phys_flag="--phys"
          ;;
        post_only)
          post_flag="--post_only"
          ;;
        pre_only)
          pre_flag="--pre_only"
          ;;
        pyb_only)
          pyb_flag="--pyb_only"
          ;;
        sge)
          SGE="--sge"
          ;;
        separate_hrf)
          FIT_HRF="--separate_hrf"
          ;;
        siemens)
          MRI_SYSTEM_FLAG="--siemens"
          ;;          
        skip_bg)
          BG_FLAG="--skip_bg"
          ;;
        skip_prf_info)
          skip_prf_info="--skip_prf_info"
          ;;
        skip_settings)
          SKIP_FLAG="--skip_settings"
          ;;
        skip_tr)
          SKIP_TR="--skip_tr"
          ;;
        srf_file)
          SRF_FILE="--srf_file"
          ;;
        spm)
          BIAS_FLAG="--spm"
          ;;
        surface)
          LAYER_FLAG="surface"
          ;;          
        tc)
          use_constr="--tc"
          ;;
        take-avg-tr)
          PROT_FLAG="--take-avg-tr"
          ;;
        transpose)
          TRANS_FLAG="--transpose"
          ;;
        try)
          CRASH_FLAG="--try"
          ;;
        ups)
          UPs="-u"
          ;;
        v1)
          lbl_flag="--v1"
          ;;
        v2)
          lbl_flag="--v2"
          ;;
        verbose)
          verb_flag="--verbose"
          ;;
        warp_only)
          WARP_ONLY="--warp_only"
          ;;
        xopts-clean)
          XOPTS_="--xopts-clean"
          ;;
        xopts-overwrite)
          XOPTS_="--xopts-overwrite"
          ;;
        xopts-use)
          XOPTS_="--xopts-use"
          ;;
        zscore)
          zscore_flag="--zscore"
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            for ii in ${opts[@]}; do echo " ${ii}"; done
            echo
            echo "Unknown option \"--${OPTARG}\", see above for possible option"
            echo "Enter \"$(basename ${0})\" to see what these flags do"
            exit 1
          fi
          ;;
      esac
      ;;
    m)
      MOD=${OPTARG}
      ;;
    d)
      SEARCH_DEPTH="-d ${OPTARG}"
      ANAT_DEPTH=${OPTARG}
      ;;
    s)
      SUB=${OPTARG}
      ;;
    h)
      HEMI=${OPTARG}
      ;;
    n)
      SES=${OPTARG}
      ;;
    o)
      OW="-o"
      ;;
    t)
      TYPE=${OPTARG}
      t_specified=1
      TR_FLAG="-t ${OPTARG}"
      ;;
    l)
      WHICH_MOD=${OPTARG}
      NR_LAYERS="-l ${OPTARG}"
      LS_SES="-l ${OPTARG}"
      ;;
    v)
      VERTICES=${OPTARG}
      ;;
    p)
      PRF_MODEL=${OPTARG}
      PARS_FILE="-p $(abs_path \"${OPTARG}\")"
      ;;
    c)
      C_FLAG=${OPTARG}
      ;;
    x)
      KWARGS=${OPTARG}
      ;;
    u)
      CONF=${OPTARG}
      ;;
    r)
      ROI=${OPTARG}
      FS_stage=${OPTARG}
      RUNS="-r ${OPTARG}"
      SET_TR="-r ${OPTARG}"
      ;;
    e)
      n_echoes=${OPTARG}
      START_STAGE=${OPTARG}
      EPI_FILE="-e ${OPTARG}"
      PIXEL_FLAG="-p ${OPTARG}"
      ;;
    i)
      images=${OPTARG}
      ;;
    w)
      WORK_FLAG="-w ${OPTARG}"
      ;;
    a)
      KEEP_RUNS="-a ${OPTARG}"
      ;;
    q)
      SGE_QUEUE="-q ${OPTARG}"
      ;;
    j)
      jobs_flag="-j ${OPTARG}"
      ;;
    f)
      FOLDS_FLAG="-f ${OPTARG}"
      ;;
    k)
      kwargs_file="-k $(abs_path \"${OPTARG})\""
      ;;
  esac
done

# set the execute flag
FLAG_executeModule="${MOD}"

start=`date +%s`
start_date=`date`

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

===================================================================================================
                            MASTER SCRIPT FOR LINE SCANNING ANALYSIS
===================================================================================================

Main script governing all (pre-)processing steps for high resolution anatomical data, as well as 
whole-brain fMRI data analyses (specifically population receptive field [pRF]) and linescanning
data. All modules can be called with master -m <module>, which in it's bare form with loop through
the subjects it can find in the specified input directories. You can also include an -s flag to 
process a single subject. See below for additional settings. Please read through it's module what
it's default settings are and what you'd need to do to get it running for you.

Have fun!

$(cat "${REPO_DIR}/misc/arguments.txt")

Models for pRF fitting:
  --gauss           run standard Gaussian model (default) [Dumoulin & Wandell, 2008]
  --dog             run difference-of-gaussian model (suppression) [Zuiderbaan, et al. 2013]
  --css             run compressive spatial summation model (compression) [Kay, et al. 2013]
  --norm            run divisive normalization model (suppresion+compression) [Aqil, et al. 2021]

Usage:
  master -m <MODULES TO RUN>
  master -m 01,02,03,04           (comma-separated for running multiple modules in succession)
  master -m 00 -q                 (print help-text of module 00)
  master -l mgdm                  (fetch module number mgdm-module)
  master -m 02 -n 2 --lines       (line-scanning session)
  master -m 02 -n 2 --lines --inv (line-scanning session + high resolution anatomies)
  master -m 15 -t func            (run fMRIPrep on available tasks)
  master -m 15 -t scenes          (run fMRIPrep on scenes-task only)
  master -m 17 --norm --local     (run pRF-fitting with DN-model and don't submit to cluster)

Additional options:
  - Specify a subject to run (for certain modules):   master -m <module> -s <subj-ID>
  - Specify a hemisphere (for certain modules):       master -m <module> -h left
  - Disable overwrite mode (for certain modules):     master -m <module> -o n
  - Specify a particular session to use:              master -m <module> -n 1
  - Specify processing type fMRIprep (anat|func)      master -m <module> -t anat

$(cat "${REPO_DIR}/misc/modules.txt")

--END--
---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}


#---------------------------------------------------------------------------------------------------
# Error handling
if [[ $# -lt 2 ]] ; then
  echo
  echo "NEED AT LEAST ONE MODULE. echoING HELP AND EXITING"
  Usage >&2
  exit 1
fi

#---------------------------------------------------------------------------------------------------
# Check for which-module switch 
if [[ ! -z ${WHICH_MOD} ]] && [[ "${@}" != *"-m"* ]]; then
  mod_nr=`get_module_nr ${WHICH_MOD}`
  if [[ ! -z ${mod_nr} ]]; then
    echo "module ${mod_nr} contain(s) \"${WHICH_MOD}\""
  else
    echo "could not find a module associated with \"${WHICH_MOD}\""
  fi
fi

#---------------------------------------------------------------------------------------------------
# Define default session/subject stuff
if [[ -z ${SES} ]]; then
  # Going to assume ses-1 here
  SESSION="-n 1"
elif [[ ${SES,,} == "none" ]]; then
  SESSION=""
else
  SESSION="-n ${SES}"
fi

if [[ -z ${SUB} ]]; then
  SUBJECT=""
else
  SUBJECT="-s ${SUB}"
fi

#---------------------------------------------------------------------------------------------------
# STEP 00: Optimal line planning procedure with registration of anat ses-1 to ms ses-2
module=00

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}
if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_lineplanning
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Optimal line planning procedure with registration of anat ses-1 to ms ses-X"

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 00 -s 001"
    exit 1
  fi

  if [[ -z ${HEMI} ]] && [[ -z ${HEMI_FLAG} ]]; then
    echo "ERROR: Need a hemisphere for this module. Specify the subject number with the -h flag in the master script"
    echo "  e.g., ./master -m 00 -s 001 {--lh|--rh}"
    exit 1
  fi

  if [[ -z ${SES} ]]; then
    read -p "Session number not specified; defaulting to \"ses-2\". Sure you want to continue..? (y/n)? " choice
    case "${choice}" in
      y|Y ) c=1;;
      n|N ) c=0;;
      * ) c="invalid";;
    esac

    if [[ ${c} -eq 1 ]]; then
      ses_nr=2
    elif [[ ${c} == "invalid" ]]; then
      echo "Your answer was invalid. Quitting.. Use \"-n X\" to specify your desired session"
      exit 1
    else
      echo "You selected \"no\". Quitting.. Use \"-n X\" to specify your desired session"
      exit 1
    fi
  else
    ses_nr=${SES}
  fi

  # check if we got custom file, otherwise default to directory
  subject=${SUBJECT_PREFIX}${SUB}
  if [[ ! -z ${images} ]]; then
    reg_img=${images}
  else
    reg_img=${DIR_DATA_SOURCE}/${subject}/ses-${ses_nr}/planning
  fi

  ${job} spinoza_lineplanning \
    ${OW} \
    ${HEMI_FLAG} \
    ${IDENT_FLAG} \
    -s ${subject} \
    -n ${ses_nr} \
    -i ${reg_img} \
    -p ${DIR_DATA_DERIV}/pycortex/${subject}/ses-${ses_nr}/${subject}_ses-${ses_nr}_desc-coords.csv


  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 01: Make new session for subject
module=01

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_bidssession
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create folder structure for new session"

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 01 -s 001"
    exit 1
  fi

  if [[ -z ${SES} ]]; then
    echo "ERROR: Need a session number for this module. Specify the subject number with the -n flag in the master script"
    echo "  e.g., ./master -m 01 -n 1"
    exit 1
  fi

  ${job} spinoza_bidssession ${SUB} ${SES}\

  echo "[${module}] DONE"

fi

#---------------------------------------------------------------------------------------------------
# Deprecation message
module=02

if [[ ${FLAG_executeModule} == ${module} ]]; then
  echo "DEPRECATION WARNING: module 02 has been split in 02a (spinoza_scanner2bids) & 02b (spinoza_mriqc)"
  exit 1
fi


#---------------------------------------------------------------------------------------------------
# STEP 02a: Convert raw files to nifti
module=02a

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_scanner2bids
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Convert raw files to nifti"

  ${job} spinoza_scanner2bids \
    ${SES_TYPE} \
    ${SUBJECT} \
    ${SESSION} \
    ${RUNS} \
    ${OW} \
    ${FULL_OW} \
    ${ADD_INV} \
    ${PROT_FLAG} \
    ${pe_dir_flag} \
    ${reorient_flag} \
    ${SDE_FLAG} \
    ${DEBUG} \
    ${SGE} \
    ${SGE_QUEUE} \
    ${phys_flag} \
    ${SEARCH_DEPTH} \
    ${TR_FLAG} \
    ${MRI_SYSTEM_FLAG} \
    ${SKIP_TR} \
    ${DIR_DATA_HOME} ${DIR_DATA_SOURCE}

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 02b: MRIQC
module=02b

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_mriqc
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] quality control with MRIQC"

  ${job} spinoza_mriqc \
    ${SUBJECT} \
    ${SESSION} \
    ${REMOVE_WF} \
    ${mod_flag} \
    ${fd_flag} \
    ${run_local} \
    ${SGE_QUEUE} \
    ${jobs_flag} \
    ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/mriqc

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 03a: Reconstruct line-data (scripts Luisa)
module="03a"

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_linerecon
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Reconstruct line data with MRecon"

  if [[ -z ${n_echoes} ]]; then
    N_ECHOES=""
  else
    N_ECHOES="-m ${n_echoes}"
  fi    

  # set PCA components
  NORDIC_COMPS=0
  if [[ ! -z ${C_FLAG} ]]; then
    NORDIC_COMPS=${C_FLAG}
  fi

  ${job} spinoza_linerecon \
    ${SUBJECT} \
    ${SESSION} \
    ${N_ECHOES} \
    ${DEBUG} \
    ${OW} \
    ${SGE} \
    ${SGE_QUEUE} \
    ${NORDIC} \
    ${RUNS} \
    ${N_COMPS} \
    ${FOLDS_FLAG} \
    -c ${NORDIC_COMPS} \
    ${DIR_DATA_HOME} ${DIR_DATA_SOURCE}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_linerecon exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 03b: LSprep | basic quality control and parsing into h5-file
module="03b"

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_lsprep
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] LSprep | basic quality control"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 2"
  fi

  # check for lsprep kwargs
  KWARGS_FLAG=""
  if [[ ! -z ${KWARGS} ]]; then
    KWARGS_FLAG="-x ${KWARGS}"
  fi

  ${job} spinoza_lsprep \
    ${SUBJECT} \
    ${SESSION} \
    ${SGE} \
    ${SGE_QUEUE} \
    ${KWARGS_FLAG} \
    ${DIR_DATA_HOME} ${DIR_DATA_DERIV}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_linerecon exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 04: Estimate T1's from mp2rage and memp2rage and do some multiparametric mapping
module=04

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_qmrimaps
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Multiparametric mapping"

  ${job} spinoza_qmrimaps \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${UPs} \
    ${FULL_OW} \
    ${BG_FLAG} \
    ${PARS_FILE} \
    ${FORCE_FLAG} \
    ${SGE} \
    ${SGE_QUEUE} \
    ${jobs_flag} \
    ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/pymp2rage

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_qmrimaps exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# Deprecation message
module=05

if [[ ${FLAG_executeModule} == ${module} ]]; then
  echo "DEPRECATION WARNING: module 05 has been split in 05a (anat > anat) & 05b (anat > FSL MNI)"
  exit 1
fi

#---------------------------------------------------------------------------------------------------
# STEP 05a: Register T1 from memp2rage to T1 from mp2rage
module=05a

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_registration
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Register ${ACQ[1]} to ${ACQ[0]}"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`

  ${job} spinoza_registration \
    ${REG_TYPE} \
    ${SUBJECT} \
    ${OW} \
    ${SESSION} \
    ${SGE} \
    ${verb_flag} \
    ${SGE_QUEUE} \
    ${FSL_FLAG} \
    ${jobs_flag} \
    ${cmd_flag} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/ants

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_registration exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 05b: Register T1 from mp2rage to MNI152 for sagittal sinus mask
module=05b

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_registration
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Register T1 from mp2rage to MNI152 for sagittal sinus mask"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  ${job} spinoza_registration \
    ${REG_TYPE} \
    ${SUBJECT} \
    ${OW} \
    ${SESSION} \
    ${SGE} \
    ${verb_flag} \
    ${SGE_QUEUE} \
    ${FSL_FLAG} \
    ${jobs_flag} \
    ${cmd_flag} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/ants mni

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_registration exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 06: Calculate averages of UNIT1, INV1, and INV2
module=06

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_averageanatomies
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Calculate averages of the T1-weighted image and T1map"

  if [[ ${DATA^^} == "AVERAGE" ]]; then

    if [[ -d ${DIR_DATA_DERIV}/pymp2rage ]]; then
      INPUT_DIR=${DIR_DATA_DERIV}/pymp2rage
    else
      INPUT_DIR=${DIR_DATA_HOME}
    fi  

    spinoza_averageanatomies ${SUBJECT} ${SESSION} ${INPUT_DIR} ${DIR_DATA_DERIV}/pymp2rage

    if [[ $? -ne 0 ]]; then
      echo "ERROR in master: spinoza_averageanatomies exited with non-zero status"
      exit 1
    fi

  else
    echo "The variable \"DATA\" is \"${DATA}\"; must be \"AVERAGE\" for this module."
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 07: Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio
module=07

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_sinusfrommni
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`

  if [[ ! -z ${DRAW_SAG} ]]; then
    DRAW_SAG="--${DRAW_SAG}"
  fi
  
  ${job} spinoza_sinusfrommni \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${DRAW_SAG} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/manual_masks

  if [[ $? -ne 0 ]]; then
    echo "ERROR in `basename ${0}`: spinoza_sinusfrommni exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 08: Perform bias field correction with ANTs' N4 algorithm on INV2
module=08

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_biassanlm
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Perform bias field correction and SANLM-filtering"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  # check for lsprep kwargs
  KWARGS_FLAG=""
  if [[ ! -z ${KWARGS} ]]; then
    KWARGS_FLAG="-x ${KWARGS}"
  fi

  ${job} spinoza_biassanlm \
    ${SUBJECT} \
    ${SESSION} \
    ${BIAS_FLAG} \
    ${OW} \
    ${KWARGS_FLAG} \
    ${SANLM_FLAG} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/denoised

  if [[ $? -ne 0 ]]; then
    echo "ERROR in `basename ${0}`: spinoza_biassanlm exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 09: Brain extraction
module=09

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_brainextraction
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Brain extract MP2RAGE-INV2 with ANTs|FSL|CAT12"

  DO_STUFF="cat12"
  if [[ ${DO_STUFF} ==  "inv2" ]]; then
  
    ${job} spinoza_brainextraction \
      ${SUBJECT} \
      ${SESSION} \
      ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/manual_masks FSL

  elif [[ ${DO_STUFF} == "cat12" ]]; then

    # check where inputs live
    if [[ -z ${ANAT_DEPTH} ]]; then
      ANAT_DEPTH=3
    fi

    INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  
    fprep_flag=""
    if [[ ${fprep_input} -eq 1 ]]; then
      fprep_flag="--fprep"
    fi

    ${job} spinoza_brainextraction \
      ${SUBJECT} \
      ${SESSION} \
      ${fprep_flag} \
      ${OW} \
      ${PROC} \
      ${FS_FLAG} \
      ${INPUT_DIR} ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_DERIV}/manual_masks cat12
  fi

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_brainextraction exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 10: Do noise level estimation with AFNI's automask function
module=10
module_name="spinoza_nordic"

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} ${module_name}
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] NORDIC denoising"

  ${job} ${module_name} \
    ${OW} \
    ${SGE} \
    ${SUBJECT} \
    ${SESSION} \
    ${RUNS} \
    ${TSNR_FLAG} \
    ${mag_flag} \
    ${SGE_QUEUE} \
    ${DIR_DATA_HOME}
    
  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: ${module_name} exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 11: Use nighres to get skull and dura mask
module=11

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_dura
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Use nighres to get skull and dura mask"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  ${job} spinoza_dura \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${INPUT_DIR} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_dura exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 12: Create mask of the sagittal sinus with manual edits in ITKsnap
module=12

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_sagittalsinus
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create sagittal sinus mask from R2*-image"

  # DATA = MP2RAGE    > arg1 = DIR_DATA_DERIV/pymp2rage
  # DATA = MEMP2RAGE  > arg1 = DIR_DATA_DERIV/pymp2rage
  # DATA = AVERAGE    > arg1 = DIR_DATA_DERIV/ants

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  
  
  ${job} spinoza_sagittalsinus ${SUBJECT} ${SESSION} ${OW} ${INPUT_DIR} ${DIR_DATA_DERIV}/manual_masks ${DRAW_SAG}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_sagittalsinus exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 13: Combine all masks and apply to average
module=13

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_masking
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Combine all masks and apply to image"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  ${job} spinoza_masking \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${MAN_FLAG} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/masked_${DATA,,} ${DIR_DATA_DERIV}/manual_masks ${DIR_DATA_DERIV}/skullstripped

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_masking exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 14: FreeSurfer
module=14

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_freesurfer
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Run FreeSurfer outside of fMRIprep"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=5
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  # check for expert file
  if [ ! -z ${KWARGS} ]; then
    expert_flag="-x ${KWARGS}"
  fi

  # check -f we got '-e' flag
  if [[ ! -z ${START_STAGE} ]]; then
    START_STAGE="-e ${START_STAGE}"
  fi   
  
  ${job} spinoza_freesurfer \
    ${SUBJECT} \
    ${SESSION} \
    ${highres_flag} \
    ${expert_flag} \
    ${XOPTS_} \
    ${run_local} \
    ${SGE} \
    ${OW} \
    ${START_STAGE} \
    ${FORCE_FLAG} \
    ${use_t2_flag} \
    ${SGE_QUEUE} \
    ${jobs_flag} \
    ${INPUT_DIR} ${FS_stage} ${DIR_DATA_HOME}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_freesurfer exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 15: Preprocess data with fMRIprep
module=15

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_fmriprep
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Preprocess session 1 data with fMRIprep"

  if [[ -z ${TYPE} ]]; then
    TYPE="anat"
  else
    TYPE=${TYPE}
  fi

  # decide on config file (overwrite earlier defaults)
  if [[ ! -z ${CONF} ]]; then
    if [[ ${CONF,,} == "none" ]]; then
      confFile=""
    else
      if [[ -f ${CONF} ]]; then
        confFile="-u ${CONF}"
      else
        echo "ERROR: Could not find config file \"${confFile}\""
        exit 1
      fi
    fi
  else
    confFile=""
  fi

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=6
  fi

  INPUT_DIR=`find_hierarchical_anatomy ${ANAT_DEPTH}`  

  ${job} spinoza_fmriprep \
    ${WARP_ONLY} \
    ${use_bbr} \
    ${run_local} \
    ${SUBJECT} \
    ${SESSION} \
    ${confFile} \
    ${REMOVE_WF} \
    ${kwargs_file} \
    ${boldref_flag} \
    ${RUNS} \
    ${OW} \
    ${jobs_flag} \
    ${SGE_QUEUE} \
    ${KEEP_RUNS} \
    ${clean_flag} \
    ${fd_flag} \
    ${DOCKER_FLAG} \
    ${fetch_fsl_flag} \
    ${fetch_func_flag} \
    ${fetch_anat_flag} \
    ${mask_flag} \
    ${WORK_FLAG} \
    ${CRASH_FLAG} \
    -f ${DIR_DATA_HOME} \
    -m ${TYPE} \
    ${INPUT_DIR} ${DIR_DATA_DERIV} ${DIR_DATA_HOME}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_fmriprep exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 16: fMRI-data denoising with pybest using fmriprep's output
module=16

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_denoising
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Data denoising with pybest"
  
  # --func = alias for -t func, but refers to space, not task. Force actual usage of -t to set task ID, otherwise it'll use "func" for task..
  if [[ ${t_specified} -eq 1 ]]; then
    if [[ ! -z ${TYPE} ]]; then
      TASK_ID="-t ${TYPE}"
    fi   
  fi

  if [[ -z ${images} ]]; then
    INPUT_DIR=${DIR_DATA_DERIV}/fmriprep
  else
    INPUT_DIR=${images}
  fi

  # set PCA components
  if [[ ! -z ${C_FLAG} ]]; then
    PCA_COMPS="-c ${C_FLAG}"
  fi

  # check for expert options
  if [ ! -z ${KWARGS} ]; then
    expert_flag="-x ${KWARGS}"
  fi

  ${job} spinoza_denoising \
    ${raw_flag} \
    ${SUBJECT} \
    ${SESSION} \
    ${SGE} \
    ${OW} \
    ${FULL_OW} \
    ${PCA_COMPS} \
    ${TASK_ID} \
    ${space_flag} \
    ${SGE_QUEUE} \
    ${jobs_flag} \
    ${pre_flag} \
    ${post_flag} \
    ${pyb_flag} \
    ${FORCE_FLAG} \
    ${expert_flag} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/pybest

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_denoising exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 17: pRF-fitting with pRFpy
module=17

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_fitprfs
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] pRF-fitting with pRFpy"

  # set PNG directory
  if [[ -z ${images} ]]; then
    PNG_DIR=${DIR_DATA_SOURCE}
  else
    PNG_DIR=${images}
  fi

  # set input directory depending on the presence of pybest output
  PRF_INPUT=${DIR_DATA_DERIV}/pybest
  if [[ ${fprep_input} -eq 1 ]]; then
    PRF_INPUT=${DIR_DATA_DERIV}/fmriprep
  fi

  # specify a specific task-ID to be fitted
  if [[ ! -z ${TYPE} ]]; then
    TASK_ID="-t ${TYPE}"
  fi  

  # set design clipper flag
  if [[ ! -z ${C_FLAG} ]]; then
    CLIP_FLAG="-c ${C_FLAG}"
  fi  

  # set constraints flag; note that 'use_constr' can also be set with '--tc' or '--bgfs'
  if [ ! -z ${KWARGS} ]; then
    use_constr="-x ${KWARGS}"
  fi

  if [[ ! -z ${VERTICES} ]]; then
    CUT_VOLS="-v ${VERTICES}"
  fi  

  ${job} spinoza_fitprfs \
    ${use_constr} \
    ${CLIP} \
    ${CLIP_FLAG} \
    ${verb_flag} \
    ${zscore_flag} \
    ${raw_flag} \
    ${fit_flag} \
    ${TASK_ID} \
    ${FIT_HRF} \
    ${run_local} \
    ${GRID} \
    ${MULTIPLE_DESIGNS} \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${MODEL_FLAG} \
    ${CUT_VOLS} \
    ${lbl_flag} \
    ${save_grid} \
    ${bouds_flag} \
    ${merge_flag} \
    ${jobs_flag} \
    ${kwargs_file} \
    ${space_flag} \
    ${SGE_QUEUE} \
    ${SET_TR} \
    ${PIXEL_FLAG} \
    ${REFIT_FLAG} \
    ${FOLDS_FLAG} \
    ${BOLD_FLAG} \
    ${SKIP_FLAG} \
    ${TRANS_FLAG} \
    ${FIX_FLAG} \
    ${PRF_INPUT} ${DIR_DATA_DERIV}/prf ${PNG_DIR}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_fitprfs exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 18: Determine best vertex with pycortex
module=18

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_bestvertex
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Determine best vertex with pycortex"

  if [[ ! -z ${VERTICES} ]]; then
    VERT="-v ${VERTICES}"
  fi

  if [[ ! -z ${ROI} ]]; then
    LABEL_FILE=${ROI}
  else
    LABEL_FILE="V1_custom"
  fi

  if [[ ! -z ${TYPE} ]]; then
    TASK_ID="-t ${TYPE}"
  fi

  ${job} spinoza_bestvertex \
    ${MODEL} \
    ${TASK_ID} \
    ${GRID} \
    ${SUBJECT} \
    ${SESSION} \
    ${VERT} \
    ${FREEVIEW} \
    ${OW} \
    ${FULL_OW} \
    ${lbl_flag} \
    ${MODEL_FLAG} \
    ${SRF_FLAG} \
    ${SRF_FILE} \
    ${EPI_FILE} \
    ${GALLERY_FLAG} \
    ${aparc_flag} \
    ${SELECTION_FLAG} \
    ${MAN_EPI} \
    ${EPI_FILE} \
    ${LS_SES} \
    ${skip_prf_info} \
    ${DIR_DATA_HOME} ${DIR_DATA_DERIV} ${LABEL_FILE}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_bestvertex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 19: FAST segmentation with FSL
module=19

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_segmentfast
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] FAST segmentation with FSL"

  ${job} spinoza_segmentfast ${SUBJECT} ${SESSION} ${OW} ${SKULLSTRIP} ${DIR_DATA_DERIV}/fsl

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentfast exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 20: MGDM segmentation with nighres
module=20

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_mgdm
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] MGDM segmentation with nighres"

  spinoza_mgdm \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${GDH_FLAG} \
    ${SGE} \
    ${SGE_QUEUE} \
    ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_mgdm exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 21: Region extraction with nighres
module=21

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_extractregions
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Region extraction with nighres"

  if [[ ! -z ${ROI} ]]; then
    ROI=${ROI}
  else
    ROI="cerebrum"
  fi

  ${job} spinoza_extractregions \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${COMB_ONLY} \
    -f ${DIR_DATA_DERIV}/fmriprep \
    ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks ${ROI}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_extractregions exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 22: Cortex reconstruction with nighres
module=22

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_cortexrecon
    exit 1
  fi

  if [[ ! -z ${ROI} ]]; then
    ROI=${ROI}
  else
    ROI="cerebrum"
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Cortex reconstruction with nighres"

  
  if [[ ${LAYER_FLAG} == "nighres" ]]; then
    PROBSEG=${DIR_DATA_DERIV}/nighres
  else
    PROBSEG=${DIR_DATA_DERIV}/manual_masks
  fi

  ${job} spinoza_cortexrecon ${SUBJECT} ${SESSION} ${OW} ${PROBSEG} ${DIR_DATA_DERIV}/nighres ${ROI}


  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_cortexrecon exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 23: Equivolumetric layering with either nighres or Wagstyl's surface_tools
module=23

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_layering
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Equivolumetric layering"

  if [[ -z ${LAYER_FLAG} || ${LAYER_FLAG} == "nighres" ]]; then
    INPUT_DIR=${DIR_DATA_DERIV}/nighres
    SOFTWARE="nighres"
  elif [[ ${LAYER_FLAG} == "surface" ]]; then
    SOFTWARE="surface"
    INPUT_DIR=${FS}
  else
    echo "ERROR in `basename ${0}`: Unknown flag \"${LAYER_FLAG}\". Must be \"nighres\" or \"surface\""
    exit 1
  fi

  ${job} spinoza_layering \
     ${SUBJECT} \
     ${SESSION} \
     ${OW} \
     ${NR_LAYERS} \
     ${INPUT_DIR} ${SOFTWARE}
  
  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_layering exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 24: Subcortex parcellation with MASSP
module=24

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_segmentsubcortex
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Subcortex parcellation with MASSP"

  ${job} spinoza_segmentsubcortex ${SUBJECT} ${SESSION} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/nighres

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentsubcortex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 25: Project line to surface with a registration cascade
module=25

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_line2surface
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Registration cascade to project line to surface"

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 24 -s 001"
    exit 1
  fi

  # input anat as defined in module 00
  ${job} spinoza_line2surface -s ${subject} -y ${DIR_DATA_HOME}/${subject}/ses-2/anat/${subject}_ses-2_acq-MP2RAGE_T1w.nii.gz -o ${CTX} -i ${NIGHRES}/${subject}/ses-2

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_line2surface exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 26: Project line to surface with a registration cascade
module=26

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_profiling
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Profile sampling using Nighres"

  if [[ -z ${KWARGS} ]]; then
    KWARGS="T2starmap"
  else
    KWARGS=${KWARGS}
  fi    

  # spinoza_profiling ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_HOME} T1map
  ${job} spinoza_profiling ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_HOME} ${KWARGS}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentsubcortex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 27: Project line to surface with a registration cascade
module=27

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    ${job} spinoza_suit
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Cerebellum segmentation with SUIT"

  # check where inputs live
  INPUT_DIR=`find_hierarchical_anatomy 6`

  # spinoza_profiling ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_HOME} T1map
  ${job} spinoza_suit \
    ${SUBJECT} \
    ${SESSION} \
    ${OW} \
    ${INPUT_DIR} ${DIR_DATA_DERIV}/suit

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_suit exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi
