#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source ${SETUP_FILE}
source call_bashhelper

#-----------------------------------------------------------------------------
# https://askubuntu.com/questions/39309/how-do-i-find-the-version-of-bash-i-am-running
if [[ -z $(echo ${BASH}) ]]; then
  echo "Make sure \"bash\" >v4.0 is installed"
  echo
  print_line -
  print_error_msg "$(basename ${0})" "bash" "Make sure \"bash\" >v4.0 is installed"
  exit 1
fi

#-----------------------------------------------------------------------------
# Allocate input arguments to variables
#
KWARGS_FLAG=""
HELP=0
HEMI_FLAG=""              # spinoza_lineplanning
IDENT_FLAG=""             # spinoza_lineplanning
DEBUG=""                  # spinoza_linerecon
NORDIC=""                 # spinoza_linerecon
OW=""                     # multiple (overwrite mode)
verb_flag=""              # multiple (turn on verboses)
aparc_flag=""             # spinoza_bestvertex
FREEVIEW=""               # spinoza_bestvertex
VERT=""                   # spinoza_bestvertex
SRF_FLAG=""               # spinoza_bestvertex
SRF_FILE=""               # spinoza_bestvertex
GALLERY_FLAG=""           # spinoza_bestvertex
MAN_EPI=""                # spinoza_bestvertex
EPI_FILE=""               # spinoza_bestvertex
LS_SES=""                 # spinoza_bestvertex
skip_prf_info=""          # spinoza_bestvertex
SELECTION_FLAG=""         # spinoza_bestvertex
OPEN_WITH_FLAG=""         # spinoza_bestvertex
PROC=""                   # spinoza_brainextraction
FS_FLAG=""                # spinoza_brainextraction
pre_flag=""               # spinoza_denoising
post_flag=""              # spinoza_denoising
pyb_flag=""               # spinoza_denoising
raw_flag=""               # spinoza_denoising/spinoza_fitprfs
SGE=""                    # spinoza_denoising/spinoza_nordic/spinoza_linerecon/spinoza_registration
cmd_flag=""               # spinoza_registration
COMB_ONLY=""              # spinoza_extractregions
SKIP_COMB=""              # spinoza_extractregions
CLIP=""                   # spinoza_fitprfs
CLIP_FLAG=""              # spinoza_fitprfs
TASK_ID=""                # spinoza_fitprfs
MODEL=""                  # spinoza_fitprfs
GRID=""                   # spinoza_fitprfs
MULTIPLE_DESIGNS=""       # spinoza_fitprfs
FIT_HRF=""                # spinoza_fitprfs
psc_flag=""               # spinoza_fitprfs
zscore_flag=""            # spinoza_fitprfs
use_constr=""             # spinoza_fitprfs
fit_flag=""               # spinoza_fitprfs
fprep_input=0             # spinoza_fitprfs
lbl_flag=""               # spinoza_fitprfs
save_grid=""              # spinoza_fitprfs
bouds_flag=""             # spinoza_fitprfs
merge_flag=""             # spinoza_fitprfs
jobs_flag=""              # spinoza_fitprfs
MODEL_FLAG="--gauss"      # spinoza_fitprfs
REFIT_FLAG=""             # spinoza_fitprfs
PIXEL_FLAG=""             # spinoza_fitprfs
BOLD_FLAG=""              # spinoza_fitprfs
FOLDS_FLAG=""             # spinoza_fitprfs
SKIP_FLAG=""              # spinoza_fitprfs
TRANS_FLAG=""             # spinoza_fitprfs
FIX_FLAG=""               # spinoza_fitprfs
highres_flag=""           # spinoza_freesurfer
XOPTS_=""                 # spinoza_freesurfer
expert_flag=""            # spinoza_freesurfer
TSNR_FLAG=""              # spinoza_nordic
mag_flag=""               # spinoza_nordic
RUNS=""                   # spinoza_nordic
use_bbr=""                # spinoza_fmriprep
WARP_ONLY=""              # spinoza_fmriprep
REMOVE_WF=""              # spinoza_fmriprep
kwargs_file=""            # spinoza_fmriprep
boldref_flag=""           # spinoza_fmriprep
clean_flag=""             # spinoza_fmriprep
fetch_fsl_flag=""         # spinoza_fmriprep
fetch_func_flag=""        # spinoza_fmriprep
mask_flag=""              # spinoza_fmriprep
fetch_anat_flag=""        # spinoza_fmriprep
DOCKER_FLAG=""            # spinoza_fmriprep
WORK_FLAG=""              # spinoza_fmriprep
CRASH_FLAG=""             # spinoza_fmriprep
run_local=""              # spinoza_fmriprep/spinoza_fitprfs
LAYER_FLAG=""             # spinoza_layering
NR_LAYERS=""              # spinoza_layering
GDH_FLAG=""               # spinoza_mgdm
MAN_FLAG=""               # spinoza_masking
REG_TYPE=""               # spinoza_registration
FSL_FLAG=""               # spinoza_registration
DRAW_SAG=""               # spinzoa_sagittalsinus
SES_TYPE=""               # spinoza_scanner2bids
TRIM_FMAP=""              # spinoza_scanner2bids
ADD_INV=""                # spinoza_scanner2bids
pe_dir_flag=""            # spinoza_scanner2bids
reorient_flag=""          # spinoza_scanner2bids
FULL_OW=""                # spinoza_scanner2bids
SEARCH_DEPTH=""           # spinoza_scanner2bids
TR_FLAG=""                # spinoza_scanner2bids
SKIP_TR=""                # spinoza_scanner2bids
UPs=""                    # spinoza_qmrimaps
REG_T1=""                 # spinoza_qmrimaps
BG_FLAG=""                # spinoza_qmrimaps
PARS_FILE=""              # spinoza_qmrimaps
INTENSITY_FLAG=""         # spinoza_qmrimaps
BIAS_FLAG=""              # spinoza_biassanlm
SANLM_FLAG=""             # spinoza_biassanlm
SANLM_METHOD=""           # spinoza_biassanlm
PROT_FLAG=""              # spinoza_scanner2bids
FS_stage="all"            # spinoza_freesurfer
FORCE_FLAG=""             # spinoza_freesurfer
START_STAGE=""            # spinoza_freesurfer
use_t2_flag=""            # spinoza_freesurfer
space_flag=""             # spinoza_denoising
mod_flag=""               # spinoza_mriqc
fd_flag=""                # spinoza_mriqc
t_specified=0             # keep track when t-flag is specified or --func is used (alias for -t func)
ANAT_DEPTH=""             # all anatomical steps
INT_LOWER=""              # lower bound for call_winsorize
INT_UPPER=""              # upper bound for call_winsorize
FAST_LBLS="${DIR_DATA_DERIV}/fmriprep" # spinoza_extractregions

# use long options in bash:
# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
declare -a array
# opts_file="${REPO_DIR}/misc/options.txt"
opts_file="${REPO_DIR}/misc/options.txt"
while IFS= read -r line || [[ -n "$line" ]]; do
    array+=("$line")
done < "$opts_file"

# sort options array
IFS=$'\n' opts=($(sort <<<"${array[*]}"))
unset IFS

while getopts ":-:om:f:s:h:n:t:l:v:p:x:u:r:e:i:c:k:j:q:a:d:w:" arg; do
  case ${arg} in
    -)
      case "${OPTARG}" in
        abc)
          MODEL_FLAG="--abc"
          ;;
        abd)
          MODEL_FLAG="--abd"
          ;;
        affine)
          REG_TYPE="--affine"
          ;;
        anat)
          space_flag="--anat"
          ;;
        anat-only)
          mod_flag="--anat-only"
          ;;        
        ap)
          pe_dir_flag="--ap"
          ;;
        aparc)
          aparc_flag="--aparc"
          ;;
        bgfs)
          use_constr="--bgfs"
          ;;
        bold)
          BOLD_FLAG="--bold"
          ;;
        clean)
          clean_flag="--clean"
          ;;
        cmd)
          cmd_flag="--cmd"
          ;;
        comb-only)
          COMB_ONLY="-c"
          ;;
        ctx)
          OPEN_WITH_FLAG="--ctx"
          ;;
        css)
          MODEL_FLAG="--css"
          ;;
        dcm_fix)
          echo "This functionality is now default and therefore the flag is deprecated"
          exit 1
          ;;
        debug)
          DEBUG="--debug"
          ;;
        denoise)
          SANLM_METHOD="--denoise"
          ;;          
        dog)
          MODEL_FLAG="--dog"
          ;;
        docker)
          DOCKER_FLAG="--docker"
          ;;
        fd)
          fd_flag="--fd"
          ;;
        fetch-anat)
          fetch_anat_flag="--fetch-anat"
          ;;
        fetch-fsl)
          fetch_fsl_flag="--fetch-fsl"
          ;;
        fetch-func)
          fetch_func_flag="--fetch-func"
          ;;
        fix-hrf)
          FIX_FLAG="--fix-hrf"
          ;;
        fmriprep)
          fprep_input=1
          ;;        
        force-exec)
          FORCE_FLAG="--force-exec"
          ;;
        fprep)
          fprep_input=1
          ;;
        freeview)
          DRAW_SAG="--freeview"
          ;;
        full)
          FULL_OW="--full"
          PROC="--full"
          ;;
        fast)
          FAST_LBLS=${DIR_DATA_DERIV}/fast
          ;;          
        fs)
          FS_FLAG="--fs"
          ;;
        fsl)
          DRAW_SAG="--fsl"
          FSL_FLAG="--fsl"
          ;;                
        fsaverage)
          space_flag="--fsaverage"
          ;;
        fsnative)
          space_flag="--fsnative"
          ;;
        func)
          TYPE="func"
          space_flag="--func"
          ;;
        func-only)
          mod_flag="--func-only"
          ;;
        gallery)
          GALLERY_FLAG="--gallery"
          ;;
        gauss)
          MODEL_FLAG="--gauss"
          ;;
        gdh)
          GDH_FLAG="--gdh"
          ;;
        grid)
          GRID="--grid"
          ;;
        help)
          HELP=1
          ;;
        ident)
          IDENT_FLAG="--identity"
          ;;
        identity)
          IDENT_FLAG="--identity"
          ;;
        inv)
          ADD_INV="--inv"
          ;;
        itk)
          DRAW_SAG="--itk"
          ;;
        lh)
          HEMI_FLAG="--lh"
          ;;
        lines)
          SES_TYPE="--lines"
          ;;
        local)
          run_local="--local"
          ;;
        lr)
          pe_dir_flag="--lr"
          ;;          
        mag)
          mag_flag="--mag"
          ;;
        manual)
          SELECTION_FLAG="--manual"
          ;;
        mask)
          mask_flag="--masks"
          ;;
        masks)
          mask_flag="--masks"
          ;;
        merge-ses)
          merge_flag="--merge-ses"
          ;;
        mni-2009)
          space_flag="--mni-2009"
          ;;
        mni-fsl)
          space_flag="--mni-fsl"
          ;;
        multi-design)
          MULTIPLE_DESIGNS="--multi-design"
          ;;
        n4)
          BIAS_FLAG="--n4"
          ;;          
        nelder)
          use_constr="--nelder"
          ;;
        nighres)
          LAYER_FLAG="nighres"
          ;;          
        no-bbr)
          use_bbr="--no-bbr"
          ;;
        no-bounds)
          bounds_flag="--no-bounds"
          ;;
        no-boldref)
          boldref_flag="--no-boldref"
          ;;
        no-clip)
          CLIP="--no-clip"
          ;;
        no-epi)
          MAN_EPI="--no-epi"
          ;;
        no-fit)
          fit_flag="--no-fit"
          ;;
        no-freeview)
          FREEVIEW="--no-freeview"
          ;;
        no-highres)
          highres_flag="--no-highres"
          ;;
        no-hrf)
          FIT_HRF="--no-hrf"
          ;;
        no-lpi)
          reorient_flag="--no-lpi"
          ;;
        no-manual)
          MAN_FLAG="--no-manual"
          ;;
        no-mask)
          USE_MASK="--no-mask"
          ;;          
        no-nordic)
          NORDIC="--no-nordic"
          ;;
        no-raw)
          raw_flag="--no-raw"
          ;;
        no-reg)
          REG_T1="--no-reg"
          ;;          
        no-sanlm)
          SANLM_FLAG="--no-sanlm"
          ;;          
        no-srf)
          SRF_FLAG="--no-srf"
          ;;
        no-t2)
          use_t2_flag="--no-t2"
          ;;
        no-tsnr)
          TSNR_FLAG="--no-tsnr"
          ;;
        no-winsor)
          INTENSITY_FLAG="--no-winsor"
          ;;          
        norm)
          MODEL_FLAG="--norm"
          ;;    
        ow)
          OW="-o"
          ;;
        pa)
          pe_dir_flag="--pa"
          ;;
        psc)
          psc_flag="--psc"
          ;;
        phys)
          phys_flag="--phys"
          ;;
        post-only)
          post_flag="--post-only"
          ;;
        pre-only)
          pre_flag="--pre-only"
          ;;
        pyb-only)
          pyb_flag="--pyb-only"
          ;;
        raw)
          raw_flag="--raw"
          ;;
        refit)
          REFIT_FLAG="--refit"
          ;;          
        remove-surf-wf)
          REMOVE_WF="--remove-surf-wf"
          ;;  
        remove-wf)
          REMOVE_WF="--remove-wf"
          ;;                    
        rh)
          HEMI_FLAG="--rh"
          ;;          
        rigid)
          REG_TYPE="--rigid"
          ;;          
        rl)
          pe_dir_flag="--rl"
          ;;
        save-grid)
          save_grid="--save-grid"
          ;;          
        sge)
          SGE="--sge"
          ;;
        separate-hrf)
          FIT_HRF="--separate-hrf"
          ;;    
        skip-bg)
          BG_FLAG="--skip-bg"
          ;;
        skip-combine)
          SKIP_COMB="--skip-combine"
          ;;          
        skip-fmap)
          TRIM_FMAP="--skip-fmap"
          ;;          
        skip-prf-info)
          skip_prf_info="--skip-prf-info"
          ;;
        skip-settings)
          SKIP_FLAG="--skip-settings"
          ;;
        skip-tr)
          SKIP_TR="--skip-tr"
          ;;
        srf-file)
          SRF_FILE="--srf-file"
          ;;
        spm)
          BIAS_FLAG="--spm"
          ;;
        surface)
          LAYER_FLAG="surface"
          ;;  
        syn)
          REG_TYPE="--syn"
          ;;                  
        tc)
          use_constr="--tc"
          ;;
        take-avg-tr)
          PROT_FLAG="--take-avg-tr"
          ;;
        transpose)
          TRANS_FLAG="--transpose"
          ;;
        try)
          CRASH_FLAG="--try"
          ;;
        ups)
          UPs="--ups"
          ;;
        v1)
          lbl_flag="--v1"
          ;;
        v2)
          lbl_flag="--v2"
          ;;
        verbose)
          verb_flag="--verbose"
          ;;
        warp-only)
          WARP_ONLY="--warp-only"
          ;;
        xopts-clean)
          XOPTS_="--xopts-clean"
          ;;
        xopts-overwrite)
          XOPTS_="--xopts-overwrite"
          ;;
        xopts-use)
          XOPTS_="--xopts-use"
          ;;
        zscore)
          zscore_flag="--zscore"
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            for ii in ${opts[@]}; do echo " ${ii}"; done
            echo
            echo "Unknown option \"--${OPTARG}\", see above for possible option"
            echo "Enter \"$(basename ${0})\" to see what these flags do"
            exit 1
          fi
          ;;
      esac
      ;;
    m)
      MOD=${OPTARG}
      ;;
    d)
      SEARCH_DEPTH="-d ${OPTARG}"
      ANAT_DEPTH=${OPTARG}
      ;;
    s)
      SUB=${OPTARG}
      ;;
    h)
      HEMI=${OPTARG}
      ;;
    n)
      SES=${OPTARG}
      ;;
    o)
      OW="-o"
      ;;
    t)
      TYPE=${OPTARG}
      t_specified=1
      TR_FLAG="-t ${OPTARG}"
      ;;
    l)
      WHICH_MOD=${OPTARG}
      NR_LAYERS="-l ${OPTARG}"
      LS_SES="-l ${OPTARG}"
      INT_LOWER="-l ${OPTARG}"
      ;;
    v)
      VERTICES=${OPTARG}
      ;;
    p)
      P_KWARGS=${OPTARG}
      PARS_FILE="-p $(readlink -f \"${OPTARG}\")"
      ;;
    c)
      C_FLAG=${OPTARG}
      ;;
    x)
      X_KWARGS=${OPTARG}
      ;;
    u)
      CONF=${OPTARG}
      INT_UPPER="-u ${OPTARG}"
      ;;
    r)
      ROI=${OPTARG}
      FS_stage=${OPTARG}
      RUNS="-r ${OPTARG}"
      SET_TR="-r ${OPTARG}"
      ;;
    e)
      n_echoes=${OPTARG}
      START_STAGE=${OPTARG}
      EPI_FILE="-e ${OPTARG}"
      PIXEL_FLAG="-p ${OPTARG}"
      ;;
    i)
      images=${OPTARG}
      ;;
    w)
      WORK_FLAG="-w ${OPTARG}"
      ;;
    a)
      KEEP_RUNS="-a ${OPTARG}"
      ;;
    q)
      SGE_QUEUE="-q ${OPTARG}"
      ;;
    j)
      jobs_flag="-j ${OPTARG}"
      ;;
    f)
      FOLDS_FLAG="-f ${OPTARG}"
      ;;
    k)
      kwargs_file="-k $(readlink -f \"${OPTARG}\")"
      ;;
  esac
done

# set the execute flag
FLAG_executeModule="${MOD}"


#-----------------------------------------------------------------------------
# Create help text | has to be with echo to make colors work from arguments/modules.txt
function Usage {
  # Read in your external files
  ARGS_CONTENT=$(< "${REPO_DIR}/misc/arguments.txt")
  MODULES_CONTENT=$(< "${REPO_DIR}/misc/modules.txt")
  
  echo ""
  echo "==================================================================================================="
  echo "                            MASTER SCRIPT FOR LINE SCANNING ANALYSIS"
  echo "==================================================================================================="
  echo ""
  echo "Main script governing all (pre-)processing steps for high resolution anatomical data, as well as"
  echo "whole-brain fMRI data analyses (specifically population receptive field [pRF]) and linescanning"
  echo "data. All modules can be called with master -m <module>. You can also include an -s flag to"
  echo "process a single subject. See below for additional settings."
  echo ""
  echo "Have fun!"
  echo ""

  # 🔹 Load and print the color-formatted arguments.txt
  eval "printf \"%b\n\" \"$ARGS_CONTENT\""

  echo ""
  echo "Models for pRF fitting:"
  echo "  --gauss           run standard Gaussian model (default) [Dumoulin & Wandell, 2008]"
  echo "  --dog             run difference-of-gaussian model (suppression) [Zuiderbaan, et al. 2013]"
  echo "  --css             run compressive spatial summation model (compression) [Kay, et al. 2013]"
  echo "  --norm            run divisive normalization model (suppression+compression) [Aqil, et al. 2021]"
  echo ""
  echo "Usage:"
  echo "  master -m <MODULES TO RUN>"
  echo "  master -m 01,02,03,04           (run multiple modules in succession)"
  echo "  master -m 00 -q                 (print help-text of module 00)"
  echo "  master -l mgdm                  (get module number for mgdm)"
  echo "  master -m 02 -n 2 --lines       (line-scanning session)"
  echo "  master -m 15 -t func            (run fMRIPrep on available tasks)"
  echo "  master -m 17 --norm --local     (DN-model, local execution)"
  echo ""
  echo "Additional options:"
  echo "  -s <subject>      run single subject"
  echo "  -h <hemi>         specify hemisphere"
  echo "  -n <session>      session number"
  echo "  -t <type|task>    e.g., 'func' or 'anat'"
  echo ""

  eval "printf \"%b\n\" \"$MODULES_CONTENT\""

  echo ""
  echo "--END--"
  echo "---------------------------------------------------------------------------------------------------"
  echo
}

#-------------------------------------------------------------------------------------------------
# Error handling
if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

#-------------------------------------------------------------------------------------------------
# Check for which-module switch 
if [[ ! -z ${WHICH_MOD} ]] && [[ "${@}" != *"-m"* ]]; then
  mod_nr=$(get_module_nr ${WHICH_MOD})
  if [[ ! -z ${mod_nr} ]]; then
    echo "module ${mod_nr} contain(s) \"${WHICH_MOD}\""
  else
    echo "could not find a module associated with \"${WHICH_MOD}\""
  fi
fi

#-------------------------------------------------------------------------------------------------
# Define default session/subject options
SESSION=${SES:+-n ${SES}}
[[ ${SES,,} == "none" ]] && SESSION=""

SUBJECT=${SUB:+-s ${SUB}}

#-------------------------------------------------------------------------------------------------
# STEP 01: Optimal line planning procedure with registration of anat ses-1 to ms ses-2
module=01

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}
if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_lineplanning
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Optimal line planning procedure with registration of anat ses-1 to ms ses-X"

  if [[ -z ${SUB} ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "input" "Need a subject number for this module. Specify with '-s' flag)"
    exit 1
  fi

  if [[ -z ${HEMI} ]] && [[ -z "${HEMI_FLAG}" ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "input" "Need a hemisphere for this module. Specify with '-h' or '--lh'/'--rh' flag)"
    exit 1
  fi

  if [[ -z ${SES} ]]; then
    read -p "Session number not specified; defaulting to \"ses-2\". Sure you want to continue..? (y/n)? " choice
    case "${choice}" in
      y|Y ) c=1;;
      n|N ) c=0;;
      * ) c="invalid";;
    esac

    if [[ ${c} -eq 1 ]]; then
      ses_nr=2
    elif [[ ${c} == "invalid" ]]; then
      echo "Your answer was invalid. Quitting.. Use \"-n X\" to specify your desired session"
      exit 1
    else
      echo "You selected \"no\". Quitting.. Use \"-n X\" to specify your desired session"
      exit 0
    fi
  else
    ses_nr=${SES}
  fi

  # check if we got custom file, otherwise default to directory
  subject=${SUBJECT_PREFIX}${SUB}
  if [[ ! -z ${images} ]]; then
    reg_img=${images}
  else
    reg_img=${DIR_DATA_SOURCE}/${subject}/ses-${ses_nr}/planning
  fi

  cmd=(
    spinoza_lineplanning
    "${OW}"
    "${HEMI_FLAG}"
    "${IDENT_FLAG}"
    -s "${subject}"
    -n "${ses_nr}"
    -i "${reg_img}"
    -p "${DIR_DATA_DERIV}/pycortex/${subject}/ses-${ses_nr}/${subject}_ses-${ses_nr}_desc-coords.csv"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# Deprecation message
module=02

if [[ ${FLAG_executeModule} == ${module} ]]; then
  echo -e "${BOLD_RED}DEPRECATION WARNING${RESET}: module 02 has been split in 02a (${BOLD_BLUE}spinoza_scanner2bids${RESET}) & 02b (${BOLD_BLUE}spinoza_mriqc${RESET})"
  exit 1
fi

#-------------------------------------------------------------------------------------------------
# STEP 02a: Convert raw files to nifti
module=02a

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_scanner2bids
    exit 0
  fi

  if [[ ! -z ${VERTICES} ]]; then
    CUT_VOLS="-v ${VERTICES}"
  fi  

  # check for priors list
  PATTERN_FLAG=""
  if [[ ! -z ${P_KWARGS} ]]; then
    PATTERN_FLAG="-p ${P_KWARGS}"
  fi

  # print module intro
  print_module_start "${module}" "Convert raw files (PAR/REC or DCM) to nifti"

  cmd=(
    spinoza_scanner2bids
    "${SES_TYPE}"
    "${SUBJECT}"
    "${SESSION}"
    "${RUNS}"
    "${OW}"
    "${FULL_OW}"
    "${ADD_INV}"
    "${PROT_FLAG}"
    "${pe_dir_flag}"
    "${reorient_flag}"
    "${DEBUG}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${phys_flag}"
    "${SEARCH_DEPTH}"
    "${TR_FLAG}"
    "${SKIP_TR}"
    "${TRIM_FMAP}"
    "${CUT_VOLS}"
    "${PATTERN_FLAG}"
    "${KEEP_RUNS}"
    "${DIR_DATA_HOME}" "${DIR_DATA_SOURCE}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 02b: MRIQC
module=02b

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_mriqc
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "quality control with MRIQC"

  cmd=(
    spinoza_mriqc
    "${SUBJECT}"
    "${SESSION}"
    "${REMOVE_WF}"
    "${mod_flag}"
    "${fd_flag}"
    "${run_local}"
    "${SGE_QUEUE}"
    "${jobs_flag}"
    "${DIR_DATA_HOME}" "${DIR_DATA_DERIV}/mriqc"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 03a: Reconstruct line-data (scripts Luisa)
module="03a"

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_linerecon
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Reconstruct line data with MRecon"

  if [[ -z ${n_echoes} ]]; then
    N_ECHOES=""
  else
    N_ECHOES="-m ${n_echoes}"
  fi    

  # set PCA components
  NORDIC_COMPS=0
  if [[ ! -z ${C_FLAG} ]]; then
    NORDIC_COMPS=${C_FLAG}
  fi

  cmd=(
    spinoza_linerecon
    "${SUBJECT}"
    "${SESSION}"
    "${N_ECHOES}"
    "${DEBUG}"
    "${OW}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${NORDIC}"
    "${RUNS}"
    "${N_COMPS}"
    "${FOLDS_FLAG}"
    -c "${NORDIC_COMPS}"
    "${DIR_DATA_HOME}" "${DIR_DATA_SOURCE}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 03b: LSprep | basic quality control and parsing into h5-file
module="03b"

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_lsprep
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "LSprep | basic quality control"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 2"
  fi

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  cmd=(
    spinoza_lsprep
    "${SUBJECT}"
    "${SESSION}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${KWARGS_FLAG}"
    "${DIR_DATA_HOME}" "${DIR_DATA_DERIV}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 04: Estimate T1's from mp2rage and memp2rage and do some multiparametric mapping
module=04

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_qmrimaps
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Multiparametric mapping using pymp2rage"

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi
  
  cmd=(
    spinoza_qmrimaps
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${UPs}"
    "${FULL_OW}"
    "${BG_FLAG}"
    "${PARS_FILE}"
    "${FORCE_FLAG}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${jobs_flag}"
    "${KWARGS_FLAG}"
    "${BIAS_FLAG}"
    "${REG_T1}"
    "${INTENSITY_FLAG}"
    "${INT_LOWER}"
    "${INT_UPPER}"
    "${DIR_DATA_HOME}" "${DIR_DATA_DERIV}/pymp2rage"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# Deprecation message
module=05

if [[ ${FLAG_executeModule} == ${module} ]]; then
  echo -e "${BOLD_RED}DEPRECATION WARNING${RESET}: module 05 has been split in 05a (anat > anat) & 05b (anat > FSL MNI)"
  exit 1
fi

#-------------------------------------------------------------------------------------------------
# STEP 05a: Register T1 from memp2rage to T1 from mp2rage
module=05a

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_registration
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Register multiple anatomical files to same space"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")

  cmd=(
    spinoza_registration
    "${REG_TYPE}"
    "${SUBJECT}"
    "${OW}"
    "${SESSION}"
    "${verb_flag}"
    "${FSL_FLAG}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/ants"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 05b: Register T1 from mp2rage to MNI152 for sagittal sinus mask
module=05b

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_registration
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Register T1 from mp2rage to MNI152NLin6Asym (1mm) for sagittal sinus mask"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  cmd=(
    spinoza_registration
    "${REG_TYPE}"
    "${SUBJECT}"
    "${OW}"
    "${SESSION}"
    "${SGE}"
    "${verb_flag}"
    "${SGE_QUEUE}"
    "${FSL_FLAG}"
    "${jobs_flag}"
    "${cmd_flag}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/ants" "mni"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 06: Calculate averages of UNIT1, INV1, and INV2
module=06

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_averageanatomies
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Calculate averages of the T1-weighted image and T1map"

  if [[ ${DATA^^} == "AVERAGE" ]]; then

    if [[ -d "${DIR_DATA_DERIV}/pymp2rage" ]]; then
      INPUT_DIR="${DIR_DATA_DERIV}/pymp2rage"
    else
      INPUT_DIR="${DIR_DATA_HOME}"
    fi  

    cmd=(
      spinoza_averageanatomies
      "${SUBJECT}"
      "${SESSION}"
      "${INPUT_DIR}" "${DIR_DATA_DERIV}/pymp2rage"
    )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"

    if [[ $? -ne 0 ]]; then
      print_error_msg "$(basename ${0})" "${cmd[0]}"
      exit 1
    fi

  else
    echo "The variable \"DATA\" is \"${DATA}\"; must be \"AVERAGE\" for this module."
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 07: Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio
module=07

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_sinusfrommni
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio or T2w directly"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  
  cmd=(
    spinoza_sinusfrommni
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${DRAW_SAG}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/ants" "${DIR_DATA_DERIV}/manual_masks"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 08: Perform bias field correction with ANTs' N4 algorithm on INV2
module=08

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_biassanlm
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Perform bias field correction and SANLM-filtering"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=2
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  cmd=(
    spinoza_biassanlm
    "${SUBJECT}"
    "${SESSION}"
    "${BIAS_FLAG}"
    "${OW}"
    "${KWARGS_FLAG}"
    "${SANLM_FLAG}"
    "${SANLM_METHOD}"
    "${USE_MASK}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/denoised"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 09: Brain extraction
module=09

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_brainextraction
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Brain extract T1w with ANTs|FSL|CAT12"

  DO_STUFF="cat12"
  if [[ ${DO_STUFF} ==  "inv2" ]]; then
  
    cmd=(
      spinoza_brainextraction
      "${SUBJECT}"
      "${SESSION}"
      "${DIR_DATA_DERIV}/ants" "${DIR_DATA_DERIV}/skullstripped" "${DIR_DATA_DERIV}/manual_masks" "fsl"
    )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  elif [[ ${DO_STUFF} == "cat12" ]]; then

    # check where inputs live
    if [[ -z ${ANAT_DEPTH} ]]; then
      ANAT_DEPTH=3
    fi

    INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  
    fprep_flag=""
    if [[ ${fprep_input} -eq 1 ]]; then
      fprep_flag="--fprep"
    fi

    cmd=(
      spinoza_brainextraction
      "${SUBJECT}"
      "${SESSION}"
      "${fprep_flag}"
      "${OW}"
      "${PROC}"
      "${FS_FLAG}"
      "${INT_LOWER}"
      "${INT_UPPER}"
      ${INPUT_DIR} ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_DERIV}/manual_masks cat12
    )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  fi

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 10: Do noise level estimation with AFNI's automask function
module=10

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_nordic
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Thermal noise reduction using NORDIC [Vizioli, et al. 2021]"

  cmd=(
    spinoza_nordic
    "${OW}"
    "${SGE}"
    "${SUBJECT}"
    "${SESSION}"
    "${RUNS}"
    "${TSNR_FLAG}"
    "${mag_flag}"
    "${SGE_QUEUE}"
    "${DIR_DATA_HOME}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    
    
  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 11: Use nighres to get skull and dura mask
module=11

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_dura
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Use nighres to get skull and dura mask"
  
  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  cmd=(
    spinoza_dura
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${INPUT_DIR}" "${DIR_DATA_HOME}" "${DIR_DATA_DERIV}/nighres" "${DIR_DATA_DERIV}/manual_masks"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 12: Create mask of the sagittal sinus with manual edits in ITKsnap
module=12

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_sagittalsinus
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Create sagittal sinus mask from R2*-image"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  
  cmd=(
    spinoza_sagittalsinus
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${DRAW_SAG}"
    "${TR_FLAG}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/manual_masks"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 13: Combine all masks and apply to average
module=13

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_masking
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Combine all masks and apply to image"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=4
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  cmd=(
    spinoza_masking
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${MAN_FLAG}"
    "${INT_UPPER}"
    "${INT_LOWER}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/masked_${DATA,,}" "${DIR_DATA_DERIV}/manual_masks" "${DIR_DATA_DERIV}/skullstripped"
  )

    print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})""${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 14: FreeSurfer
module=14

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_freesurfer
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Run FreeSurfer outside of fMRIprep"

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=5
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  # check for expert file
  if [ ! -z ${X_KWARGS} ]; then
    expert_flag="-x ${X_KWARGS}"
  fi

  # check -f we got '-e' flag
  if [[ ! -z ${START_STAGE} ]]; then
    START_STAGE="-e ${START_STAGE}"
  fi   
  
  cmd=(
    spinoza_freesurfer
    "${SUBJECT}"
    "${SESSION}"
    "${highres_flag}"
    "${expert_flag}"
    "${XOPTS_}"
    "${run_local}"
    "${SGE}"
    "${OW}"
    "${START_STAGE}"
    "${FORCE_FLAG}"
    "${use_t2_flag}"
    "${SGE_QUEUE}"
    "${jobs_flag}"
    "${INPUT_DIR}" "${FS_stage}" "${DIR_DATA_HOME}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 15: Preprocess data with fMRIprep
module=15

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_fmriprep
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Preprocess data with fMRIprep"

  if [[ -z ${TYPE} ]]; then
    TYPE="anat"
  else
    TYPE=${TYPE}
  fi

  # decide on config file (overwrite earlier defaults)
  if [[ ! -z ${CONF} ]]; then
    if [[ ${CONF,,} == "none" ]]; then
      confFile=""
    else
      if [[ -f ${CONF} ]]; then
        confFile="-u ${CONF}"
      else
        echo
        print_line -
        print_error_msg "$(basename ${0})" config "Could not find config file ${BOLD_GREEN}${confFile}${RESET}"
        exit 1
      fi
    fi
  else
    confFile=""
  fi

  # check where inputs live
  if [[ -z ${ANAT_DEPTH} ]]; then
    ANAT_DEPTH=6
  fi

  INPUT_DIR=$(find_hierarchical_anatomy "${ANAT_DEPTH}")  

  cmd=(
    spinoza_fmriprep
    "${WARP_ONLY}"
    "${use_bbr}"
    "${run_local}"
    "${SUBJECT}"
    "${SESSION}"
    "${confFile}"
    "${REMOVE_WF}"
    "${kwargs_file}"
    "${boldref_flag}"
    "${RUNS}"
    "${OW}"
    "${jobs_flag}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${KEEP_RUNS}"
    "${clean_flag}"
    "${fd_flag}"
    "${DOCKER_FLAG}"
    "${fetch_fsl_flag}"
    "${fetch_func_flag}"
    "${fetch_anat_flag}"
    "${mask_flag}"
    "${WORK_FLAG}"
    "${CRASH_FLAG}"
    -f "${DIR_DATA_HOME}"
    -m "${TYPE}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}" "${DIR_DATA_HOME}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"  

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 16: fMRI-data denoising with pybest using fmriprep'f output
module=16

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_denoising
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Data denoising with pybest"
  
  # --func = alias for -t func, but refers to space, not task. Force actual usage of -t to set task ID, otherwise it'll use "func" for task..
  if [[ ${t_specified} -eq 1 ]]; then
    if [[ ! -z ${TYPE} ]]; then
      TASK_ID="-t ${TYPE}"
    fi   
  fi

  if [[ -z ${images} ]]; then
    INPUT_DIR="${DIR_DATA_DERIV}/fmriprep"
  else
    INPUT_DIR="${images}"
  fi

  # set PCA components
  if [[ ! -z ${C_FLAG} ]]; then
    PCA_COMPS="-c ${C_FLAG}"
  fi

  # check for expert options
  if [ ! -z ${X_KWARGS} ]; then
    expert_flag="-x ${X_KWARGS}"
  fi

  cmd=(
    spinoza_denoising
    "${raw_flag}"
    "${SUBJECT}"
    "${SESSION}"
    "${SGE}"
    "${OW}"
    "${FULL_OW}"
    "${PCA_COMPS}"
    "${TASK_ID}"
    "${space_flag}"
    "${SGE_QUEUE}"
    "${jobs_flag}"
    "${pre_flag}"
    "${post_flag}"
    "${pyb_flag}"
    "${FORCE_FLAG}"
    "${expert_flag}"
    "${INPUT_DIR}" "${DIR_DATA_DERIV}/pybest"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 17: pRF-fitting with pRFpy
module=17

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_fitprfs
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "pRF-fitting with pRFpy"

  # set PNG directory
  if [[ -z ${images} ]]; then
    PNG_DIR="${DIR_DATA_SOURCE}"
  else
    PNG_DIR="${images}"
  fi

  # set input directory depending on the presence of pybest output
  PRF_INPUT="${DIR_DATA_DERIV}/pybest"
  if [[ ${fprep_input} -eq 1 ]]; then
    PRF_INPUT="${DIR_DATA_DERIV}/fmriprep"
  fi

  # specify a specific task-ID to be fitted
  if [[ ! -z ${TYPE} ]]; then
    TASK_ID="-t ${TYPE}"
  fi  

  # set design clipper flag
  if [[ ! -z ${C_FLAG} ]]; then
    CLIP_FLAG="-c ${C_FLAG}"
  fi  

  # set constraints flag; note that 'use_constr' can also be set with '--tc' or '--bgfs'
  if [ ! -z ${X_KWARGS} ]; then
    use_constr="-x ${X_KWARGS}"
  fi

  if [[ ! -z ${VERTICES} ]]; then
    CUT_VOLS="-v ${VERTICES}"
  fi  

  cmd=(
    spinoza_fitprfs
    "${use_constr}"
    "${CLIP}"
    "${CLIP_FLAG}"
    "${verb_flag}"
    "${zscore_flag}"
    "${raw_flag}"
    "${fit_flag}"
    "${TASK_ID}"
    "${FIT_HRF}"
    "${run_local}"
    "${GRID}"
    "${MULTIPLE_DESIGNS}"
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${MODEL_FLAG}"
    "${CUT_VOLS}"
    "${lbl_flag}"
    "${save_grid}"
    "${bouds_flag}"
    "${merge_flag}"
    "${jobs_flag}"
    "${kwargs_file}"
    "${space_flag}"
    "${SGE_QUEUE}"
    "${SET_TR}"
    "${PIXEL_FLAG}"
    "${REFIT_FLAG}"
    "${FOLDS_FLAG}"
    "${BOLD_FLAG}"
    "${SKIP_FLAG}"
    "${TRANS_FLAG}"
    "${FIX_FLAG}"
    "${SGE}"
    "${PRF_INPUT}" "${DIR_DATA_DERIV}/prf" "${PNG_DIR}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 18: Determine best vertex with pycortex
module=18

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_bestvertex
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Determine best vertex with pycortex"

  if [[ ! -z ${VERTICES} ]]; then
    VERT="-v ${VERTICES}"
  fi

  if [[ ! -z ${ROI} ]]; then
    LABEL_FILE=${ROI}
  else
    LABEL_FILE="V1_custom"
  fi

  if [[ ! -z ${TYPE} ]]; then
    TASK_ID="-t ${TYPE}"
  fi

  cmd=(
    spinoza_bestvertex
    "${MODEL}"
    "${TASK_ID}"
    "${GRID}"
    "${SUBJECT}"
    "${SESSION}"
    "${VERT}"
    "${FREEVIEW}"
    "${OW}"
    "${FULL_OW}"
    "${lbl_flag}"
    "${MODEL_FLAG}"
    "${SRF_FLAG}"
    "${SRF_FILE}"
    "${EPI_FILE}"
    "${GALLERY_FLAG}"
    "${aparc_flag}"
    "${SELECTION_FLAG}"
    "${MAN_EPI}"
    "${EPI_FILE}"
    "${LS_SES}"
    "${skip_prf_info}"
    "${DIR_DATA_HOME}" "${DIR_DATA_DERIV}" "${LABEL_FILE}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 19: FAST segmentation with FSL
module=19

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_segmentfast
    exit 0
  fi

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  # print module intro
  print_module_start "${module}" "FAST segmentation with FSL"

  cmd=(
    spinoza_segmentfast
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${KWARGS_FLAG}"
    "${SKULLSTRIP}" "${DIR_DATA_DERIV}/fast"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 20: MGDM segmentation with nighres
module=20

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_mgdm
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "MGDM segmentation with nighres"

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  # check for priors list
  PRIOR_LIST=""
  if [[ ! -z ${P_KWARGS} ]]; then
    PRIOR_LIST="-p ${P_KWARGS}"
  fi  

  cmd=(
    spinoza_mgdm
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${GDH_FLAG}"
    "${SGE}"
    "${SGE_QUEUE}"
    "${KWARGS_FLAG}"
    "${PRIOR_LIST}"
    "${DIR_DATA_DERIV}/skullstripped" "${DIR_DATA_DERIV}/nighres" "${DIR_DATA_DERIV}/manual_masks"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 21: Region extraction with nighres
module=21

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_extractregions
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Region extraction with nighres"

  if [[ ! -z ${ROI} ]]; then
    ROI=${ROI}
  else
    ROI="cerebrum"
  fi

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  cmd=(
    spinoza_extractregions
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${COMB_ONLY}"
    "${SKIP_COMB}"
    "${KWARGS_FLAG}"
    -f "${FAST_LBLS}"
    "${DIR_DATA_DERIV}/nighres" "${DIR_DATA_DERIV}/manual_masks" "${ROI}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 22: Cortex reconstruction with nighres
module=22

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_cortexrecon
    exit 0
  fi

  if [[ ! -z ${ROI} ]]; then
    ROI=${ROI}
  else
    ROI="cerebrum"
  fi

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  # print module intro
  print_module_start "${module}" "Cortex reconstruction with nighres"
  
  if [[ ${LAYER_FLAG} == "nighres" ]]; then
    PROBSEG="${DIR_DATA_DERIV}/nighres"
  else
    PROBSEG="${DIR_DATA_DERIV}/manual_masks"
  fi

  cmd=(
    spinoza_cortexrecon
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${KWARGS_FLAG}"
    "${PROBSEG}" "${DIR_DATA_DERIV}/nighres" "${ROI}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 23: Equivolumetric layering with either nighres or Wagstyl's surface_tools
module=23

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_layering
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Equivolumetric layering"

  if [[ -z ${LAYER_FLAG} || ${LAYER_FLAG} == "nighres" ]]; then
    INPUT_DIR="${DIR_DATA_DERIV}/nighres"
    SOFTWARE="nighres"
  elif [[ ${LAYER_FLAG} == "surface" ]]; then
    SOFTWARE="surface"
    INPUT_DIR="${FS}"
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" input "Unknown flag \"${LAYER_FLAG}\". Must be \"nighres\" or \"surface\""
    exit 1
  fi

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  cmd=(
    spinoza_layering
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${NR_LAYERS}"
    "${KWARGS_FLAG}"
    "${INPUT_DIR}" "${SOFTWARE}"
  )
  
  print_cmd "${cmd[@]}" && eval "${cmd[@]}"

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 24: Subcortex parcellation with MASSP
module=24

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_subcortex
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Subcortex parcellation with MASSP"

  # check for kwargs
  if [[ ! -z ${X_KWARGS} ]]; then
    KWARGS_FLAG="-x ${X_KWARGS}"
  fi

  # check for kwargs
  if [[ ! -z ${P_KWARGS} ]]; then
    KWARGS_MASSP="-p ${P_KWARGS}"
  fi

  cmd=(
    spinoza_subcortex
    "${SUBJECT}"
    "${SESSION}"
    "${DIR_DATA_HOME}"
    "${KWARGS_FLAG}"
    "${KWARGS_MASSP}"
    "${DIR_DATA_DERIV}/skullstripped" "${DIR_DATA_DERIV}/nighres"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"  

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 25: Project line to surface with a registration cascade
module=25

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_line2surface
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Registration cascade to project line to surface"

  if [[ -z ${SUB} ]]; then
    echo
    print_line -
    print_error_msg "$(basename ${0})" "input" "Need a subject number for this module. Specify with '-s' flag)"
    exit 1
  fi

  # check line-scanning session | default to 2
  if [[ -z ${LS_SES} ]]; then
    LS_SES=2
  else
    LS_SES=$(echo ${LS_SES} | awk '{print $2}')
  fi

  subject=${SUBJECT_PREFIX}${SUB}

  # input anat as defined in module 00
  cmd=(
    spinoza_line2surface
    -s "${SUBJECT}"
    -y "${DIR_DATA_HOME}/${subject}/ses-${LS_SES}/anat/${subject}_ses-${LS_SES}_acq-MP2RAGE_T1w.nii.gz"
    -o "${CTX}"
    -i "${NIGHRES}/${subject}/ses-${LS_SES}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"  

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 26: Profile sampling based on Nighres' equivolumetric layering approach
module=26

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_profiling
    exit 0
  fi

  # print module intro
  print_module_start "${module}" "Profile sampling using Nighres"

  if [[ -z ${X_KWARGS} ]]; then
    KWARGS="T2starmap"
  else
    KWARGS=${X_KWARGS}
  fi    

  # check if there's a direct input
  SAMPLE_IMG=""
  if [[ ! -z "${images}" ]]; then
    SAMPLE_IMG="-i ${images}"
  fi

  # spinoza_profiling "${SUBJECT}" "${SESSION}" "${OW}" "${DIR_DATA_DERIV}/nighres" ${DIR_DATA_HOME} T1map
  cmd=(
    spinoza_profiling
    "${SUBJECT}"
    "${SESSION}"
    "${OW}"
    "${SAMPLE_IMG}"
    "${DIR_DATA_DERIV}/nighres" "${DIR_DATA_HOME}" "${X_KWARGS}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "${cmd[0]}"
    exit 1
  fi

  print_module_end "${module}"

fi

#-------------------------------------------------------------------------------------------------
# STEP 27: Project line to surface with a registration cascade
module=27

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ ${HELP} -eq 1 ]]; then
    spinoza_suit
    exit 0
  fi

  echo
  print_line -
  print_error_msg "$(basename ${0})" "master" "This is not implemented in 'master' yet. Use ${BOLD_BLUE}call_spmsuit${RESET}."
  call_spmsuit
  
  # # print module intro
  # print_module_start "${module}" "Cerebellum segmentation with SUIT"

  # # check where inputs live
  # INPUT_DIR=$(find_hierarchical_anatomy 6)

  # # spinoza_profiling "${SUBJECT}" "${SESSION}" "${OW}" "${DIR_DATA_DERIV}/nighres" ${DIR_DATA_HOME} T1map
  # cmd=(spinoza_suit
  #   "${SUBJECT}"
  #   "${SESSION}"
  #   "${OW}"
  #   ${INPUT_DIR} ${DIR_DATA_DERIV}/suit)

  # echo
  #   print_cmd "${cmd[@]}" && eval "${cmd[@]}"    

  # if [[ $? -ne 0 ]]; then
  #   print_error_msg "$(basename ${0})" "spinoza_suit"
  #   exit 1
  # fi

  # print_module_end "${module}"

fi
