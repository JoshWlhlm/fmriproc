#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# launcer function
launch_viewer() {
  local ref="${1}"
  local mask="${2}"
  local software="${3}"
  local msg="${4}"

  # decide cmd
  if [[ ${software} == "itk" ]]; then
    func="itksnap"
    cmd="launch_${func} -g ${ref} -s ${mask}"
  elif [[ ${software} == "fv" ]]; then
    func="freeview"
    cmd="launch_${func} -v "${ref}" -v ${mask}:colormap=lut:opacity=1"
  elif [[ ${software} == "fsl" ]]; then
    func="fsleyes"
    cmd="launch_${func} --scene ortho "${ref}" "${mask}" --overlayType mask"
  fi

  # check if function exists
  call_checkfunction "${func}"
  if [[ $? -eq 0 ]]; then
    echo
    print_line -
    echo -e "Starting '${BOLD_RED}${func}${RESET}'. ${msg} ${BOLD_RED}ALWAYS SAVE YOUR CHANGES!${RESET}"

    print_cmd "${cmd}" && eval "${cmd}" 2>/dev/null
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "$(basename ${cmd})"
      exit 1
    fi    
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" "call_checkfunction" "Make sure you have ${func} installed!"
    exit 1
  fi
}

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_sagittalsinus

This script creates the sagittal sinus mask based on the R2*-map from pymp2rage. It requires the 
user to refine the mask a bit, because the R2*-map is imperfect especially around the putamen and 
other iron-rich regions inside the brain. It will start ITKsnap for the user to do the editing.
If you have MEMP2RAGE-data, then the script will look for the R2*-file in the specified ANAT 
folder. If this is somewhere else, just copy it into that directory.

Usage:
  spinoza_sagittalsinus [arguments] [options] <anat folder> <mask folder> <software [itk|fv]>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or n)
  -t <thresh>     threshold for R2*-file to generate sinus mask (default = 0.07). You can check 
                  this first with e.g., ITK-Snap ('launch_itksnap'), then call this function

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --itk           use ITK-Snap for manual editing [default]
  --fsl           use FSLeyes for editing
  --freeview      use FreeView for editing

Positional:
  <input dir>     folder where anatomical files live
  <skullstrip>    output folder for masks

Example:
  spinoza_sagittalsinus --freeview \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/manual_masks
  spinoza_sagittalsinus --itk -s 01 \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/manual_masks

Call with master:
  # vanilla (runs with ITK-Snap)
  master -m $(get_module_nr $(basename ${0})) -s 01

  # run with FSLeyes
  master -m $(get_module_nr $(basename ${0})) -s 01 --fsl

---------------------------------------------------------------------------------------------------

USAGE

}

use_software="itk"
thresh=0.07
# Check for subject & session flags
while getopts hos:n:t:-: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        itk)
          use_software="itk"
          ;;
        fsl)
          use_software="fsl"
          ;;
        freeview)
          use_software="fv"
          ;;
        ow)
          OW=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;; 
    t)  thresh=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

ANAT=${@:$OPTIND:1}
MASKS=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${ANAT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# check if folder with anatomicals exists
if [[ ! -d "${ANAT}" ]]; then
  echo 
  print_line -
  print_error_msg "$(basename ${0})" "find" "Folder with T1w-file ${BOLD_GREEN}${ANAT}${RESET} does not exist"
  exit 1
fi

#-----------------------------------------------------------------------------
# decide message depending on software
if [[ "${use_software}" == "itk" ]]; then
  viewer="ITK-Snap"
  msg="Fill in the sagittal sinus where needed."
elif [[ "${use_software}" == "fv" ]]; then
  viewer="FreeView"
  msg="Select sinus-file and enable voxel editing (Head+pencil icon)."
elif [[ "${use_software}" == "fsl" ]]; then
  viewer="FSLeyes"
  msg="Settings → Ortho → tick 'overlay list'. Then: Tools → Edit mode → Set value to 1. Save by pressing floppy disk (bottom left)"
else
  echo
  print_line -
  print_error_msg "$(basename ${0})" "launch_viewer" "Unknown option specified: ${software}. I can deal with: \"itk\" [${BOLD_GREEN}ITK-Snap${RESET}], \"fv\" [${BOLD_GREEN}FreeView${RESET}], or \"fsl\" [${BOLD_GREEN}FSLeyes${RESET}]"
  exit 1
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Generate sagittal sinus mask R2*-mask or manual"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  input_dir="${ANAT}/${base_path}"
  mask_dir="${MASKS}/${base_path}"

  #-----------------------------------------------------------------------------
  # continue if input directory doesn't exist
  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi

  if [[ ! -d "${mask_dir}" ]]; then
    mkdir -p "${mask_dir}"
  fi

  #-----------------------------------------------------------------------------
  # R2starmap is only present with MP2RAGEME
  if [[ " ${ACQ[*]} " =~ " MP2RAGEME " ]]; then
    r2star=$(
      find "${input_dir}" \
      -type f \
      -name "*acq-${DATA_UPR}_*" \
      -and -name "*R2starmap.nii.gz" \
      2>/dev/null
    )

    #-----------------------------------------------------------------------------
    # make sinus from R2star
    if [[ ! -z "${r2star}" ]]; then

      sinus_mask="${mask_dir}/${base}_acq-${DATA_UPR}_desc-sagittalsinus.nii.gz"
      if [[ ! -f "${sinus_mask}" || ${OW} -eq 1 ]]; then

        # print header
        print_subject_header ${sub_name}
        
        #-----------------------------------------------------------------------------
        # threshold R2star mask and binarize mask
        echo -e "Thresholding [${BOLD_RED}${thresh}${RESET} and binarizing ${BOLD_GREEN}$(basename ${r2star})${RESET}"
        cmd=(
          fslmaths
          "${r2star}"
          -thr "${thresh}"
          -bin
          -fillh
          "${sinus_mask}"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "fslmaths"
          exit 1
        fi

        #-----------------------------------------------------------------------------
        # now manually edit the file
        t1w=$(
          find "${input_dir}" \
          -type f \
          -name "*T1w*" \
          -and -name "*${DATA_UPR}*" \
          -and -name "*.nii.gz" \
          2>/dev/null
        )

        if [[ ! -z "${t1w}"  ]]; then
          # launch the viewer
          echo -e "Launching selected viewer [${BOLD_RED}${viewer}${RESET}]"
          cmd=(
            launch_viewer
            "${t1w}"
            "${sinus_mask}"
            "${use_software}"
            \"${msg}\"
          )

          # print and run
          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ $? -ne 0 ]]; then
            print_error_msg "$(basename ${0})" "launch_viewer"
            exit 1
          fi            
        else
          print_file_not_in_dir "${sub_name}" "*acq-${DATA_UPR}*, *T1w.nii.gz" "${input_dir}"
          continue
        fi
      else
        print_output_exists "${sub_name}" "${sinus_mask}"
      fi
    else
      print_file_not_in_dir "${sub_name}" "*acq-${DATA_UPR}_*, *R2starmap.nii.gz" "${input_dir}"
    fi
  else

    #-----------------------------------------------------------------------------
    # manual sinus
    sinus_mask="${mask_dir}/${base}_acq-${DATA_UPR}_desc-sagittalsinus.nii.gz"
    if [[ ! -f "${sinus_mask}" || ${OW} -eq 1 ]]; then

      t1w=$(
        find "${input_dir}" \
        -type f \
        -name "${sub_name}*" \
        -and -name "*${DATA_UPR}_*" \
        -and -not -iname "*space-*" \
        -and -name "*T1w.nii.gz" \
        2>/dev/null
      )

      if [[ ! -z "${t1w}" ]]; then

        # print header
        print_subject_header ${sub_name}
        print_create_img "${sinus_mask}"

        # create empty image so we can load it as segmentation
        cmd=(
          call_createimg
          "${t1w}"
          "${sinus_mask}"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_createimg"
          exit 1
        fi

        #-----------------------------------------------------------------------------
        # launch the viewer
        echo -e "Launching selected viewer [${BOLD_RED}${viewer}${RESET}]"
        cmd=(
          launch_viewer
          "${t1w}"
          "${sinus_mask}"
          "${use_software}"
          \"${msg}\"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          print_error_msg "$(basename ${0})" "launch_viewer"
          exit 1
        fi
      else
        print_file_not_in_dir "${sub_name}" "*acq-${DATA_UPR}*, *T1w.nii.gz" "${input_dir}"
        continue
      fi
    else
      print_output_exists "${sub_name}" "${sinus_mask}"
    fi
  fi
done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
end_timer
