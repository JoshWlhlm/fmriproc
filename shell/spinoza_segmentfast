#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# function to rename output
rename_fast_outputs() {

  local output_root="${1}"

  OUTPUTS=(mixeltype pve_0 pve_1 pve_2 pveseg seg)
  echo "Renaming output"
  for o in ${OUTPUTS[@]}; do
    if [[ ${o} == "pve_0" ]]; then
      t="label-CSF_probseg"
    elif [[ ${o} == "pve_1" ]]; then
      t="label-GM_probseg"
    elif [[ ${o} == "pve_2" ]]; then
      t="label-WM_probseg"
    elif [[ ${o} == "seg" ]]; then
      t="desc-seg"
    elif [[ ${o} == "mixeltype" ]]; then
      t="desc-mixtype"
    elif [[ ${o} == "pveseg" ]]; then
      t="desc-pve"
    fi
    
    out_t="${output_root}_${t}.nii.gz"
    out_o="${output_root}_${o}.nii.gz"
    if [[ -f "${out_o}" ]]; then
      echo -e " ${BOLD_RED}${o}${RESET} >> ${BOLD_RED}${t}${RESET} | wrote ${BOLD_GREEN}$(basename ${out_t})${RESET}"
      mv "${out_o}" "${out_t}" 2>/dev/null
    fi

  done
}

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_segmentfast

tissue segmentation with FAST using skullstripped inputs created during spinoza_maskaverages. It is
important that the range of these images is set correctly, with T1w having a range of 0-4095, and
the T1map having a range of (0,5050). This should automatically be the case if you have ran the py-
mp2rage module in combination with the masking module prior to running this. If not, run 
call_rescale on these images.

Usage:
  spinoza_segmentfast [arguments] [options] <skullstripped dir> <output dir> <overwrite>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -x <kwargs>     Additional commands to be passed to 'FAST'. Format should be comma-separated 
                  flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  E.g,:
                    "-x -t=[0.25,0.005,250];-x=some_mask.nii.gz"

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output

Positional:
  <anat folder>   folder containing the files required for FAST. Input must be skullstripped
  <output>        output folder (<subject>/[<ses->] will be appended!)

Example:
  spinoza_segmentfast \$DIR_DATA_DERIV/skullstripped \$DIR_DATA_DERIV/fast
  spinoza_segmentfast -s 001 -n 1 \$DIR_DATA_DERIV/skullstripped \$DIR_DATA_DERIV/fast

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

  # kwargs
  master -m $(get_module_nr $(basename ${0})) -s 01 -x -R=0.5,-S=3,--nopve

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
OW=0
while getopts :-:hos:n:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in       
        ow)
          OW=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;;
    o)  OW=1
          ;;
    x)  kwargs="${OPTARG}"
          ;; 
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

SKULL="${@:$OPTIND:1}"
FSL="${@:$OPTIND+1:1}"

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SKULL}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# parse into string
if [[ ! -z ${kwargs} ]]; then
  kwargs=$(echo ${kwargs} | tr ' =' ' ' | tr ',' ' ')
fi

# Add -N if not already present
if ! echo "${kwargs}" | grep -q '\-N'; then
  kwargs="${kwargs} -N"
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Tissue segmentation with FAST"

#-----------------------------------------------------------------------------
# Run it

for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  input_dir="${SKULL}/${base_path}"
  output_dir="${FSL}/${base_path}"

  if [ ! -d "${input_dir}" ]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi
  
  #-----------------------------------------------------------------------------
  # Running FAST with call_fslfast

  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi

  # find input
  input_t1w=$(
    find "${input_dir}" \
    -type f \
    -name "*${DATA_UPR}*" \
    -and -name "*T1w.nii.gz" \
    2>/dev/null
  )

  # set output root
  outputroot="${output_dir}/${base}_acq-${DATA_UPR}"

  # overwrite
  if [[ ${OW} -eq 1 ]]; then
    if [[ -d "${output_dir}" ]]; then
      echo "Overwrite mode: deleting files with \"${base}_acq-${DATA_UPR}\""
      rm -r "${output_dir}/${base}_acq-${DATA_UPR}"* 2>/dev/null
    fi
  fi

  #-----------------------------------------------------------------------------
  # run if input exists
  if [[ -f "${input_t1w}" ]]; then

    seg_file="${outputroot}_desc-seg.nii.gz"
    if [[ ! -f "${seg_file}" ]]; then

      # print header
      print_subject_header ${sub_name}

      if [[ ! -f "${output_dir}" ]]; then
        mkdir -p "${output_dir}"
      fi

      #-----------------------------------------------------------------------------
      # run if output root doesn't exist
      if [[ ! -f "${outputroot}_seg.nii.gz" ]]; then
        echo -e "Running FAST on ${BOLD_GREEN}${input_t1w}${RESET}"
        cmd=(
          call_fslfast
          "${input_t1w}"
          "${outputroot}"
          "${kwargs}"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          print_error_msg "$(basename ${0})" "call_fslfast"
          exit 1
        fi
      else
        echo "Found existing output; skipping FAST"
      fi

      # rename outputs
      rename_fast_outputs "${outputroot}"

      # done
      echo "Done"
    else
      print_output_exists "${sub_name}" "${seg_file}"
    fi
  else
    print_file_not_in_dir "${sub_name}" "T1w" "${input_dir}"
    continue
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
