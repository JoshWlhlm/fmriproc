#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source "${SETUP_FILE}"
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_registration

Wrapper for registration with ANTs. This script should be preceded by spinoza_qmri maps. It utili-
zes the variable ACQ in the setup script to derive what should be registered to what. In theory, 
the first element of ACQ is taken as reference, and the second element will be registered to that. 
If ACQ has only one element and 'MNI' is specified, this first element is registered to the MNI tem-
plate. This step is relatively obsolete given that we don't really need it in MNI space + we can do 
that step with fMRIprep, but can be useful if you need the registration file mapping T1w-to-MNI, 
without warping the actual 4D file to MNI-space (saves disk space).

Usage:
  spinoza_registration [options] <anat folder> <output folder> <registration type>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  --affine            use affine-registration (12 parameters)
  --rigid             use rigid-body registration (6 parameters). Default if <registration type> 
                      != 'mni' and no registration method is specified
  --syn               use SyN-diffeomorphic registration. Default if <registration type> == 'mni'
                      and no registration method is specified
  --ofsl              also output the matrix in FSL-compatible format (not available for SyN)
  -c|--sge            submit job to cluster (SGE); given that we have to rename files after regi-
                      stration, we'll wait for the job to finish if submitted. This can still help
                      with memory issues (e.g., if your local machine does not have enough RAM).
  --cmd               only echo command; can be useful to submit multiple subjects without waiting 
                      for the process to finish. This requires the master command to be re-run again
                      to apply and files
  -q <queue>          submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -j <n_cpus>         number of CPUs to use (default = 1)
  <anat folder>       folder containing images for registration. If DATA == "AVERAGE", we'll look
                      for T1w-images containing 'acq-MP2RAGE_' and 'acq-MP2RAGEME_', create a warp
                      file, and apply this file to MP2RAGEME-files with ('T1w' 'T1map' 'R2starmap
                      Files ending with something other than 'T1w' or 'T1map' will also be copied 
                      to have 'acq-AVERAGE' in the filename, rather than 'space-MP2RAGE'. This en-
                      sures compatibility with 'spinoza_sagittalsinus' when DATA == AVERAGE. Regis-
                      tered files will end up in the <anat folder>, the warp file itself in <output
                      folder>
  <output folder>     folder where warp files are stored. Registered files are stored in <anat fol-
                      der>
  <registration type> which registration should be carried out. If empty, we'll default to a regis-
                      tration between MP2RAGEME and MP2RAGE (assumes that DATA == AVERAGE). This 
                      version is called as 'master -m 05a'. If 'mni', we'll register the T1w-file
                      in <anat folder> with FSL's 1mm template (MNI152NLin6Asym). This version is 
                      called as 'master -m 05b'. If type == 'mni', we'll default to the first ele-
                      ment in ${ACQ[@]} to register to MNI. Generally, this will/should be MP2RAGE     

Example:
  spinoza_registration <project>/derivatives/pymp2rage <project>/derivatives/ants mp2rage
  spinoza_registration -s 001 -n 1 <project>/derivatives/pymp2rage <project>/derivatives/ants

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

run_local=1
OW=
reg_type=""
verb_flag=""
FSL_FMT=0
verb=0
fsl_flag=""
n_cpus=1
echo_cmd=0

# Check for subject flag
while getopts :-:ocs:n:q:j: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        rigid)
          reg_type="--rigid"
          ;;
        syn)
          reg_type="--syn"
          ;;
        affine)
          reg_type="--affine"
          ;;  
        sge)
          run_local=0
          ;;    
        cmd)
          echo_cmd=1
          ;;            
        verbose)
          verb_flag="--verbose"
          verb=1
          ;;    
        ofsl)
          FSL_FMT=1
          fsl_flag="--ofsl"
          ;;                            
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;  
      esac;;                    
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    c)  SGE=1
          ;;
    o)  OW=1
          ;;
    j)  n_cpus=${OPTARG}
          ;;           
    q)  SGE_QUEUE=${OPTARG}
          ;;             
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
TYPE=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ -z ${TYPE} ]]; then
  TYPE="${ACQ[0],,}"
fi

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# intro
start_timer "Registration with antsRegistration"

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  echo
  echo "**************************************** Processing ${sub_name} ***************************************"

  if [ -z ${WARP_2_MP2RAGE} ]; then
    WARP_2_MP2RAGE=("T1w" "T1map" "R2starmap")
  fi

  input_dir=${INPUT}/${base_path} 
  output_dir=${OUTPUT}/${base_path}

  write_output=0
  if [[ ${TYPE,,} == ${ACQ[0],,} ]]; then

    write_output=1
    if [[ -z ${reg_type} ]]; then
      reg_type="--rigid"
    fi

    if [[ ${#ACQ[@]} -eq 2 ]]; then
      # set code
      code=1 # MP2RAGE+MP2RAGEME

      # find files
      moving_files=$(find -L "${input_dir}" -type f -iname "*${ACQ[1]^^}_*T1w.nii.gz" -not -name "*space-*")
      fixed_file=$(find -L "${input_dir}" -type f -iname "*${ACQ[0]^^}_*T1w.nii.gz" -not -name "*space-*")
    else
      code=2 # Multiple MP(2)RAGES
      fixed_file=$(find -L "${input_dir}" -type f -iname "*${ACQ[0]^^}_run-1*T1w.nii.gz" -not -name "*space-*")
      moving_files=$(find -L "${input_dir}" -type f -iname "*${ACQ[0]^^}*run-[2-9]*T1w.nii.gz" -not -name "*space-*")
    fi
  elif [[ ${TYPE,,} == "mni" ]]; then
    if [[ -z ${reg_type} ]]; then
      reg_type="--syn"
    fi
    code=3
    fixed_file=${FSLDIR}/data/standard/MNI152_T1_1mm.nii.gz
    moving_files=$(find -L "${input_dir}" -type f -iname "*${ACQ[0]^^}_*T1w.nii.gz" -not -name "._*")
  else
    echo "Incorrect usage. Please specify mp2rage or mni"
    Usage >&2
  fi

  # Check if required files exist
  if [[ ! -f ${fixed_file} || -z ${moving_files} ]]; then
    echo "Missing input images"
    continue
  fi

  if [[ ! -d ${output_dir} ]]; then
    mkdir -p ${output_dir}
  fi
  
  # loop through moving files
  for moving in ${moving_files[@]}; do

    # MP2RAGE+MP2RAGEME
    if [[ ${code} -eq 1 ]]; then
      txt="Registering ${ACQ[1]} to ${ACQ[0]}"
      space=${ACQ[0]}
      ext="from-${ACQ[1]^^}_to-${ACQ[0]^^}"
    elif [[ ${code} -eq 2 ]]; then
      # Multiple MP(2)RAGES
      txt="Registering ${moving} to ${fixed_file}"
      run_mv=$(get_id ${moving} run)
      run_fx=$(get_id ${fixed_file} run)
      space="run${run_fx}"
      ext="from-run${run_mv}_to-run${run_fx}"
    elif [[ ${code} -eq 3 ]]; then
      # MNI
      txt="Registering ${ACQ[0]^^} to MNI152 template"
      space="MNI152NLin6Asym"
      ext="from-T1w_to-${space}"
    fi

    outWarp=${output_dir}/${base}_${ext}_mode-image_warp.nii.gz
    outInvWarp=${output_dir}/${base}_${ext}_mode-image_invwarp.nii.gz
    outGenAff=${output_dir}/${base}_${ext}_mode-image_xfm.mat
    outFSLAff=${output_dir}/${base}_${ext}_mode-image_fsl.mat
    cmd_file=${output_dir}/${base}_${ext}_mode-image_cmd.txt

    # echo "${txt}"
    # echo "Code: ${code}"
    # echo "FIXED: ${fixed_file}"
    # echo "MOVING: ${moving}"
    # echo "WARP: ${outGenAff}"
    # exit 1

    if [[ ! -f ${outGenAff} ]]; then
      if [[ ! -f ${output_dir}/${base}_${ext}genaff.mat ]]; then
        cmd="""call_antsregistration \
          ${fsl_flag} \
          ${verb_flag} \
          ${reg_type} \
          -j ${n_cpus} \
          ${fixed_file} \
          ${moving} \
          ${output_dir}/${base}_${ext}"""

        echo "$(echo ${cmd} | tr '\n' ' ')"
        eval ${cmd}

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_antsregistration exited with non-zero status"
          exit 1
        fi

        if [[ ! -f ${output_dir}/${base}_${ext}genaff.mat ]]; then
          echo "ERROR in $(basename ${0}): \"${output_dir}/${base}_${ext}genaff.mat\" was not created"
          continue
        fi

        if [[ ${reg_type} == "--syn" ]]; then
          mv ${output_dir}/${base}_${ext}1Warp.nii.gz ${outWarp} 2>/dev/null
          mv ${output_dir}/${base}_${ext}1InverseWarp.nii.gz ${outInvWarp} 2>/dev/null
        fi

        # we'll have this file regardless of registration type
        mv ${output_dir}/${base}_${ext}genaff.mat ${outGenAff} 2>/dev/null
        mv ${output_dir}/${base}_${ext}command.txt ${cmd_file} 2>/dev/null

        # check if we got fsl output
        if [[ -f ${output_dir}/${base}_${ext}fsl.mat ]]; then
          mv ${output_dir}/${base}_${ext}fsl.mat ${outFSLAff} 2>/dev/null
        fi
      fi
    else
      echo "Skipping ${moving}, registration files exist."
    fi

    # write output files
    if [[ ${write_output} -eq 1 ]]; then

      echo "Applying warps.."
      for out in ${WARP_2_MP2RAGE[@]}; do
        
        # check if file exists and warp it
        suff=`echo $moving | rev | cut -d"_" -f1 | rev | cut -d"." -f1`
        in_file=$(dirname ${moving})/$(basename ${moving} _${suff}.nii.gz)_${out}.nii.gz
        if [ -f ${in_file} ]; then

          # define output
          acq=$(get_id ${moving} acq)
          output=$(dirname ${moving})/$(basename ${moving} _${suff}.nii.gz)_space-${space}_${out}.nii.gz

          # overwrite if requested
          if [[ ${OW} -eq 1 ]]; then
            rm ${output} 2>/dev/null
          fi

          # define command
          if [[ ! -f ${output} ]]; then
            if [[ ${reg_type} == "--syn" ]]; then
              matrices="${outGenAff} ${outWarp}"
              invert="0 0"
            else
              matrices="${outGenAff}"
              invert="0"
            fi          
            echo " creating \"${output}\""
            cmd="call_antsapplytransforms -i ${invert} ${fixed_file} ${in_file} ${output} ${matrices}"
            eval ${cmd}

            if [[ $? -ne 0 ]]; then
              echo "ERROR in $(basename ${0}): call_antsapplytransforms failed with \"${cmd}\""
              exit 1
            fi

          else
            echo " `basename ${output}` exists"
          fi
        fi
      done
      echo "Done"
    fi
  done
done

#-----------------------------------------------------------------------------
# outro
end_timer
