#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_registration

Wrapper for registration with ANTs. This script should be preceded by spinoza_qmri maps. It utili-
zes the variable ACQ in the setup script to derive what should be registered to what. In theory, 
the first element of ACQ is taken as reference, and the second element will be registered to that. 
If ACQ has only one element and 'MNI' is specified, this first element is registered to the MNI 
template. This step is relatively obsolete given that we don't really need it in MNI space + we 
can do that step with fMRIprep, but can be useful if you need the registration file mapping 
T1w-to-MNI, without warping the actual 4D file to MNI-space (saves disk space).

Scenarios:
  - MP2RAGE+MP2RAGEME [ACQ=("MP2RAGE" "MP2RAGEME")], 1st element is reference ('MP2RAGE'):

      # fixed
      The fixed image is the first element of \${ACQ[@]}. In this case, 'MP2RAGE'. We search for
      this file in \${input_dir}, which is given by the input directory to this function (see
      <anat folder>), combined with the subject ID (and session ID if given). Thus, this file
      must contain 'MP2RAGE' and 'T1w.nii.gz' and must be in native space (if the file is
      transformed, it will have a 'space-' tag, this must be absent!).

      fixed_file=\$(
        find -L "\${input_dir}" \\
        -type f \\
        -iname "*\${ACQ[0]^^}_*T1w.nii.gz" \\
        -not -name "*space-*"
      )

      # moving
      The moving file is the second element of \${ACQ[@]}. In this case, 'MP2RAGEME'. The same
      logic holds for this file.

      moving_files=\$(
        find -L "\${input_dir}" \\
        -type f \
        -iname "*\${ACQ[1]^^}_*T1w.nii.gz" \\
        -not -name "*space-*"
      )

  - Multiple MPRAGE(s) [ACQ=("MP2RAGE)]; ref should have 'run-1', subsequent files should have 
    'run-[2-i]':

      # fixed
      If multple MPRAGEs are acquired, they must have a 'run-' identifier and \${ACQ[@]} should
      only contain 'MPRAGE'. In this scenario, 'run-1' will be taken as reference. Therefore, it 
      should have 'MPRAGE', 'run-1', and 'T1w.nii.gz' in its filename.

      fixed_file=\$(
        find -L "\${input_dir}" \\
        -type f \\
        -iname "*\${ACQ[0]^^}_run-1*T1w.nii.gz" \\
        -not -name "*space-*"
      )

      # moving
      The moving files are found based on the same logic, other than a run-identifier greater
      than 1.

      moving_files=\$(
        find -L "\${input_dir}" \\
        -type f \\
        -iname "*\${ACQ[0]^^}*run-[2-9]*T1w.nii.gz" \\
        -not -name "*space-*"
      )

    - To MNI [acq=("MP2RAGE") | acq=("MP2RAGEME") | acq=("MPRAGE")]:

      # fixed
      The fixed file is the 1mm MNI template from FSL (MNI152NLin6Asym).
      fixed_file=\${FSLDIR}/data/standard/MNI152_T1_1mm.nii.gz

      # moving
      Moving files are all files containing the first element of \${ACQ[@]}.

      moving_files=\$(
        find -L "\${input_dir}" \\
        -type f \\
        -iname "*\${ACQ[0]^^}_*T1w.nii.gz" \\
        -not -name "._*"
      )      

Resulting transformation will be applied to files containing the suffixes in \$WARP_2_MP2RAGE-
variable if the registration does NOT involve the MNI-template!. If nothing is 
specified in the \$CONFIG_FILE, it will be set to:

  WARP_2_MP2RAGE=("T1w" "T1map" "R2starmap")

Usage:
  spinoza_registration [arguments] [options] <anat folder> <output folder> <registration type>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -j <cpus>       number of cores to use (default is 1), internally sets the ITK-variable:
                  'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS', which will be reset to 1 after the
                  process

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --affine        use affine-registration (12 parameters)
  --rigid         use rigid-body registration (6 parameters). Default if <registration type> 
                  != 'mni' and no registration method is specified
  --syn           use SyN-diffeomorphic registration. Default if <registration type> == 'mni'
                  and no registration method is specified
  --fsl           also output the matrix in FSL-compatible format (not available for SyN, though
                  see: https://github.com/gjheij/fmriproc/blob/main/fmriproc/misc/ants2fsl.md)

Positional:
  <anat folder>   folder containing images for registration. If \$DATA == "AVERAGE", we'll look
                  for T1w-images containing 'acq-MP2RAGE_' and 'acq-MP2RAGEME_', create a warp
                  file, and apply this file to MP2RAGEME-files with ('T1w' 'T1map' 'R2starmap
                  Files ending with something other than 'T1w' or 'T1map' will also be copied 
                  to have 'acq-AVERAGE' in the filename, rather than 'space-MP2RAGE'. This en-
                  sures compatibility with 'spinoza_sagittalsinus' when \$DATA == AVERAGE. Regis-
                  tered files will end up in the <anat folder>, the warp file itself in <output
                  folder>
  <output folder> folder where warp files are stored. Registered files are stored in <anat folder>
  <reg type>      which registration should be carried out. If empty, we'll default to a regis-
                  tration between MP2RAGEME and MP2RAGE (assumes that \$DATA == AVERAGE). This 
                  version is called as 'master -m 05a'. If 'mni', we'll register the T1w-file
                  in <anat folder> with FSL's 1mm template ('MNI152NLin6Asym'). This version is 
                  called as 'master -m 05b'. If type == 'mni', we'll default to the first ele-
                  ment in \${ACQ[@]} to register to MNI. Generally, this will/should be 
                  MP2RAGE     

Example:
  spinoza_registration \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/ants mp2rage
  spinoza_registration -s 001 -n 1 \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/ants

Call with master:
  # anat to anat
  master -m 05a -s 01

  # also save transformations following FSL-convention
  master -m 05a -s 01 --fsl

  # anat to MNI with 10 jobs
  master -m 05b -s 01 -j 10

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

OW=
reg_type=""
verb_flag=""
FSL_FMT=0
verb=0
fsl_flag=""
n_cpus=1

# Check for subject flag
while getopts :-:hocs:n:j: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        rigid)
          reg_type="--rigid"
          ;;
        syn)
          reg_type="--syn"
          ;;
        affine)
          reg_type="--affine"
          ;;     
        verbose)
          verb_flag="--verbose"
          verb=1
          ;;    
        fsl)
          FSL_FMT=1
          fsl_flag="--fsl"
          ;;                            
        ow)
          OW=1
          ;;            
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;             
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;
    j)  n_cpus=${OPTARG}
          ;;           
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
TYPE=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ -z ${TYPE} ]]; then
  TYPE=$(make_lower "${ACQ[0]}")
else
  TYPE=$(make_lower "${TYPE}")
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Registration with antsRegistration"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"
  
  #-----------------------------------------------------------------------------
  # print header
  print_subject_header ${sub_name}

  if [ -z ${WARP_2_MP2RAGE} ]; then
    WARP_2_MP2RAGE=("T1w" "T1map" "R2starmap")
  fi

  #-----------------------------------------------------------------------------
  # input/output
  input_dir="${INPUT}/${base_path}"
  output_dir="${OUTPUT}/${base_path}"

  write_output=0
  if [[ "${TYPE}" == $(make_lower "${ACQ[0]}") ]]; then

    write_output=1
    if [[ -z ${reg_type} ]]; then
      reg_type="--rigid"
    fi

    #-----------------------------------------------------------------------------
    # MP2RAGE+MP2RAGEME
    if [[ ${#ACQ[@]} -eq 2 ]]; then
      # set code
      code=1

      # fixed
      fixed_file=$(
        find -L "${input_dir}" \
        -type f \
        -iname "*$(make_upper ${ACQ[0]})_*T1w.nii.gz" \
        -not -name "*space-*"
      )
      
      # moving
      moving_files=$(
        find -L "${input_dir}" \
        -type f \
        -iname "*$(make_upper ${ACQ[1]})_*T1w.nii.gz" \
        -not -name "*space-*"
      )

    #-----------------------------------------------------------------------------
    # Multiple MP(2)RAGES
    else
      code=2

      # fixed
      fixed_file=$(
        find -L "${input_dir}" \
        -type f \
        -iname "*$(make_upper ${ACQ[0]})*run-1*T1w.nii.gz" \
        -not -name "*space-*"
      )

      # moving
      moving_files=$(
        find -L "${input_dir}" \
        -type f \
        -iname "*$(make_upper ${ACQ[0]})*run-[2-9]*T1w.nii.gz" \
        -not -name "*space-*"
      )

    fi

  #-----------------------------------------------------------------------------
  # anat to MNI
  elif [[ "${TYPE}" == "mni" ]]; then
    if [[ -z "${reg_type}" ]]; then
      reg_type="--syn"
    fi
    code=3
    fixed_file="${FSLDIR}/data/standard/MNI152_T1_1mm.nii.gz"
    moving_files=$(
      find -L "${input_dir}" \
      -type f \
      -iname "*$(make_upper ${ACQ[0]})_*T1w.nii.gz" \
      -not -name "._*"
    )

  #-----------------------------------------------------------------------------
  # unknown type
  else
    echo "Incorrect usage. Please specify mp2rage or mni"
    Usage
  fi

  #-----------------------------------------------------------------------------
  # Check if required files exist
  if [[ ! -f "${fixed_file}" || -z "${moving_files}" ]]; then
    print_error_msg "$(basename ${0})" "find" "Could not find ${BOLD_GREEN}FIXED${RESET} and ${BOLD_GREEN}MOVING${RESET} images for TYPE=\"${BOLD_RED}${TYPE}${RESET}\" (code=\"${BOLD_RED}${code}${RESET}\"). Is your setup correct?"
    exit 1
  fi

  if [[ ! -d "${output_dir}" ]]; then
    mkdir -p "${output_dir}"
  fi

  #-----------------------------------------------------------------------------
  # loop through moving files
  for moving in "${moving_files[@]}"; do

    #-----------------------------------------------------------------------------
    # MP2RAGE+MP2RAGEME
    if [[ ${code} -eq 1 ]]; then
      txt="Registering ${ACQ[1]} to ${ACQ[0]}"
      space=${ACQ[0]}
      ext="from-$(make_upper ${ACQ[1]})_to-$(make_upper ${ACQ[0]})"
    elif [[ ${code} -eq 2 ]]; then
      # Multiple MP(2)RAGES
      txt="Registering ${moving} to ${fixed_file}"
      run_mv=$(get_id "${moving}" run)
      run_fx=$(get_id "${fixed_file}" run)
      space="run${run_fx}"
      ext="from-run${run_mv}_to-run${run_fx}"
    elif [[ ${code} -eq 3 ]]; then
      # MNI
      txt="Registering $(make_upper ${ACQ[0]}) to MNI152 template"
      space="MNI152NLin6Asym"
      ext="from-T1w_to-${space}"
    fi

    #-----------------------------------------------------------------------------
    # set outputs
    outWarp="${output_dir}/${base}_${ext}_mode-image_warp.nii.gz"
    outInvWarp="${output_dir}/${base}_${ext}_mode-image_invwarp.nii.gz"
    outGenAff="${output_dir}/${base}_${ext}_mode-image_xfm.mat"
    outFSLAff="${output_dir}/${base}_${ext}_mode-image_fsl.mat"
    cmd_file="${output_dir}/${base}_${ext}_mode-image_cmd.txt"

    #-----------------------------------------------------------------------------
    # run if warp file doesn't exist
    if [[ ! -f "${outGenAff}" ]]; then
      if [[ ! -f "${output_dir}/${base}_${ext}genaff.mat" ]]; then
        cmd=(
          call_antsregistration
          "${fsl_flag}"
          "${verb_flag}"
          "${reg_type}"
          -j "${n_cpus}"
          "${fixed_file}"
          "${moving}"
          "${output_dir}/${base}_${ext}"
        )

        # print and run
        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 || ! -f "${output_dir}/${base}_${ext}genaff.mat" ]]; then

          # debugging purposes
          if [[ $? -eq 0 ]]; then
            echo
            print_line -
          fi

          print_error_msg "$(basename ${0})" "call_antsregistration" "${BOLD_GREEN}${output_dir}/${base}_${ext}genaff.mat${RESET} not created" 
          exit 1
        fi
        
        #-----------------------------------------------------------------------------
        # rename warp fields
        if [[ ${reg_type} == "--syn" ]]; then
          mv "${output_dir}/${base}_${ext}1Warp.nii.gz" "${outWarp}" 2>/dev/null
          mv "${output_dir}/${base}_${ext}1InverseWarp.nii.gz" "${outInvWarp}" 2>/dev/null
        fi

        #-----------------------------------------------------------------------------
        # we'll have this file regardless of registration type
        mv "${output_dir}/${base}_${ext}genaff.mat" "${outGenAff}" 2>/dev/null
        mv "${output_dir}/${base}_${ext}command.txt" "${cmd_file}" 2>/dev/null

        #-----------------------------------------------------------------------------
        # check if we got fsl output
        if [[ -f "${output_dir}/${base}_${ext}fsl.mat" ]]; then
          mv "${output_dir}/${base}_${ext}fsl.mat" "${outFSLAff}" 2>/dev/null
        fi
      fi
    else
      echo "Skipping ${moving}, registration files exist."
    fi

    #-----------------------------------------------------------------------------
    # write output files
    if [[ ${write_output} -eq 1 ]]; then

      echo "Applying warps.."
      for out in ${WARP_2_MP2RAGE[@]}; do
        
        #-----------------------------------------------------------------------------
        # check if file exists and warp it
        suff=$(
          echo "${moving}" | \
          rev | \
          cut -d"_" -f1 | \
          rev | \
          cut -d"." -f1
        )

        # define in file
        in_file="${moving/_${suff}.nii.gz/_${out}.nii.gz}"
        if [ -f "${in_file}" ]; then

          # define output
          acq=$(get_id "${moving}" acq)
          output="${moving/_${suff}.nii.gz/_space-${space}_${out}.nii.gz}"

          # overwrite if requested
          if [[ ${OW} -eq 1 ]]; then
            rm "${output}" 2>/dev/null
          fi

          #-----------------------------------------------------------------------------
          # define command
          if [[ ! -f "${output}" ]]; then
            if [[ "${reg_type}" == "--syn" ]]; then
              matrices="${outGenAff} ${outWarp}"
              invert="0 0"
            else
              matrices="${outGenAff}"
              invert="0"
            fi
   
            echo " creating \"${output}\""
            cmd=(
              call_antsapplytransforms
              -i \"${invert}\"
              "${fixed_file}"
              "${in_file}"
              "${output}"
              \"${matrices}\"
            )

            # print and run
            eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "call_antsapplytransforms"
              exit 1
            fi
          else
            echo " $(basename ${output}) exists"
          fi
        fi
      done
      echo "Done"
    fi
  done
done

#-----------------------------------------------------------------------------
# outro
end_timer
