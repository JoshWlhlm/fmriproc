#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_mgdm

Tissue segmentation using nighres' MGDM. It assumes that you've run module from this pipeline before,
so that you're directory structure is like derivatives/<process>/${SUBJECT_PREFIX}xxx/ses-x. For this script, you
need to give the path to the skullstripped directory up until ${SUBJECT_PREFIX}xxx, the output mgdm directory,
and the directory containing masks that are used to filter out stuff in the MGDM segmentation.

By default, it's set to overwrite existing files in order to be able to iterate over the structural
preprocessing pipeline for optimizing the segmentations. To disable, run this particular module with
the overwrite switch set to 'n': master -m <module> -o n

Usage:
  spinoza_mgdm [arguments] [options] <skullstripped> <mgdm> <masks>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -j <n_cpus>         number of CPUs to use (default = 1)
  -q <queue>          submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -x <kwargs>         Additional commands to be passed to 'mgdm_segmentation'. Format should
                      be comma-separated flags as follows: 
                        - if you specify a flag and values | <flag>=<value>
                        - if you specify a flag only | <flag>

                      combine as:
                      "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                      This allows bash commands to be translated to python commands

Options:
  -o|--ow             overwrite existing files
  --gdh               run GdH-pipeline version (call_gdhmgdm, default is call_nighresmgdm). This
                      versions uses input from fMRIPrep and FreeSurfer as inputs for MGDM.
  --sge               submit job to cluster (SGE)

Positional:
  <skullstripped>     path to skullstripped data
  <mgdm>              path to output directory
  <masks>             path to masks

Example:
  spinoza_mgdm SKULLSTRIP NIGHRES/mgdm MASKS
  spinoza_mgdm -s 001 -n 1 SKULLSTRIP NIGHRES/mgdm MASKS
  spinoza_mgdm -s 001 -n 1 --gdh SKULLSTRIP NIGHRES/mgdm MASKS

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage
fi

# Check for subject & session flags
OW=0
type=""
run_local=1
n_cpus=1
SGE_QUEUE=${SGE_QUEUE_LONG}
kwargs_flag=""
while getopts :-:os:n:t:q:j:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        gdh)
          type="gdh"
          ;;                  
        ow)
          OW=1
          ;;
        sge)
          run_local=0
          ;;                                     
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    t)  type=${OPTARG}
          ;;
    o)  OW=1
          ;;     
    j)  n_cpus=${OPTARG}
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;   
    x)  kwargs_flag="--kwargs ${OPTARG}"
          ;;               
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
MASKS=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "MGDM segmentation with Nighres"

# nighres required this module
check_python_package "nighres"

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  input_dir=${INPUT}/${base_path}
  output_dir=${OUTPUT}/${base_path}
  mask_dir=${MASKS}/${base_path}

  if [ ! -d ${input_dir} ]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi
  
  #----------------------------------------------------------------------------------------------------------------------------------------------
  # Look for files
  bet_uni=$(find "${input_dir}" -type f \( -name "*acq-${DATA^^}*" -and -not -name "*gdh*" -and -name "*T1w.nii.gz" \) 2>/dev/null)
  bet_t1m=$(find "${input_dir}" -type f \( -name "*acq-${DATA^^}*" -and -not -name "*gdh*" -and -name "*T1map.nii.gz" \) 2>/dev/null)
  mask_outside=$(find "${mask_dir}" -type f \( -name "*acq-${DATA^^}*" -and -name "*-outside*" -and -name "*.nii.gz" \) 2>/dev/null)

  # Define nighres output names
  output_root="${base}_acq-${DATA^^}_desc"
  masked_seg=${output_dir}/mgdm
  mgdm_seg=${masked_seg}/${output_root}-mgdm_seg.nii.gz

  # OVERWRITE ALL CREATED FILES; SHOULD BE DEFAULT AND CAN BE DISABLE BY SPECIFYING MASTER -M <MODULE> -O N
  if [[ ${OW} -eq 1 ]]; then
    # txt="Overwrite mode: deleting files with \"${output_root}\""
    if [[ -d ${masked_seg} ]]; then
      rm -r ${masked_seg}/${output_root}* 2>/dev/null
    fi
  fi

  # if we want the GdH-mgdm script, run it directly.
  execute_cmd=0
  if [[ ${type} == "gdh" ]]; then
    if [[ ! -f ${mgdm_seg} ]]; then
      run_mode="Running ${BOLD_RED}GhD-version${RESET} of MGDM with ${BOLD_BLUE}call_gdhmgdm${RESET}"
      execute_cmd=1

      if [[ ! -f ${mask_outside} ]]; then
        reason="Could not find \"outside\" mask.. [GdH]"
        execute_cmd=0
      fi

      fs_mask=${SUBJECTS_DIR}/${sub_name}/mri/brainmask.mgz
      brainmask=$(find -L "${input_dir}" -type f \( -name "mask*" -and -name "*acq-${DATA^^}*" \) 2>/dev/null)
      if [[ -f ${fs_mask} ]]; then
        use_mask=${fs_mask}
      else
        if [[ ! -z ${brainmask} ]]; then
          use_mask=${brainmask}
        else
          reason="not sure what mask to use.. [GdH]"
          execute_cmd=0
        fi
      fi

      # decide the job type
      call_="call_gdhmgdm"
      job="$(decide_job_type "${call_}" "${output_root}-mgdm" "${run_local}" "${DIR_LOGS}" "${n_cpus}" "${SGE_QUEUE}")"

      # define command
      cmd=(
        ${job}
        --inputdir "${input_dir}"
        --brainmask "${use_mask}"
        --duramask "${mask_outside}"
        --outputdir "${masked_seg}"
        --name "${output_root}"
        "${kwargs_flag}"
      )

    else
      reason="segmentation already present [GdH]"
    fi
  else

    if [[ ! -d $(dirname ${mgdm_seg}) ]]; then
      mkdir -p $(dirname ${mgdm_seg})
    fi

    if [[ ! -f ${mgdm_seg} ]]; then

      execute_cmd=1
      run_mode="Running ${BOLD_RED}regular version${RESET} of MGDM with ${BOLD_BLUE}call_nighresmgdm${RESET}"

      if [[ -z ${bet_uni} ]]; then
        execute_cmd=0
        reason="Could not find skullstripped T1-image.. "
      fi

      if [[ -z ${bet_t1m} ]]; then
        execute_cmd=0
        reason="Could not find skullstripped T1map-image.. "
      fi
      
      # decide the job type
      call_="call_nighresmgdm"
      job="$(decide_job_type "${call_}" "${output_root}-mgdm" "${run_local}" "${DIR_LOGS}" "${n_cpus}" "${SGE_QUEUE}")"

      # define command
      cmd=(
        "${job}"
        --t1w "${bet_uni}"
        --t1map "${bet_t1m}"
        --outputdir "${masked_seg}"
        --name "${output_root}"
        "${kwargs_flag}"
      )

    else
      execute_cmd=0
      reason="segmentation already present"
    fi
  fi

  if [[ ${execute_cmd} -eq 1 ]]; then
    if [[ ${run_local} -eq 1 ]]; then

      # print header
      print_subject_header ${sub_name}
      echo -e ${run_mode}
      print_create_img "${mgdm_seg}"
    fi

    # execute command
    if [[ ${run_local} -eq 1 ]]; then
      print_cmd "${cmd[@]}"
    fi

    eval "${cmd[@]}"
    if [[ $? != 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "${call_}"
      exit 1
    fi

  else
    echo -e "${BOLD_CYAN}${sub_name}${RESET}: Not executing MGDM; ${BOLD_RED}${reason}${RESET}"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
