#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_mgdm

Tissue segmentation using nighres' MGDM. It assumes that you've run module from this pipeline 
before, so that you're directory structure is like derivatives/<process>/<subject>/ses-x. For this 
script, you need to give the path to the skullstripped directory up until <subject>, the output 
mgdm directory, and the directory containing masks that are used to filter out stuff in the MGDM 
segmentation.

Usage:
  spinoza_mgdm [arguments] [options] <skullstripped> <mgdm> <masks>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -j <n_cpus>     number of CPUs to use (default = 1)
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in \$CONFIG_FILE.
  -p|--priors     The algorithm accepts 4 input files, each representing a different prior. In any
                  case, we need a T1w and T1map-file, which can come from different sources (e.g.,
                  field strength, atlases, or sequence). These sources include:
                  ['DWIFA3T', 'DWIMD3T', 'T1map9T', 'Mp2rage9T', 'T1map7T', 'Mp2rage7T', 'PV',
                  'Filters', 'T1pv', 'Mprage3T', 'T1map3T', 'Mp2rage3T', 'HCPT1w', 'HCPT2w',
                  'NormMPRAGE'].

                  For each input file, one of these sources must be specified. By default, the
                  priors are set to:
                  
                  prior_list = [
                    "Mp2rage7T",
                    "T1map7T",
                    "Filters",
                    "Filters"
                  ]

                  where:
                    - T1w-file (-t|--t1w) comes from a 7T MP2RAGE sequence
                    - T1map-file (-m|--t1map) comes from a 7T MP2RAGE sequence
                    - Mask representing the skull (-s|--skull) is a "Filters"
                    - Mask representing the dura (-d|--dura) is a "Filters"
                  
                  Format should be comma-separated list for the number of inputs used. For the
                  regular version, this means 4 (T1w, T1map, skull, and dura). For GdH-version,
                  this means 2 (T1w, T1map):

                    E.g., "-p Mprage3T,T1map3T,Filters,Filters"

  -x <kwargs>     Additional commands to be passed to 'mdgm_segmentation'. Format should be comma-
                  separated flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  This allows bash commands to be translated to python commands

Options:
  -h|--help       print this help text
  -o|--ow         overwrite existing files
  --gdh           run GdH-pipeline version (call_gdhmgdm, default is call_nighresmgdm). This ver-
                  sion uses input from fMRIPrep and FreeSurfer as inputs for MGDM.
  --sge           submit job to cluster (SGE)

Positional:
  <skullstr.>     path to skullstripped data
  <mgdm>          path to output directory
  <masks>         path to masks

Example:
  spinoza_mgdm \$SKULLSTRIP \$NIGHRES/mgdm \$MASKS
  spinoza_mgdm -s 001 -n 1 \$SKULLSTRIP \$NIGHRES/mgdm \$MASKS
  spinoza_mgdm -s 001 -n 1 --gdh \$SKULLSTRIP \$NIGHRES/mgdm \$MASKS

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

  # run Gilles' version
  master -m $(get_module_nr $(basename ${0})) -s 01 --gdh

  # customize priors (default = Mp2rage7T,T1map7T,Filters,Filters)
  master -m $(get_module_nr $(basename ${0})) -s 01 -p Mprage3T,T1map3T,Filters,Filters

  # submit and specify kwargs
  master -m $(get_module_nr $(basename ${0})) -s 01 --sge -x diffuse_probabilities=True

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
OW=0
type=""
run_local=1
n_cpus=1
SGE_QUEUE="${SGE_QUEUE_LONG}"
kwargs_flag=""
while getopts :-:hos:n:t:q:j:x:p: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        gdh)
          type="gdh"
          ;;
        ow)
          OW=1
          ;;
        sge)
          run_local=0
          ;;         
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;; 
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;;
    t)  type="${OPTARG}"
          ;;
    o)  OW=1
          ;;
    j)  n_cpus="${OPTARG}"
          ;;
    q)  SGE_QUEUE="${OPTARG}"
          ;;
    x)  kwargs_flag="--kwargs ${OPTARG}"
          ;; 
    p)  priors_flag="--priors ${OPTARG}"
          ;; 
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage && exit 0
fi

INPUT="${@:$OPTIND:1}"
OUTPUT="${@:$OPTIND+1:1}"
MASKS="${@:$OPTIND+2:1}"

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "MGDM segmentation with Nighres"

# nighres required this module
check_python_package "nighres"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  # set paths
  input_dir="${INPUT}/${base_path}"
  output_dir="${OUTPUT}/${base_path}"
  mask_dir="${MASKS}/${base_path}"

  if [ ! -d "${input_dir}" ]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  fi
  
  #-----------------------------------------------------------------------------
  # Look for files
  
  # T1w file
  bet_uni=$(
    find "${input_dir}" \
    -type f \
    -name "*acq-${DATA_UPR}*" \
    -and -not -name "*gdh*" \
    -and -name "*T1w.nii.gz" \
    2>/dev/null
  )

  # T1map file
  bet_t1m=$(
    find "${input_dir}" \
    -type f \
    -name "*acq-${DATA_UPR}*" \
    -and -not -name "*gdh*" \
    -and -name "*T1map.nii.gz" \
    2>/dev/null
  )

  # garbage mask
  mask_outside=$(
    find "${mask_dir}" \
    -type f \
    -name "*acq-${DATA_UPR}*" \
    -and -name "*-outside.nii.gz" \
    2>/dev/null
  )

  #-----------------------------------------------------------------------------
  # Define nighres output names
  output_root="${base}_acq-${DATA_UPR}_desc"
  masked_seg="${output_dir}/mgdm"
  mgdm_seg="${masked_seg}/${output_root}-mgdm_seg.nii.gz"

  #-----------------------------------------------------------------------------
  # overwrite mode
  if [[ ${OW} -eq 1 ]]; then
    if [[ -d "${masked_seg}" ]]; then
      rm -r "${masked_seg}/${output_root}"* 2>/dev/null
    fi
  fi

  #-----------------------------------------------------------------------------
  # if we want the GdH-mgdm script, run it directly.
  execute_cmd=0
  if [[ ${type} == "gdh" ]]; then
    if [[ ! -f "${mgdm_seg}" ]]; then
      run_mode="Running ${BOLD_RED}GhD-version${RESET} of MGDM with ${BOLD_BLUE}call_gdhmgdm${RESET}"
      execute_cmd=1

      if [[ ! -f "${mask_outside}" ]]; then
        reason="Could not find \"outside\" mask.. [GdH]"
        execute_cmd=0
      fi

      # brain masks
      fs_mask="${SUBJECTS_DIR}/${sub_name}/mri/brainmask.mgz"
      brainmask=$(
        find -L "${input_dir}" \
        -type f \
        -name "mask*" \
        -and -name "*acq-${DATA_UPR}*" \
        2>/dev/null
      )

      #-----------------------------------------------------------------------------
      # check which input to use
      if [[ -f "${fs_mask}" ]]; then
        use_mask="${fs_mask}"
      else
        if [[ ! -z "${brainmask}" ]]; then
          use_mask="${brainmask}"
        else
          reason="not sure what mask to use.. [GdH]"
          execute_cmd=0
        fi
      fi

      #-----------------------------------------------------------------------------
      # decide the job type
      call_="call_gdhmgdm"
      job="$(
        decide_job_type \
        "${call_}" \
        "${output_root}-mgdm" \
        "${run_local}" \
        "${DIR_LOGS}" \
        "${n_cpus}" \
        "${SGE_QUEUE}"
      )"

      # define command
      cmd=(
        "${job}"
        --inputdir "${input_dir}"
        --brainmask "${use_mask}"
        --duramask "${mask_outside}"
        --outputdir "${masked_seg}"
        --name "${output_root}"
        "${priors_flag}"
        "${kwargs_flag}"
      )

    else
      reason="segmentation already present [GdH]"
    fi
  else

    #-----------------------------------------------------------------------------
    # run standard version with Filters
    if [[ ! -d "$(dirname "${mgdm_seg}")" ]]; then
      mkdir -p "$(dirname "${mgdm_seg}")"
    fi

    if [[ ! -f "${mgdm_seg}" ]]; then

      #-----------------------------------------------------------------------------
      # set execution rules
      execute_cmd=1
      run_mode="Running ${BOLD_RED}regular version${RESET} of MGDM with ${BOLD_BLUE}call_nighresmgdm${RESET}"

      if [[ -z "${bet_uni}" ]]; then
        execute_cmd=0
        reason="Could not find skullstripped T1-image.. "
      fi

      if [[ -z "${bet_t1m}" ]]; then
        execute_cmd=0
        reason="Could not find skullstripped T1map-image.. "
      fi
      
      # decide the job type
      call_="call_nighresmgdm"
      job="$(
        decide_job_type \
        "${call_}" \
        "${output_root}-mgdm" \
        "${run_local}" \
        "${DIR_LOGS}" \
        "${n_cpus}" \
        "${SGE_QUEUE}"
      )"

      # define command
      cmd=(
        "${job}"
        --t1w "${bet_uni}"
        --t1map "${bet_t1m}"
        --outputdir "${masked_seg}"
        --name "${output_root}"
        "${priors_flag}"
        "${kwargs_flag}"
      )

    else
      execute_cmd=0
      reason="segmentation already present"
    fi
  fi

  #-----------------------------------------------------------------------------
  # execute command
  if [[ ${execute_cmd} -eq 1 ]]; then
    if [[ ${run_local} -eq 1 ]]; then
      print_subject_header ${sub_name}
      echo -e ${run_mode}
      print_create_img "${mgdm_seg}"
    fi

    # execute command
    if [[ ${run_local} -eq 1 ]]; then
      print_cmd "${cmd[@]}"
    fi

    eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "${call_}"
      exit 1
    fi

  else
    echo -e "${BOLD_CYAN}${sub_name}${RESET}: Not executing MGDM; ${BOLD_RED}${reason}${RESET}"
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
