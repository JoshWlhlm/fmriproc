#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_mriqc

Quality control using MRIqc. It uses the singularity container defined in the setup file (variable
MRIQC_SIMG).

Usage:
  spinoza_mriqc [arguments] [options] <project dir> <derivatives>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05. use 'group' 
                  if you want group statistics
  -n <session>    session ID (e.g., 1, 2, or none); If set, only data from this session will be 
                  used
  -j <cpus>       number of cores to use (default is 1)
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  
Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output  
  --local         don't submit to SGE, run locally
  --anat-only     only include anatomical images in the process (default is everything it can find)
  --func-only     only include functional images in the process (default is everything it can 
                  find)  
  --fd            only get FD-timecourse file without initializing MRIqc

Positional:
  <project dir>   directory containing the anatomical data. Can also be the regular project root
                  folder if you want MRIqc do the surface reconstruction
  <derivatives>   output folder for MRIqc; generally this will be <project>/derivatives

Example:
  spinoza_mriqc <project>/derivatives/masked_mp2rage <project>/derivatives anat
  spinoza_mriqc -s 001 -n 1 -f <project> <project>/derivatives/masked_mp2rage <project>/deri-
                   vatives anat

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
run_local=1
remove_wf=0
mod_flag=""
n_cpus=1
fd_flag=""
SGE_QUEUE=${SGE_QUEUE_SHORT}
while getopts :-:hls:r:n:f:m:c:k:q:j: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        local)
          run_local=1
          ;;   
        sge)
          run_local=0
          ;;             
        anat-only)
          mod_flag="--anat-only"
          ;;   
        func-only)
          mod_flag="--func-only"
          ;;        
        remove-wf)
          remove_wf=1
          ;;    
        fd)
          fd_flag="--fd"
          ;;
        ow)
          OW=1
          ;;            
        help)
          Usage && exit 0
          ;;                      
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;      
    j)  n_cpus=${OPTARG}
          ;;                            
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
#intro
start_timer "Quality control with MRIqc"

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    if [[ ${sub} != "group" ]]; then
      sub_name=${SUBJECT_PREFIX}${subID}
      sub_id=${subID}
    else
      sub_name="group"
      sub_id="group"
    fi
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  #-----------------------------------------------------------------------------
  # set base paths
  if [[ ${sub_name} != "group" ]]; then
    if [[ ! -z ${ses} ]]; then
      nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')
      base_path=${sub_name}/ses-${nr}
      base=${sub_name}_ses-${nr}
      ses_flag="-n ${ses}"
    else
      base_path=${sub_name}
      base=${sub_name}
      ses_flag=""
    fi
  fi

  #-----------------------------------------------------------------------------
  # set working directory
  workdir="${PATH_HOME}/mriqc/${PROJECT}"

  # check existence working directory and other general settings
  if [[ ! -d "${workdir}" ]]; then
    mkdir -p "${workdir}"
  fi

  # check if we need to delete stuff
  if [[ ${remove_wf} -eq 1 ]]; then
    rm_dir=$(
      find "${workdir}/mriqc_wf" \
      -type f \
      -name "*${sub_name}*" \
      2>/dev/null
    )
    if [[ ! -z "${rm_dir}" ]]; then
      rm -r "${rm_dir}"
    fi
  fi

  #-----------------------------------------------------------------------------
  # decide the job type (depending on SGE, can be either qsub or call_fmriprep; for anything else it's call_fmriprep)
  if [[ ${run_local} -eq 1 ]]; then
    # print header
    print_subject_header ${sub_name}
  fi

  #-----------------------------------------------------------------------------
  # decide the job type
  job="$(
    decide_job_type \
    "call_mriqc" \
    "${sub_name}_desc-mriqc" \
    "${run_local}" \
    "${workdir}" \
    "${n_cpus}" \
    "${SGE_QUEUE}"
  )"

  #-----------------------------------------------------------------------------
  # execute the command
  cmd=(
    "${job}"
    -s "${sub_id}"
    "${ses_flag}"
    -j "${n_cpus}"
    -b "${FPREP_BINDING}"
    -i "${MRIQC_SIMG}"
    -r "${INPUT}"
    -d "${OUTPUT}"
    -w "${workdir}" 
    "${mod_flag}"
    "${fd_flag}"
  )

  print_cmd "${cmd[@]}" && eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "call_mriqc"
    exit 1
  fi

done

#-----------------------------------------------------------------------------
# outro
end_timer
