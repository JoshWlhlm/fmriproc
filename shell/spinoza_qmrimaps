#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# function to search for B1
function find_b1_file {
  
  local in_file="$1"
  local input_folder
  input_folder="$(dirname "$in_file")"

  # Collect all *B1.nii.gz files in the same folder
  local IFS=$'\n'       # split only on newlines
  local b1_files=( $(find "$input_folder" -maxdepth 1 -type f -name "*B1.nii.gz") )
  unset IFS

  # No matches?
  if [ "${#b1_files[@]}" -eq 0 ]; then
    echo ""
    return
  fi

  # Only one match
  if [ "${#b1_files[@]}" -eq 1 ]; then
    echo "${b1_files[0]}"
    return
  fi

  # Multiple matches: try to find same run-<id>
  local run_id
  run_id="$(get_id "$in_file")"

  for b1 in "${b1_files[@]}"; do
    if [[ "$b1" == *"run-${run_id}"* ]]; then
      echo "$b1"
      return
    fi
  done

  # Fallback: just return the first one
  echo "${b1_files[0]}"
}


#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_qmrimaps

wrapper for estimation of T1 and other parametric maps from the (ME)MP2RAGE sequences by throwing
the two inversion and phase images in Pymp2rage (https://github.com/Gilles86/pymp2rage).

Usage:
  spinoza_qmrimaps [arguments] [options] <project root> <derivatives>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -p <pars file>  specify custom json-file with MP2RAGE(ME) parameters. See 
                  \$REPO_DIR/misc for examples. Format should be like so (for mp2rage):
                    
                    {
                        "TR": 5.5,
                        "inv_times": [0.8,2.7],
                        "fa": [6,6],
                        "nZ": 1000,
                        "FLASH_tr": [0.0062,0.0062]
                    }

  -q <queue>      submit jobs to a specific queue. Defaults to \$SGE_QUEUE_SHORT in spinoza_setup
  -l <lower>      lower percentile (default = 0.01) for call_winsorize
  -u <upper>      upper percentile (default = 0.99) for call_winsorize  
  -x <kwargs>     Additional commands to be passed to 'N4BiasFieldCorrection'. Format should be 
                  comma-separated flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  This allows bash commands to be translated to 'N4BiasFieldCorrection' commands

Options:
  -h|--help       print this help text
  -o|--ow         overwrite existing files (T1w/T1map-files)
  -f|--full       overwrite all existing files (including masks)
  --verbose       echo command to terminal
  --ups           use settings for universal pulse (UP) [parameters are hardcoded]
  --no-reg        do not register separate T1map in case you have MPRAGE image
  --no-bias       skip bias correction (e.g., is B1-correction is enough)
  --no-winsor     do not winsorize the image intensities of T1w (and T1map) from MPRAGE. Generally 
                  recommend doing so, though..
  --spm           use SPM for bias correction instead of ANTs [call_mprage]
  --sge           submit job to cluster (called with 'master -m <module> --sge')  
  --skip-bg       Do not create masks from INV2-image to remove noise from MP2RAGE   
  --force-exec    Force the execution even if the files exist already

Positional:
  <project root>  directory containing the T1w and T2w files; should generally be pymp2rage-folder
  <derivatives>   path to output mask directory  

Example:
  spinoza_qmrimaps \$DIR_DATA_HOME \$DIR_DATA_DERIV/pymp2rage
  spinoza_qmrimaps -s 01 -n 1 \$DIR_DATA_HOME \$DIR_DATA_DERIV/pymp2rage

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0}))

  # use UPs and submit
  master -m $(get_module_nr $(basename ${0})) --ups --sge

  # custom parameters
  master -m $(get_module_nr $(basename ${0})) -p some_file.json

  # specify kwargs
  master -m $(get_module_nr $(basename ${0})) -x -b=[1x1x1,3],-r=0

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject flag
UPs=""
OW=0
FULL_OW=0
SKIP_BG="--mask"
PARS_FLAG=""
FORCE_EXEC=0
run_local=1
n_cpus=1
kwargs=""
spm_flag=""
reg_flag=""
bias_flag=""
intensity_flag=""
upper=""
lower=""
SGE_QUEUE=${SGE_QUEUE_SHORT}
while getopts :-:hofs:n:p:q:j:x:l:u: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        ow)
          OW=1
          ;;
        full)
          FULL_OW=1
          ;; 
        ups)
          UPs="--ups"
          ;;
        skip-bg)
          SKIP_BG="--skip-bg"
          ;;
        force-exec)
          FORCE_EXEC=1
          ;;
        sge)
          run_local=0
          ;;
        spm)
          spm_flag="--spm"
          ;; 
        no-reg)
          reg_flag="--no-reg"
          ;;
        no-bias)
          bias_flag="--no-bias"
          ;;          
        no-winsor)
          intensity_flag="--no-winsor"
          ;;          
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;; 
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    l)  lower="--lower ${OPTARG}"
          ;;
    u)  upper="--upper ${OPTARG}"
          ;;
    o)  OW=1
          ;;
    f)  FULL_OW=1
          ;; 
    p)  PARS_FLAG="--pars ${OPTARG}"
          ;;
    j)  n_cpus=${OPTARG}
          ;;
    q)  SGE_QUEUE=${OPTARG}
          ;;
    x)  kwargs="-x ${OPTARG}"
          ;; 
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Derive T1w/T1map from ${DATA} using pymp2rage"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  #-----------------------------------------------------------------------------
  # set paths
  input_dir="${INPUT}/${base_path}"
  output_dir="${OUTPUT}/${base_path}"

  #-----------------------------------------------------------------------------
  # check aggressive overwrite mode
  if [[ ${FULL_OW} -eq 1 ]]; then
    rm -r ${output_dir} 2>/dev/null
  fi
  
  if [[ ! -d "${input_dir}" ]]; then
    print_directory_not_exist "${sub_name}" "${input_dir}"
    continue
  else
    if [[ ${run_local} -eq 1 ]]; then
      # print header
      print_subject_header ${sub_name}
    fi
  fi
  
  #-----------------------------------------------------------------------------
  # loop through available datatype (see spinoza_setup)
  for a in ${ACQ[@]}; do

    # make lower case
    a_low=$(make_lower "${a}")
    a_up=$(make_upper "${a}")

    #-----------------------------------------------------------------------------
    # T1w file
    t1w=$(
      find -L "${output_dir}" \
      -maxdepth 1 \
      -type f \
      -name "*acq-${a_up}_*" \
      -and -name "*T1w.nii.gz" \
      -and -not -name "*space-*" \
      2>/dev/null
    )

    # T1map file
    t1map=$(
      find -L "${output_dir}" \
      -maxdepth 1 \
      -type f \
      -name "*acq-${a_up}_*" \
      -and -name "*T1map.nii.gz" \
      -and -not -name "*space-*" \
      2>/dev/null
    )

    #-----------------------------------------------------------------------------
    # check input type
    if [[ ${DATA_UPR} == "MPRAGE" ]]; then
      in_files=(
        $(
          find -L "${input_dir}" \
          -type f \
          -iname "*acq-${a}*" \
          -and -name "*T1w*" \
          -and -name "*.nii.gz" | \
          sort \
          2>/dev/null
        )
      )
    else
      # mp2rage(me); exclude files with T1w and should have 'inv-' tags
      in_files=$(
        find -L "${input_dir}" \
        -type f \
        -iname "*acq-${a}*" \
        -and -name "*inv-*" \
        -and -name "*.nii.gz" | \
        sort \
        2>/dev/null
      )
    fi

    #-----------------------------------------------------------------------------
    # check if we should overwrite
    if [[ ${OW} -eq 1 ]]; then
      rm "${t1w}" "${t1map}" 2>/dev/null
    fi

    #-----------------------------------------------------------------------------
    # execute
    if [[ ! -f "${t1w}" || ! -f "${t1map}" || ${FORCE_EXEC} -eq 1 ]]; then

      if [[ ${#in_files[@]} -eq 0 ]]; then
        echo -e "${BOLD_CYAN}${sub_name}${RESET}: ${#in_files[@]} files available for ${a_up}"
        break
      else
        if [[ ! -d "${output_dir}" ]]; then
          mkdir -p "${output_dir}"
        fi

        #-----------------------------------------------------------------------------
        # mp2rage(me) job
        if [[ "$(basename $(which call_${a_low}))" == *"mp2rage"* ]]; then

          # decide job execution
          acq_tag="acq-${a_up}"
          output_base="${base}_${acq_tag}"
          job="$(
            decide_job_type \
            "call_${a_low}" \
            "${output_base}_desc-${a_low}" \
            "${run_local}" \
            "${n_cpus}" \
            "${SGE_QUEUE}"
          )"

          # define command
          cmd=(
            "${job}"
            --inputdir "${input_dir}"
            --outputdir "${output_dir}"
            --name "${output_base}"
            "${PARS_FLAG}"
            "${UPs}"
            "${lower}"
            "${upper}"
            "${SKIP_BG}"
          )

          # execute command
          if [[ ${run_local} -eq 1 ]]; then
            print_cmd "${cmd[@]}"
          fi

          eval "${cmd[@]}"
          if [[ $? -ne 0 ]]; then
            echo && print_line -
            print_error_msg "$(basename ${0})" "call_${a_low}"
            exit 1
          fi

        #-----------------------------------------------------------------------------
        # mprage job
        else
          for file in "${in_files[@]}"; do
            # set output name based on acquisition strategy
            add_run=""
            run=$(get_id "${file}" run)
            if [[ ! -z "${run}" ]]; then
              add_run="_run-${run}"
            fi

            # try to find b1 file
            b1_file=$(find_b1_file "${file}")
            if [[ -f "${b1_file}" ]]; then
              b1_flag="-b ${b1_file}"
            else
              b1_flag=""
            fi

            # decide job execution
            acq_tag="acq-${a_up}"
            output_base="${base}_${acq_tag}${add_run}"
            job="$(
              decide_job_type \
              "call_${a_low}" \
              "${output_base}_desc-${a_low}" \
              "${run_local}" \
              "${n_cpus}" \
              "${SGE_QUEUE}"
            )"

            # define command
            cmd=(
              "${job}"
              "${kwargs}"
              "${spm_flag}"
              "${reg_flag}"
              "${intensity_flag}"
              "${file}"
              "${lower}"
              "${upper}"
              "${b1_flag}"
              "${bias_flag}"
              "${output_dir}/${output_base}"
            )

            # execute command
            if [[ ${run_local} -eq 1 ]]; then
              echo -e "Processing \"${BOLD_GREEN}${file}${RESET}\""
            fi
            
            eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              print_error_msg "$(basename ${0})" "call_${a_low}"
              exit 1
            fi
          done
        fi
      fi

    else
      print_output_exists "${sub_name}" "${t1w}"
    fi

  done

  #-----------------------------------------------------------------------------
  # copy extra anatomical files
  for f in ${SEARCH_ANATOMICALS[@]}; do

    # copy T2w-file to pymp2rage folder for later convenience
    if [[ "${f}" != "T1w" ]]; then
      f_files=$(
        find -L "${input_dir}" \
        -type f \
        -name "*${f}.nii.gz" \
        2>/dev/null
      )
      if [ ! -z "${f_files}" ]; then
        ct=0; for ii in ${f_files[@]}; do ((ct++)); done
        ix=0
        if [[ ${ct} -gt 1 ]]; then
          echo -e "Found multiple ${BOLD_RED}${f}${RESET}-images; taking last one"
          ix=$((${#f_files[@]}-1))
        fi
        cp "${f_files[ix]}" "${output_dir}" 2>/dev/null  
      fi
    fi
  done
done

#-----------------------------------------------------------------------------
# outro
end_timer
